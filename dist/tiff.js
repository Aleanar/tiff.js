/**
   @license
   ----
   tiff.js: https://github.com/seikichi/tiff.js

   Copyright (C) 2013 seikichi[at]kmc.gr.jp

   This software is provided 'as-is', without any express or implied
   warranty. In no event will the authors be held liable for any damages
   arising from the use of this software.

   Permission is granted to anyone to use this software for any purpose,
   including commercial applications, and to alter it and redistribute it
   freely, subject to the following restrictions:

   1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.

   2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.

   3. This notice may not be removed or altered from any source
   distribution.
   ----
   zlib: http://www.zlib.net/

   Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler

   This software is provided 'as-is', without any express or implied
   warranty.  In no event will the authors be held liable for any damages
   arising from the use of this software.

   Permission is granted to anyone to use this software for any purpose,
   including commercial applications, and to alter it and redistribute it
   freely, subject to the following restrictions:

   1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.
   2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.
   3. This notice may not be removed or altered from any source distribution.

   Jean-loup Gailly        Mark Adler
   jloup@gzip.org          madler@alumni.caltech.edu


   The data format used by the zlib library is described by RFCs (Request for
   Comments) 1950 to 1952 in the files http://tools.ietf.org/html/rfc1950
   (zlib format), rfc1951 (deflate format) and rfc1952 (gzip format).
   ----
   LibTIFF: http://www.remotesensing.org/libtiff/

   Copyright (c) 1988-1997 Sam Leffler
   Copyright (c) 1991-1997 Silicon Graphics, Inc.

   Permission to use, copy, modify, distribute, and sell this software and 
   its documentation for any purpose is hereby granted without fee, provided
   that (i) the above copyright notices and this permission notice appear in
   all copies of the software and related documentation, and (ii) the names of
   Sam Leffler and Silicon Graphics may not be used in any advertising or
   publicity relating to the software without the specific, prior written
   permission of Sam Leffler and Silicon Graphics.

   THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  

   IN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR
   ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
   OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
   WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
   LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
   OF THIS SOFTWARE.
*/
if (!ArrayBuffer.prototype.slice) {
  ArrayBuffer.prototype.slice = function (begin, end) {
    begin = (begin|0) || 0;
    var num = this.byteLength;
    end = end === (void 0) ? num : (end|0);

    // Handle negative values.
    if (begin < 0) begin += num;
    if (end < 0) end += num;

    if (num === 0 || begin >= num || begin >= end) {
      return new ArrayBuffer(0);
    }

    var length = Math.min(num - begin, end - begin);
    var target = new ArrayBuffer(length);
    var targetArray = new Uint8Array(target);
    targetArray.set(new Uint8Array(this, begin, length));
    return target;
  };
}
var loadModule = function (options) {
  var Module = {};

  if ('TOTAL_MEMORY' in options) {
    Module['TOTAL_MEMORY'] = options['TOTAL_MEMORY'];
  }

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(148739);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([84,97,103,32,0,0,0,0,0,0,0,0,0,0,0,0,116,105,102,95,100,105,114,46,99,0,0,0,0,0,0,0,84,73,70,70,65,100,118,97,110,99,101,68,105,114,101,99,116,111,114,121,0,0,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,32,102,97,105,108,101,100,0,0,37,115,58,32,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,0,0,0,37,115,58,32,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,0,0,0,0,95,84,73,70,70,86,71,101,116,70,105,101,108,100,0,0,37,115,58,32,73,110,118,97,108,105,100,32,37,115,116,97,103,32,34,37,115,34,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,99,111,100,101,99,41,0,112,115,101,117,100,111,45,0,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,0,68,111,116,82,97,110,103,101,0,0,0,0,0,0,0,0,116,118,45,62,99,111,117,110,116,32,61,61,32,49,0,0,78,111,110,115,116,97,110,100,97,114,100,32,116,105,108,101,32,119,105,100,116,104,32,37,100,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,78,111,110,115,116,97,110,100,97,114,100,32,116,105,108,101,32,108,101,110,103,116,104,32,37,100,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,0,0,0,0,0,0,0,37,115,58,32,83,111,114,114,121,44,32,99,97,110,110,111,116,32,110,101,115,116,32,83,117,98,73,70,68,115,0,0,37,115,58,32,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,115,112,97,99,101,32,102,111,114,32,108,105,115,116,32,111,102,32,99,117,115,116,111,109,32,118,97,108,117,101,115,0,0,37,115,58,32,66,97,100,32,102,105,101,108,100,32,116,121,112,101,32,37,100,32,102,111,114,32,34,37,115,34,0,0,102,105,112,45,62,102,105,101,108,100,95,119,114,105,116,101,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,95,84,73,70,70,86,83,101,116,70,105,101,108,100,0,0,37,115,58,32,78,117,108,108,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,32,40,116,121,112,101,32,37,100,44,32,119,114,105,116,101,99,111,117,110,116,32,37,100,44,32,112,97,115,115,99,111,117,110,116,32,37,100,41,0,0,99,117,115,116,111,109,32,116,97,103,32,98,105,110,97,114,121,32,111,98,106,101,99,116,0,0,0,0,0,0,0,0,37,115,58,32,66,97,100,32,118,97,108,117,101,32,37,117,32,102,111,114,32,34,37,115,34,32,116,97,103,0,0,0,84,73,70,70,83,101,116,70,105,101,108,100,0,0,0,0,37,115,58,32,73,110,118,97,108,105,100,32,73,110,107,78,97,109,101,115,32,118,97,108,117,101,59,32,101,120,112,101,99,116,105,110,103,32,37,100,32,110,97,109,101,115,44,32,102,111,117,110,100,32,37,100,0,0,0,0,0,0,0,0,37,115,58,32,85,110,107,110,111,119,110,32,37,115,116,97,103,32,37,117,0,0,0,0,37,115,58,32,67,97,110,110,111,116,32,109,111,100,105,102,121,32,116,97,103,32,34,37,115,34,32,119,104,105,108,101,32,119,114,105,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,160,16,0,0,1,0,0,0,0,0,0,0,56,0,0,0,136,4,0,0,84,97,103,32,0,0,0,0,95,84,73,70,70,83,101,116,117,112,70,105,101,108,100,115,0,0,0,0,0,0,0,0,83,101,116,116,105,110,103,32,117,112,32,102,105,101,108,100,32,105,110,102,111,32,102,97,105,108,101,100,0,0,0,0,95,84,73,70,70,77,101,114,103,101,70,105,101,108,100,115,0,0,0,0,0,0,0,0,102,111,114,32,102,105,101,108,100,115,32,97,114,114,97,121,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,102,105,101,108,100,115,32,97,114,114,97,121,0,84,73,70,70,70,105,101,108,100,87,105,116,104,84,97,103,0,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,44,32,117,110,107,110,111,119,110,32,116,97,103,32,48,120,37,120,0,0,0,0,0,0,0,0,84,97,103,32,37,100,0,0,154,130,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,104,12,0,0,0,0,0,0,157,130,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,120,12,0,0,0,0,0,0,34,136,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,128,12,0,0,0,0,0,0,36,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,144,12,0,0,0,0,0,0,39,136,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,1,1,168,12,0,0,0,0,0,0,40,136,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,184,12,0,0,0,0,0,0,0,144,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,216,12,0,0,0,0,0,0,3,144,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,232,12,0,0,0,0,0,0,4,144,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,0,13,0,0,0,0,0,0,1,145,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,24,13,0,0,0,0,0,0,2,145,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,48,13,0,0,0,0,0,0,1,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,72,13,0,0,0,0,0,0,2,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,96,13,0,0,0,0,0,0,3,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,112,13,0,0,0,0,0,0,4,146,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,128,13,0,0,0,0,0,0,5,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,152,13,0,0,0,0,0,0,6,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,176,13,0,0,0,0,0,0,7,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,192,13,0,0,0,0,0,0,8,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,208,13,0,0,0,0,0,0,9,146,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,224,13,0,0,0,0,0,0,10,146,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,232,13,0,0,0,0,0,0,20,146,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,1,1,248,13,0,0,0,0,0,0,124,146,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,8,14,0,0,0,0,0,0,134,146,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,24,14,0,0,0,0,0,0,144,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,40,14,0,0,0,0,0,0,145,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,56,14,0,0,0,0,0,0,146,146,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,80,14,0,0,0,0,0,0,0,160,0,0,4,0,4,0,7,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,1,0,104,14,0,0,0,0,0,0,1,160,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,120,14,0,0,0,0,0,0,2,160,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,136,14,0,0,0,0,0,0,3,160,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,152,14,0,0,0,0,0,0,4,160,0,0,13,0,13,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,168,14,0,0,0,0,0,0,11,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,192,14,0,0,0,0,0,0,12,162,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,208,14,0,0,0,0,0,0,14,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,240,14,0,0,0,0,0,0,15,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,8,15,0,0,0,0,0,0,16,162,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,32,15,0,0,0,0,0,0,20,162,0,0,2,0,2,0,3,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,65,0,1,0,64,15,0,0,0,0,0,0,21,162,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,80,15,0,0,0,0,0,0,23,162,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,96,15,0,0,0,0,0,0,0,163,0,0,1,0,1,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,1,0,112,15,0,0,0,0,0,0,1,163,0,0,1,0,1,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,1,0,128,15,0,0,0,0,0,0,2,163,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,144,15,0,0,0,0,0,0,1,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,160,15,0,0,0,0,0,0,2,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,176,15,0,0,0,0,0,0,3,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,192,15,0,0,0,0,0,0,4,164,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,208,15,0,0,0,0,0,0,5,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,232,15,0,0,0,0,0,0,6,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,0,16,0,0,0,0,0,0,7,164,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,1,0,24,16,0,0,0,0,0,0,8,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,40,16,0,0,0,0,0,0,9,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,56,16,0,0,0,0,0,0,10,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,72,16,0,0,0,0,0,0,11,164,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,88,16,0,0,0,0,0,0,12,164,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,120,16,0,0,0,0,0,0,32,164,0,0,33,0,33,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,144,16,0,0,0,0,0,0,69,120,112,111,115,117,114,101,84,105,109,101,0,0,0,0,70,78,117,109,98,101,114,0,69,120,112,111,115,117,114,101,80,114,111,103,114,97,109,0,83,112,101,99,116,114,97,108,83,101,110,115,105,116,105,118,105,116,121,0,0,0,0,0,73,83,79,83,112,101,101,100,82,97,116,105,110,103,115,0,79,112,116,111,101,108,101,99,116,114,105,99,67,111,110,118,101,114,115,105,111,110,70,97,99,116,111,114,0,0,0,0,69,120,105,102,86,101,114,115,105,111,110,0,0,0,0,0,68,97,116,101,84,105,109,101,79,114,105,103,105,110,97,108,0,0,0,0,0,0,0,0,68,97,116,101,84,105,109,101,68,105,103,105,116,105,122,101,100,0,0,0,0,0,0,0,67,111,109,112,111,110,101,110,116,115,67,111,110,102,105,103,117,114,97,116,105,111,110,0,67,111,109,112,114,101,115,115,101,100,66,105,116,115,80,101,114,80,105,120,101,108,0,0,83,104,117,116,116,101,114,83,112,101,101,100,86,97,108,117,101,0,0,0,0,0,0,0,65,112,101,114,116,117,114,101,86,97,108,117,101,0,0,0,66,114,105,103,104,116,110,101,115,115,86,97,108,117,101,0,69,120,112,111,115,117,114,101,66,105,97,115,86,97,108,117,101,0,0,0,0,0,0,0,77,97,120,65,112,101,114,116,117,114,101,86,97,108,117,101,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,68,105,115,116,97,110,99,101,0,77,101,116,101,114,105,110,103,77,111,100,101,0,0,0,0,76,105,103,104,116,83,111,117,114,99,101,0,0,0,0,0,70,108,97,115,104,0,0,0,70,111,99,97,108,76,101,110,103,116,104,0,0,0,0,0,83,117,98,106,101,99,116,65,114,101,97,0,0,0,0,0,77,97,107,101,114,78,111,116,101,0,0,0,0,0,0,0,85,115,101,114,67,111,109,109,101,110,116,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,0,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,79,114,105,103,105,110,97,108,0,0,0,0,0,0,83,117,98,83,101,99,84,105,109,101,68,105,103,105,116,105,122,101,100,0,0,0,0,0,70,108,97,115,104,112,105,120,86,101,114,115,105,111,110,0,67,111,108,111,114,83,112,97,99,101,0,0,0,0,0,0,80,105,120,101,108,88,68,105,109,101,110,115,105,111,110,0,80,105,120,101,108,89,68,105,109,101,110,115,105,111,110,0,82,101,108,97,116,101,100,83,111,117,110,100,70,105,108,101,0,0,0,0,0,0,0,0,70,108,97,115,104,69,110,101,114,103,121,0,0,0,0,0,83,112,97,116,105,97,108,70,114,101,113,117,101,110,99,121,82,101,115,112,111,110,115,101,0,0,0,0,0,0,0,0,70,111,99,97,108,80,108,97,110,101,88,82,101,115,111,108,117,116,105,111,110,0,0,0,70,111,99,97,108,80,108,97,110,101,89,82,101,115,111,108,117,116,105,111,110,0,0,0,70,111,99,97,108,80,108,97,110,101,82,101,115,111,108,117,116,105,111,110,85,110,105,116,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,76,111,99,97,116,105,111,110,0,69,120,112,111,115,117,114,101,73,110,100,101,120,0,0,0,83,101,110,115,105,110,103,77,101,116,104,111,100,0,0,0,70,105,108,101,83,111,117,114,99,101,0,0,0,0,0,0,83,99,101,110,101,84,121,112,101,0,0,0,0,0,0,0,67,70,65,80,97,116,116,101,114,110,0,0,0,0,0,0,67,117,115,116,111,109,82,101,110,100,101,114,101,100,0,0,69,120,112,111,115,117,114,101,77,111,100,101,0,0,0,0,87,104,105,116,101,66,97,108,97,110,99,101,0,0,0,0,68,105,103,105,116,97,108,90,111,111,109,82,97,116,105,111,0,0,0,0,0,0,0,0,70,111,99,97,108,76,101,110,103,116,104,73,110,51,53,109,109,70,105,108,109,0,0,0,83,99,101,110,101,67,97,112,116,117,114,101,84,121,112,101,0,0,0,0,0,0,0,0,71,97,105,110,67,111,110,116,114,111,108,0,0,0,0,0,67,111,110,116,114,97,115,116,0,0,0,0,0,0,0,0,83,97,116,117,114,97,116,105,111,110,0,0,0,0,0,0,83,104,97,114,112,110,101,115,115,0,0,0,0,0,0,0,68,101,118,105,99,101,83,101,116,116,105,110,103,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,83,117,98,106,101,99,116,68,105,115,116,97,110,99,101,82,97,110,103,101,0,0,0,0,73,109,97,103,101,85,110,105,113,117,101,73,68,0,0,0,254,0,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,1,0,224,37,0,0,0,0,0,0,255,0,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,1,0,240,37,0,0,0,0,0,0,0,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,38,0,0,0,0,0,0,1,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,16,38,0,0,0,0,0,0,2,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,32,38,0,0,0,0,0,0,3,1,0,0,255,255,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,48,38,0,0,0,0,0,0,6,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,64,38,0,0,0,0,0,0,7,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,9,0,1,0,96,38,0,0,0,0,0,0,8,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,112,38,0,0,0,0,0,0,9,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,128,38,0,0,0,0,0,0,10,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,10,0,0,0,144,38,0,0,0,0,0,0,13,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,160,38,0,0,0,0,0,0,14,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,176,38,0,0,0,0,0,0,15,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,200,38,0,0,0,0,0,0,16,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,208,38,0,0,0,0,0,0,17,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,216,38,0,0,0,0,0,0,18,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,15,0,0,0,232,38,0,0,0,0,0,0,21,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,16,0,0,0,248,38,0,0,0,0,0,0,22,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,17,0,0,0,8,39,0,0,0,0,0,0,23,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,24,39,0,0,0,0,0,0,24,1,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,18,0,1,0,40,39,0,0,0,0,0,0,25,1,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,19,0,1,0,56,39,0,0,0,0,0,0,26,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,3,0,1,0,72,39,0,0,0,0,0,0,27,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,3,0,1,0,88,39,0,0,0,0,0,0,28,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,20,0,0,0,104,39,0,0,0,0,0,0,29,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,128,39,0,0,0,0,0,0,30,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,4,0,1,0,144,39,0,0,0,0,0,0,31,1,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,4,0,1,0,160,39,0,0,0,0,0,0,32,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,39,0,0,0,0,0,0,33,1,0,0,255,255,255,255,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,39,0,0,0,0,0,0,34,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,208,39,0,0,0,0,0,0,35,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,232,39,0,0,0,0,0,0,40,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,22,0,1,0,0,40,0,0,0,0,0,0,41,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,23,0,1,0,16,40,0,0,0,0,0,0,44,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,32,40,0,0,0,0,0,0,45,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,44,0,1,0,56,40,0,0,0,0,0,0,49,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,80,40,0,0,0,0,0,0,50,1,0,0,20,0,20,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,96,40,0,0,0,0,0,0,59,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,112,40,0,0,0,0,0,0,60,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,120,40,0,0,0,0,0,0,62,1,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,136,40,0,0,0,0,0,0,63,1,0,0,6,0,6,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,152,40,0,0,0,0,0,0,64,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,26,0,1,0,176,40,0,0,0,0,0,0,65,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,37,0,1,0,192,40,0,0,0,0,0,0,66,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,208,40,0,0,0,0,0,0,67,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,224,40,0,0,0,0,0,0,68,1,0,0,255,255,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,240,40,0,0,0,0,0,0,69,1,0,0,255,255,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,41,0,0,0,0,0,0,74,1,0,0,255,255,255,255,18,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,49,0,1,1,16,41,0,0,144,3,0,0,76,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,24,41,0,0,0,0,0,0,77,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,46,0,1,1,32,41,0,0,0,0,0,0,78,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,1,0,48,41,0,0,0,0,0,0,80,1,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,65,0,0,0,64,41,0,0,0,0,0,0,81,1,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,80,41,0,0,0,0,0,0,82,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,31,0,0,1,96,41,0,0,0,0,0,0,83,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,112,41,0,0,0,0,0,0,84,1,0,0,254,255,255,255,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,33,0,1,0,128,41,0,0,0,0,0,0,85,1,0,0,254,255,255,255,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,34,0,1,0,144,41,0,0,0,0,0,0,87,1,0,0,255,255,253,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,1,160,41,0,0,0,0,0,0,88,1,0,0,1,0,1,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,176,41,0,0,0,0,0,0,88,1,0,0,1,0,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,176,41,0,0,0,0,0,0,89,1,0,0,1,0,1,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,192,41,0,0,0,0,0,0,17,2,0,0,3,0,3,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,208,41,0,0,0,0,0,0,18,2,0,0,2,0,2,0,3,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,39,0,0,0,232,41,0,0,0,0,0,0,19,2,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,40,0,0,0,0,42,0,0,0,0,0,0,20,2,0,0,6,0,6,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,41,0,1,0,24,42,0,0,0,0,0,0,188,2,0,0,253,255,253,255,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,48,42,0,0,0,0,0,0,227,128,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,31,0,0,0,64,42,0,0,0,0,0,0,228,128,0,0,254,255,255,255,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,80,42,0,0,0,0,0,0,229,128,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,35,0,0,0,96,42,0,0,0,0,0,0,230,128,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,36,0,0,0,112,42,0,0,0,0,0,0,20,130,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,128,42,0,0,0,0,0,0,21,130,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,1,0,144,42,0,0,0,0,0,0,22,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,160,42,0,0,0,0,0,0,23,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,176,42,0,0,0,0,0,0,24,130,0,0,1,0,1,0,11,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,65,0,1,0,200,42,0,0,0,0,0,0,25,130,0,0,16,0,16,0,11,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,224,42,0,0,0,0,0,0,26,130,0,0,16,0,16,0,11,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,1,0,248,42,0,0,0,0,0,0,152,130,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,16,43,0,0,0,0,0,0,187,131,0,0,253,255,253,255,4,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,65,0,0,1,32,43,0,0,0,0,0,0,73,134,0,0,253,255,253,255,1,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,48,43,0,0,0,0,0,0,105,135,0,0,1,0,1,0,18,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,65,0,0,0,64,43,0,0,160,3,0,0,115,135,0,0,253,255,253,255,7,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,65,0,0,1,80,43,0,0,0,0,0,0,37,136,0,0,1,0,1,0,18,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,65,0,0,0,96,43,0,0,0,0,0,0,92,136,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,65,0,1,0,112,43,0,0,0,0,0,0,93,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,65,0,1,0,128,43,0,0,0,0,0,0,94,136,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,65,0,1,0,144,43,0,0,0,0,0,0,95,136,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,65,0,1,0,160,43,0,0,0,0,0,0,63,146,0,0,1,0,1,0,12,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,168,43,0,0,0,0,0,0,5,160,0,0,1,0,1,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,176,43,0,0,0,0,0,0,18,198,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,208,43,0,0,0,0,0,0,19,198,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,224,43,0,0,0,0,0,0,20,198,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,248,43,0,0,0,0,0,0,21,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,16,44,0,0,0,0,0,0,22,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,40,44,0,0,0,0,0,0,23,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,56,44,0,0,0,0,0,0,24,198,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,0,1,72,44,0,0,0,0,0,0,25,198,0,0,2,0,2,0,3,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,65,0,0,0,96,44,0,0,0,0,0,0,26,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,120,44,0,0,0,0,0,0,27,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,136,44,0,0,0,0,0,0,28,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,160,44,0,0,0,0,0,0,29,198,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,184,44,0,0,0,0,0,0,30,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,200,44,0,0,0,0,0,0,92,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,216,44,0,0,0,0,0,0,31,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,240,44,0,0,0,0,0,0,32,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,8,45,0,0,0,0,0,0,33,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,24,45,0,0,0,0,0,0,34,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,40,45,0,0,0,0,0,0,35,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,56,45,0,0,0,0,0,0,36,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,80,45,0,0,0,0,0,0,37,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,104,45,0,0,0,0,0,0,38,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,128,45,0,0,0,0,0,0,39,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,152,45,0,0,0,0,0,0,40,198,0,0,255,255,255,255,5,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,168,45,0,0,0,0,0,0,41,198,0,0,2,0,2,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,184,45,0,0,0,0,0,0,42,198,0,0,1,0,1,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,200,45,0,0,0,0,0,0,43,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,224,45,0,0,0,0,0,0,44,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,240,45,0,0,0,0,0,0,45,198,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,8,46,0,0,0,0,0,0,46,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,24,46,0,0,0,0,0,0,47,198,0,0,255,255,255,255,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,65,0,1,0,48,46,0,0,0,0,0,0,48,198,0,0,4,0,4,0,5,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,65,0,0,0,72,46,0,0,0,0,0,0,49,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,88,46,0,0,0,0,0,0,50,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,112,46,0,0,0,0,0,0,51,198,0,0,1,0,1,0,5,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,65,0,0,0,136,46,0,0,0,0,0,0,52,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,152,46,0,0,0,0,0,0,53,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,168,46,0,0,0,0,0,0,90,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,184,46,0,0,0,0,0,0,91,198,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,208,46,0,0,0,0,0,0,93,198,0,0,16,0,16,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,232,46,0,0,0,0,0,0,139,198,0,0,255,255,255,255,1,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,1,1,248,46,0,0,0,0,0,0,140,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,16,47,0,0,0,0,0,0,141,198,0,0,4,0,4,0,4,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,65,0,0,0,40,47,0,0,0,0,0,0,142,198,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,56,47,0,0,0,0,0,0,143,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,72,47,0,0,0,0,0,0,144,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,96,47,0,0,0,0,0,0,145,198,0,0,255,255,255,255,7,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,65,0,0,1,120,47,0,0,0,0,0,0,146,198,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,144,47,0,0,0,0,0,0,27,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,168,47,0,0,0,0,0,0,90,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,65,0,0,0,184,47,0,0,0,0,0,0,144,1,0,0,1,0,1,0,13,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,192,47,0,0,0,0,0,0,145,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,216,47,0,0,0,0,0,0,146,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,0,0,232,47,0,0,0,0,0,0,147,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,248,47,0,0,0,0,0,0,148,1,0,0,4,0,4,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,65,0,0,0,8,48,0,0,0,0,0,0,149,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,65,0,0,0,24,48,0,0,0,0,0,0,177,1,0,0,255,255,255,255,10,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,65,0,0,1,40,48,0,0,0,0,0,0,178,1,0,0,255,255,255,255,3,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,0,1,48,48,0,0,0,0,0,0,179,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,65,0,0,0,64,48,0,0,0,0,0,0,47,2,0,0,255,255,255,255,4,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,65,0,0,1,80,48,0,0,0,0,0,0,172,135,0,0,2,0,2,0,4,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,65,0,0,0,96,48,0,0,0,0,0,0,0,0,0,0,83,117,98,102,105,108,101,84,121,112,101,0,0,0,0,0,79,108,100,83,117,98,102,105,108,101,84,121,112,101,0,0,73,109,97,103,101,87,105,100,116,104,0,0,0,0,0,0,73,109,97,103,101,76,101,110,103,116,104,0,0,0,0,0,66,105,116,115,80,101,114,83,97,109,112,108,101,0,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,80,104,111,116,111,109,101,116,114,105,99,73,110,116,101,114,112,114,101,116,97,116,105,111,110,0,0,0,0,0,0,0,84,104,114,101,115,104,104,111,108,100,105,110,103,0,0,0,67,101,108,108,87,105,100,116,104,0,0,0,0,0,0,0,67,101,108,108,76,101,110,103,116,104,0,0,0,0,0,0,70,105,108,108,79,114,100,101,114,0,0,0,0,0,0,0,68,111,99,117,109,101,110,116,78,97,109,101,0,0,0,0,73,109,97,103,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,77,97,107,101,0,0,0,0,77,111,100,101,108,0,0,0,83,116,114,105,112,79,102,102,115,101,116,115,0,0,0,0,79,114,105,101,110,116,97,116,105,111,110,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,0,82,111,119,115,80,101,114,83,116,114,105,112,0,0,0,0,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,77,105,110,83,97,109,112,108,101,86,97,108,117,101,0,0,77,97,120,83,97,109,112,108,101,86,97,108,117,101,0,0,88,82,101,115,111,108,117,116,105,111,110,0,0,0,0,0,89,82,101,115,111,108,117,116,105,111,110,0,0,0,0,0,80,108,97,110,97,114,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,80,97,103,101,78,97,109,101,0,0,0,0,0,0,0,0,88,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,89,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,70,114,101,101,79,102,102,115,101,116,115,0,0,0,0,0,70,114,101,101,66,121,116,101,67,111,117,110,116,115,0,0,71,114,97,121,82,101,115,112,111,110,115,101,85,110,105,116,0,0,0,0,0,0,0,0,71,114,97,121,82,101,115,112,111,110,115,101,67,117,114,118,101,0,0,0,0,0,0,0,82,101,115,111,108,117,116,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([111,110,85,110,105,116,0,0,80,97,103,101,78,117,109,98,101,114,0,0,0,0,0,0,67,111,108,111,114,82,101,115,112,111,110,115,101,85,110,105,116,0,0,0,0,0,0,0,84,114,97,110,115,102,101,114,70,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,83,111,102,116,119,97,114,101,0,0,0,0,0,0,0,0,68,97,116,101,84,105,109,101,0,0,0,0,0,0,0,0,65,114,116,105,115,116,0,0,72,111,115,116,67,111,109,112,117,116,101,114,0,0,0,0,87,104,105,116,101,80,111,105,110,116,0,0,0,0,0,0,80,114,105,109,97,114,121,67,104,114,111,109,97,116,105,99,105,116,105,101,115,0,0,0,67,111,108,111,114,77,97,112,0,0,0,0,0,0,0,0,72,97,108,102,116,111,110,101,72,105,110,116,115,0,0,0,84,105,108,101,87,105,100,116,104,0,0,0,0,0,0,0,84,105,108,101,76,101,110,103,116,104,0,0,0,0,0,0,84,105,108,101,79,102,102,115,101,116,115,0,0,0,0,0,84,105,108,101,66,121,116,101,67,111,117,110,116,115,0,0,83,117,98,73,70,68,0,0,73,110,107,83,101,116,0,0,73,110,107,78,97,109,101,115,0,0,0,0,0,0,0,0,78,117,109,98,101,114,79,102,73,110,107,115,0,0,0,0,68,111,116,82,97,110,103,101,0,0,0,0,0,0,0,0,84,97,114,103,101,116,80,114,105,110,116,101,114,0,0,0,69,120,116,114,97,83,97,109,112,108,101,115,0,0,0,0,83,97,109,112,108,101,70,111,114,109,97,116,0,0,0,0,83,77,105,110,83,97,109,112,108,101,86,97,108,117,101,0,83,77,97,120,83,97,109,112,108,101,86,97,108,117,101,0,67,108,105,112,80,97,116,104,0,0,0,0,0,0,0,0,88,67,108,105,112,80,97,116,104,85,110,105,116,115,0,0,89,67,108,105,112,80,97,116,104,85,110,105,116,115,0,0,89,67,98,67,114,67,111,101,102,102,105,99,105,101,110,116,115,0,0,0,0,0,0,0,89,67,98,67,114,83,117,98,115,97,109,112,108,105,110,103,0,0,0,0,0,0,0,0,89,67,98,67,114,80,111,115,105,116,105,111,110,105,110,103,0,0,0,0,0,0,0,0,82,101,102,101,114,101,110,99,101,66,108,97,99,107,87,104,105,116,101,0,0,0,0,0,88,77,76,80,97,99,107,101,116,0,0,0,0,0,0,0,77,97,116,116,101,105,110,103,0,0,0,0,0,0,0,0,68,97,116,97,84,121,112,101,0,0,0,0,0,0,0,0,73,109,97,103,101,68,101,112,116,104,0,0,0,0,0,0,84,105,108,101,68,101,112,116,104,0,0,0,0,0,0,0,73,109,97,103,101,70,117,108,108,87,105,100,116,104,0,0,73,109,97,103,101,70,117,108,108,76,101,110,103,116,104,0,84,101,120,116,117,114,101,70,111,114,109,97,116,0,0,0,84,101,120,116,117,114,101,87,114,97,112,77,111,100,101,115,0,0,0,0,0,0,0,0,70,105,101,108,100,79,102,86,105,101,119,67,111,116,97,110,103,101,110,116,0,0,0,0,77,97,116,114,105,120,87,111,114,108,100,84,111,83,99,114,101,101,110,0,0,0,0,0,77,97,116,114,105,120,87,111,114,108,100,84,111,67,97,109,101,114,97,0,0,0,0,0,67,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,82,105,99,104,84,73,70,70,73,80,84,67,0,0,0,0,80,104,111,116,111,115,104,111,112,0,0,0,0,0,0,0,69,88,73,70,73,70,68,79,102,102,115,101,116,0,0,0,73,67,67,32,80,114,111,102,105,108,101,0,0,0,0,0,71,80,83,73,70,68,79,102,102,115,101,116,0,0,0,0,70,97,120,82,101,99,118,80,97,114,97,109,115,0,0,0,70,97,120,83,117,98,65,100,100,114,101,115,115,0,0,0,70,97,120,82,101,99,118,84,105,109,101,0,0,0,0,0,70,97,120,68,99,115,0,0,83,116,111,78,105,116,115,0,73,110,116,101,114,111,112,101,114,97,98,105,108,105,116,121,73,70,68,79,102,102,115,101,116,0,0,0,0,0,0,0,68,78,71,86,101,114,115,105,111,110,0,0,0,0,0,0,68,78,71,66,97,99,107,119,97,114,100,86,101,114,115,105,111,110,0,0,0,0,0,0,85,110,105,113,117,101,67,97,109,101,114,97,77,111,100,101,108,0,0,0,0,0,0,0,76,111,99,97,108,105,122,101,100,67,97,109,101,114,97,77,111,100,101,108,0,0,0,0,67,70,65,80,108,97,110,101,67,111,108,111,114,0,0,0,67,70,65,76,97,121,111,117,116,0,0,0,0,0,0,0,76,105,110,101,97,114,105,122,97,116,105,111,110,84,97,98,108,101,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,82,101,112,101,97,116,68,105,109,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,68,101,108,116,97,72,0,0,0,0,0,0,0,0,66,108,97,99,107,76,101,118,101,108,68,101,108,116,97,86,0,0,0,0,0,0,0,0,87,104,105,116,101,76,101,118,101,108,0,0,0,0,0,0,68,101,102,97,117,108,116,83,99,97,108,101,0,0,0,0,66,101,115,116,81,117,97,108,105,116,121,83,99,97,108,101,0,0,0,0,0,0,0,0,68,101,102,97,117,108,116,67,114,111,112,79,114,105,103,105,110,0,0,0,0,0,0,0,68,101,102,97,117,108,116,67,114,111,112,83,105,122,101,0,67,111,108,111,114,77,97,116,114,105,120,49,0,0,0,0,67,111,108,111,114,77,97,116,114,105,120,50,0,0,0,0,67,97,109,101,114,97,67,97,108,105,98,114,97,116,105,111,110,49,0,0,0,0,0,0,67,97,109,101,114,97,67,97,108,105,98,114,97,116,105,111,110,50,0,0,0,0,0,0,82,101,100,117,99,116,105,111,110,77,97,116,114,105,120,49,0,0,0,0,0,0,0,0,82,101,100,117,99,116,105,111,110,77,97,116,114,105,120,50,0,0,0,0,0,0,0,0,65,110,97,108,111,103,66,97,108,97,110,99,101,0,0,0,65,115,83,104,111,116,78,101,117,116,114,97,108,0,0,0,65,115,83,104,111,116,87,104,105,116,101,88,89,0,0,0,66,97,115,101,108,105,110,101,69,120,112,111,115,117,114,101,0,0,0,0,0,0,0,0,66,97,115,101,108,105,110,101,78,111,105,115,101,0,0,0,66,97,115,101,108,105,110,101,83,104,97,114,112,110,101,115,115,0,0,0,0,0,0,0,66,97,121,101,114,71,114,101,101,110,83,112,108,105,116,0,76,105,110,101,97,114,82,101,115,112,111,110,115,101,76,105,109,105,116,0,0,0,0,0,67,97,109,101,114,97,83,101,114,105,97,108,78,117,109,98,101,114,0,0,0,0,0,0,76,101,110,115,73,110,102,111,0,0,0,0,0,0,0,0,67,104,114,111,109,97,66,108,117,114,82,97,100,105,117,115,0,0,0,0,0,0,0,0,65,110,116,105,65,108,105,97,115,83,116,114,101,110,103,116,104,0,0,0,0,0,0,0,83,104,97,100,111,119,83,99,97,108,101,0,0,0,0,0,68,78,71,80,114,105,118,97,116,101,68,97,116,97,0,0,77,97,107,101,114,78,111,116,101,83,97,102,101,116,121,0,67,97,108,105,98,114,97,116,105,111,110,73,108,108,117,109,105,110,97,110,116,49,0,0,67,97,108,105,98,114,97,116,105,111,110,73,108,108,117,109,105,110,97,110,116,50,0,0,82,97,119,68,97,116,97,85,110,105,113,117,101,73,68,0,79,114,105,103,105,110,97,108,82,97,119,70,105,108,101,78,97,109,101,0,0,0,0,0,79,114,105,103,105,110,97,108,82,97,119,70,105,108,101,68,97,116,97,0,0,0,0,0,65,99,116,105,118,101,65,114,101,97,0,0,0,0,0,0,77,97,115,107,101,100,65,114,101,97,115,0,0,0,0,0,65,115,83,104,111,116,73,67,67,80,114,111,102,105,108,101,0,0,0,0,0,0,0,0,65,115,83,104,111,116,80,114,101,80,114,111,102,105,108,101,77,97,116,114,105,120,0,0,67,117,114,114,101,110,116,73,67,67,80,114,111,102,105,108,101,0,0,0,0,0,0,0,67,117,114,114,101,110,116,80,114,101,80,114,111,102,105,108,101,77,97,116,114,105,120,0,80,101,114,83,97,109,112,108,101,0,0,0,0,0,0,0,73,110,100,101,120,101,100,0,71,108,111,98,97,108,80,97,114,97,109,101,116,101,114,115,73,70,68,0,0,0,0,0,80,114,111,102,105,108,101,84,121,112,101,0,0,0,0,0,70,97,120,80,114,111,102,105,108,101,0,0,0,0,0,0,67,111,100,105,110,103,77,101,116,104,111,100,115,0,0,0,86,101,114,115,105,111,110,89,101,97,114,0,0,0,0,0,77,111,100,101,78,117,109,98,101,114,0,0,0,0,0,0,68,101,99,111,100,101,0,0,73,109,97,103,101,66,97,115,101,67,111,108,111,114,0,0,84,56,50,79,112,116,105,111,110,115,0,0,0,0,0,0,83,116,114,105,112,82,111,119,67,111,117,110,116,115,0,0,73,109,97,103,101,76,97,121,101,114,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,100,105,114,101,99,116,111,114,121,32,97,116,32,111,102,102,115,101,116,32,37,108,117,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,101,108,100,32,119,105,116,104,32,116,97,103,32,37,100,32,40,48,120,37,120,41,32,101,110,99,111,117,110,116,101,114,101,100,0,0,0,0,82,101,103,105,115,116,101,114,105,110,103,32,97,110,111,110,121,109,111,117,115,32,102,105,101,108,100,32,119,105,116,104,32,116,97,103,32,37,100,32,40,48,120,37,120,41,32,102,97,105,108,101,100,0,0,0,102,105,105,32,33,61,32,70,65,73,76,69,68,95,70,73,73,0,0,0,0,0,0,0,116,105,102,95,100,105,114,114,101,97,100,46,99,0,0,0,84,73,70,70,82,101,97,100,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,80,108,97,110,97,114,99,111,110,102,105,103,32,116,97,103,32,118,97,108,117,101,32,97,115,115,117,109,101,100,32,105,110,99,111,114,114,101,99,116,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,99,111,110,116,105,103,32,105,110,115,116,101,97,100,32,111,102,32,99,104,117,110,107,121,0,0,0,0,0,73,109,97,103,101,76,101,110,103,116,104,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,110,117,109,98,101,114,32,111,102,32,37,115,0,116,105,108,101,115,0,0,0,115,116,114,105,112,115,0,0,84,105,108,101,79,102,102,115,101,116,115,0,0,0,0,0,83,116,114,105,112,79,102,102,115,101,116,115,0,0,0,0,117,110,107,110,111,119,110,32,116,97,103,110,97,109,101,0,80,104,111,116,111,109,101,116,114,105,99,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,89,67,98,67,114,0,0,0,0,0,0,80,104,111,116,111,109,101,116,114,105,99,32,116,97,103,32,118,97,108,117,101,32,97,115,115,117,109,101,100,32,105,110,99,111,114,114,101,99,116,44,32,97,115,115,117,109,105,110,103,32,100,97,116,97,32,105,115,32,89,67,98,67,114,32,105,110,115,116,101,97,100,32,111,102,32,82,71,66,0,0,66,105,116,115,80,101,114,83,97,109,112,108,101,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,56,32,98,105,116,115,32,112,101,114,32,115,97,109,112,108,101,0,0,0,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,115,115,117,109,105,110,103,32,99,111,114,114,101,99,116,32,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,118,97,108,117,101,32,105,115,32,51,0,0,0,0,0,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,116,97,103,32,105,115,32,109,105,115,115,105,110,103,44,32,97,112,112,108,121,105,110,103,32,99,111,114,114,101,99,116,32,83,97,109,112,108,101,115,80,101,114,80,105,120,101,108,32,118,97,108,117,101,32,111,102,32,51,0,0,0,0,0,67,111,108,111,114,109,97,112,0,0,0,0,0,0,0,0,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,105,115,32,109,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,66,111,103,117,115,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,105,103,110,111,114,105,110,103,32,97,110,100,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,87,114,111,110,103,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,102,105,101,108,100,44,32,105,103,110,111,114,105,110,103,32,97,110,100,32,99,97,108,99,117,108,97,116,105,110,103,32,102,114,111,109,32,105,109,97,103,101,108,101,110,103,116,104,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,115,99,97,110,108,105,110,101,32,115,105,122,101,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,116,105,108,101,32,115,105,122,101,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,122,101,114,111,32,115,116,114,105,112,32,115,105,122,101,0,0,0,102,111,114,32,99,104,111,112,112,101,100,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,97,114,114,97,121,0,0,0,0,0,102,111,114,32,99,104,111,112,112,101,100,32,34,83,116,114,105,112,79,102,102,115,101,116,115,34,32,97,114,114,97,121,0,0,0,0,0,0,0,0,84,73,70,70,70,101,116,99,104,83,116,114,105,112,84,104,105,110,103,0,0,0,0,0,102,111,114,32,115,116,114,105,112,32,97,114,114,97,121,0,40,116,109,115,105,122,101,95,116,41,100,97,116,97,115,105,122,101,62,48,0,0,0,0,84,73,70,70,82,101,97,100,68,105,114,69,110,116,114,121,65,114,114,97,121,0,0,0,82,101,97,100,68,105,114,69,110,116,114,121,65,114,114,97,121,0,0,0,0,0,0,0,84,73,70,70,70,101,116,99,104,78,111,114,109,97,108,84,97,103,0,0,0,0,0,0,78,111,32,100,101,102,105,110,105,116,105,111,110,32,102,111,117,110,100,32,102,111,114,32,116,97,103,32,37,100,0,0,102,105,112,45,62,115,101,116,95,102,105,101,108,100,95,116,121,112,101,33,61,84,73,70,70,95,83,69,84,71,69,84,95,79,84,72,69,82,0,0,102,105,112,45,62,115,101,116,95,102,105,101,108,100,95,116,121,112,101,33,61,84,73,70,70,95,83,69,84,71,69,84,95,73,78,84,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,48,0,65,83,67,73,73,32,118,97,108,117,101,32,102,111,114,32,116,97,103,32,34,37,115,34,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,32,105,110,32,118,97,108,117,101,59,32,118,97,108,117,101,32,105,110,99,111,114,114,101,99,116,108,121,32,116,114,117,110,99,97,116,101,100,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,100,117,101,32,116,111,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,108,105,109,105,116,97,116,105,111,110,115,0,0,0,0,0,0,65,83,67,73,73,32,118,97,108,117,101,32,102,111,114,32,116,97,103,32,34,37,115,34,32,100,111,101,115,32,110,111,116,32,101,110,100,32,105,110,32,110,117,108,108,32,98,121,116,101,0,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,49,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,50,0,105,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,102,105,101,108,100,32,34,37,115,34,44,32,101,120,112,101,99,116,101,100,32,50,44,32,103,111,116,32,37,100,0,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,62,61,49,0,105,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,102,105,101,108,100,32,34,37,115,34,44,32,101,120,112,101,99,116,101,100,32,37,100,44,32,103,111,116,32,37,100,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,0,0,0,0,0,102,105,112,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,49,0,102,105,112,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,0,48,0,0,0,0,0,0,0,112,100,105,114,0,0,0,0,84,73,70,70,70,101,116,99,104,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,37,115,58,32,83,101,101,107,32,101,114,114,111,114,32,97,99,99,101,115,115,105,110,103,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,116,104,105,115,32,105,115,32,112,114,111,98,97,98,108,121,32,110,111,116,32,97,32,118,97,108,105,100,32,73,70,68,32,111,102,102,115,101,116,0,116,111,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,37,46,49,48,48,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,122,101,114,111,32,116,97,103,32,100,105,114,101,99,116,111,114,105,101,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,102,111,114,32,73,70,68,32,108,105,115,116,0,0,0,0,77,105,115,115,105,110,103,82,101,113,117,105,114,101,100,0,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,105,115,32,109,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,37,115,34,32,102,105,101,108,100,0,0,0,69,115,116,105,109,97,116,101,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,0,102,111,114,32,34,83,116,114,105,112,66,121,116,101,67,111,117,110,116,115,34,32,97,114,114,97,121,0,0,0,0,0,67,97,110,110,111,116,32,100,101,116,101,114,109,105,110,101,32,115,105,122,101,32,111,102,32,117,110,107,110,111,119,110,32,116,97,103,32,116,121,112,101,32,37,100,0,0,0,0,84,73,70,70,82,101,97,100,68,105,114,101,99,116,111,114,121,67,104,101,99,107,79,114,100,101,114,0,0,0,0,0,73,110,118,97,108,105,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,59,32,116,97,103,115,32,97,114,101,32,110,111,116,32,115,111,114,116,101,100,32,105,110,32,97,115,99,101,110,100,105,110,103,32,111,114,100,101,114,0,0,73,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,73,79,32,101,114,114,111,114,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,0,73,110,99,111,114,114,101,99,116,32,118,97,108,117,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,32,112,101,114,32,115,97,109,112,108,101,32,102,111,114,32,34,37,115,34,0,0,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,115,105,122,101,32,111,102,32,34,37,115,34,32,118,97,108,117,101,32,102,97,105,108,101,100,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,0,0,0,84,73,70,70,82,101,97,100,68,105,114,69,110,116,114,121,79,117,116,112,117,116,69,114,114,0,0,0,0,0,0,0,73,110,99,111,114,114,101,99,116,32,99,111,117,110,116,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,73,79,32,101,114,114,111,114,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,0,73,110,99,111,114,114,101,99,116,32,118,97,108,117,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,32,112,101,114,32,115,97,109,112,108,101,32,102,111,114,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,115,105,122,101,32,111,102,32,34,37,115,34,32,118,97,108,117,101,32,102,97,105,108,101,100,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,114,101,97,100,105,110,103,32,111,102,32,34,37,115,34,59,32,116,97,103,32,105,103,110,111,114,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,111,114,114,121,44,32,114,101,113,117,101,115,116,101,100,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,115,32,110,111,116,32,99,111,110,102,105,103,117,114,101,100,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,115,32,119,105,116,104,32,37,100,45,98,105,116,32,115,97,109,112,108,101,115,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,110,101,101,100,101,100,32,37,115,32,116,97,103,0,0,0,80,104,111,116,111,109,101,116,114,105,99,73,110,116,101,114,112,114,101,116,97,116,105,111,110,0,0,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,99,111,110,116,105,103,117,111,117,115,32,100,97,116,97,32,119,105,116,104,32,37,115,61,37,100,44,32,97,110,100,32,37,115,61,37,100,32,97,110,100,32,66,105,116,115,47,83,97,109,112,108,101,61,37,100,0,0,83,97,109,112,108,101,115,47,112,105,120,101,108,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,82,71,66,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,0,0,0,0,67,111,108,111,114,32,99,104,97,110,110,101,108,115,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,115,101,112,97,114,97,116,101,100,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,0,0,0,0,0,0,73,110,107,83,101,116,0,0,83,111,114,114,121,44,32,76,111,103,76,32,100,97,116,97,32,109,117,115,116,32,104,97,118,101,32,37,115,61,37,100,0,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,83,111,114,114,121,44,32,76,111,103,76,117,118,32,100,97,116,97,32,109,117,115,116,32,104,97,118,101,32,37,115,61,37,100,32,111,114,32,37,100,0,0,0,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,76,111,103,76,117,118,32,105,109,97,103,101,115,32,119,105,116,104,32,37,115,61,37,100,0,0,80,108,97,110,97,114,99,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,32,119,105,116,104,32,37,115,61,37,100,0,0,77,105,115,115,105,110,103,32,114,101,113,117,105,114,101,100,32,34,67,111,108,111,114,109,97,112,34,32,116,97,103,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,102,111,114,32,99,111,108,111,114,109,97,112,32,99,111,112,121,0,83,111,114,114,121,44,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,0,0,0,0,0,78,111,32,34,103,101,116,34,32,114,111,117,116,105,110,101,32,115,101,116,117,112,0,0,78,111,32,34,112,117,116,34,32,114,111,117,116,105,110,101,32,115,101,116,117,112,108,59,32,112,114,111,98,97,98,108,121,32,99,97,110,32,110,111,116,32,104,97,110,100,108,101,32,105,109,97,103,101,32,102,111,114,109,97,116,0,0,0,37,115,0,0,0,0,0,0,105,110,105,116,89,67,98,67,114,67,111,110,118,101,114,115,105,111,110,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,89,67,98,67,114,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,0,0,0,0,0,0,0,0,105,109,103,45,62,66,105,116,100,101,112,116,104,49,54,84,111,56,61,61,78,85,76,76,0,0,0,0,0,0,0,0,116,105,102,95,103,101,116,105,109,97,103,101,46,99,0,0,66,117,105,108,100,77,97,112,66,105,116,100,101,112,116,104,49,54,84,111,56,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,105,109,103,45,62,85,97,84,111,65,97,61,61,78,85,76,76,0,0,0,0,0,0,0,66,117,105,108,100,77,97,112,85,97,84,111,65,97,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,105,110,32,37,115,0,0,103,116,83,116,114,105,112,83,101,112,97,114,97,116,101,0,78,111,32,115,112,97,99,101,32,102,111,114,32,116,105,108,101,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,103,116,84,105,108,101,83,101,112,97,114,97,116,101,0,0,105,110,105,116,67,73,69,76,97,98,67,111,110,118,101,114,115,105,111,110,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,67,73,69,32,76,42,97,42,98,42,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,46,0,0,139,108,79,64,134,201,196,191,128,72,255,190,126,29,120,191,197,32,240,63,195,100,42,61,211,188,99,61,96,229,80,190,199,75,135,63,0,0,200,66,0,0,200,66,0,0,200,66,255,0,0,0,255,0,0,0,255,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,154,153,25,64,154,153,25,64,154,153,25,64,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,67,73,69,32,76,42,97,42,98,42,45,62,82,71,66,32,99,111,110,118,101,114,115,105,111,110,32,115,116,97,116,101,46,0,0,65,115,115,117,109,105,110,103,32,56,45,98,105,116,32,99,111,108,111,114,109,97,112,0,78,111,32,115,112,97,99,101,32,102,111,114,32,80,97,108,101,116,116,101,32,109,97,112,112,105,110,103,32,116,97,98,108,101,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,112,104,111,116,111,109,101,116,114,105,99,32,99,111,110,118,101,114,115,105,111,110,32,116,97,98,108,101,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,66,38,87,32,109,97,112,112,105,110,103,32,116,97,98,108,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,115,116,114,105,112,32,98,117,102,102,101,114,0,0,0,0,0,0,0,34,37,115,34,58,32,66,97,100,32,109,111,100,101,0,0,116,105,102,95,111,112,101,110,46,99,0,0,0,0,0,0,84,73,70,70,67,108,105,101,110,116,79,112,101,110,0,0,37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,84,73,70,70,32,115,116,114,117,99,116,117,114,101,41,0,0,0,0,0,0,79,110,101,32,111,102,32,116,104,101,32,99,108,105,101,110,116,32,112,114,111,99,101,100,117,114,101,115,32,105,115,32,78,85,76,76,32,112,111,105,110,116,101,114,46,0,0,0,67,97,110,110,111,116,32,114,101,97,100,32,84,73,70,70,32,104,101,97,100,101,114,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,111,114,32,77,68,73,32,102,105,108,101,44,32,98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,32,37,100,32,40,48,120,37,120,41,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,37,100,32,40,48,120,37,120,41,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,66,105,103,84,73,70,70,32,111,102,102,115,101,116,115,105,122,101,32,37,100,32,40,48,120,37,120,41,0,0,0,0,0,0,0,78,111,116,32,97,32,84,73,70,70,32,102,105,108,101,44,32,98,97,100,32,66,105,103,84,73,70,70,32,117,110,117,115,101,100,32,37,100,32,40,48,120,37,120,41,0,0,0,40,116,111,102,102,95,116,41,116,105,102,45,62,116,105,102,95,115,105,122,101,61,61,110,0,0,0,0,0,0,0,0,84,73,70,70,82,101,97,100,69,110,99,111,100,101,100,83,116,114,105,112,0,0,0,0,37,108,117,58,32,83,116,114,105,112,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,70,105,108,108,83,116,114,105,112,0,0,0,73,110,118,97,108,105,100,32,115,116,114,105,112,32,98,121,116,101,32,99,111,117,110,116,32,37,108,108,117,44,32,115,116,114,105,112,32,37,108,117,0,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,111,110,32,115,116,114,105,112,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,68,97,116,97,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,32,116,111,32,104,111,108,100,32,115,116,114,105,112,32,37,108,117,0,84,73,70,70,82,101,97,100,69,110,99,111,100,101,100,84,105,108,101,0,0,0,0,0,37,108,117,58,32,84,105,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,84,73,70,70,70,105,108,108,84,105,108,101,0,0,0,0,37,108,108,117,58,32,73,110,118,97,108,105,100,32,116,105,108,101,32,98,121,116,101,32,99,111,117,110,116,44,32,116,105,108,101,32,37,108,117,0,68,97,116,97,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,32,116,111,32,104,111,108,100,32,116,105,108,101,32,37,108,117,0,0,40,116,105,102,45,62,116,105,102,95,102,108,97,103,115,38,84,73,70,70,95,78,79,82,69,65,68,82,65,87,41,61,61,48,0,0,0,0,0,0,116,105,102,95,114,101,97,100,46,99,0,0,0,0,0,0,84,73,70,70,82,101,97,100,66,117,102,102,101,114,83,101,116,117,112,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,100,97,116,97,32,98,117,102,102,101,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,0,0,40,99,99,32,38,32,49,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,49,54,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,37,32,51,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,50,52,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,38,32,51,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,51,50,66,105,116,68,97,116,97,0,0,0,0,0,0,40,99,99,32,38,32,55,41,32,61,61,32,48,0,0,0,95,84,73,70,70,83,119,97,98,54,52,66,105,116,68,97,116,97,0,0,0,0,0,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,116,105,108,101,115,32,102,114,111,109,32,97,32,115,116,114,105,112,112,101,100,32,105,109,97,103,101,0,0,0,0,0,0,0,0,67,97,110,32,110,111,116,32,114,101,97,100,32,115,99,97,110,108,105,110,101,115,32,102,114,111,109,32,97,32,116,105,108,101,100,32,105,109,97,103,101,0,0,0,0,0,0,0,84,73,70,70,82,101,97,100,82,97,119,84,105,108,101,49,0,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,44,32,116,105,108,101,32,37,108,117,0,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,114,111,119,32,37,108,117,44,32,99,111,108,32,37,108,117,44,32,116,105,108,101,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,84,73,70,70,82,101,97,100,82,97,119,83,116,114,105,112,49,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,115,116,114,105,112,32,37,108,117,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,115,116,114,105,112,32,37,108,117,59,32,103,111,116,32,37,108,108,117,32,98,121,116,101,115,44,32,101,120,112,101,99,116,101,100,32,37,108,108,117,0,0,0,0,84,73,70,70,67,111,109,112,117,116,101,83,116,114,105,112,0,0,0,0,0,0,0,0,37,108,117,58,32,83,97,109,112,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,84,73,70,70,78,117,109,98,101,114,79,102,83,116,114,105,112,115,0,0,0,0,0,0,84,73,70,70,86,83,116,114,105,112,83,105,122,101,54,52,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,100,95,115,97,109,112,108,101,115,112,101,114,112,105,120,101,108,32,118,97,108,117,101,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,32,40,37,100,120,37,100,41,0,0,0,0,0,0,0,84,73,70,70,86,83,116,114,105,112,83,105,122,101,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,83,116,114,105,112,83,105,122,101,0,0,0,84,73,70,70,83,99,97,110,108,105,110,101,83,105,122,101,54,52,0,0,0,0,0,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,0,0,0,0,0,0,0,84,73,70,70,83,99,97,110,108,105,110,101,83,105,122,101,0,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,97,114,105,116,104,109,101,116,105,99,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,37,108,117,58,32,67,111,108,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,37,108,117,58,32,82,111,119,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,37,108,117,58,32,68,101,112,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,0,37,108,117,58,32,83,97,109,112,108,101,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,109,97,120,32,37,108,117,0,0,0,0,0,0,0,84,73,70,70,78,117,109,98,101,114,79,102,84,105,108,101,115,0,0,0,0,0,0,0,84,73,70,70,84,105,108,101,82,111,119,83,105,122,101,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,84,73,70,70,86,84,105,108,101,83,105,122,101,54,52,0,73,110,118,97,108,105,100,32,89,67,98,67,114,32,115,117,98,115,97,109,112,108,105,110,103,32,40,37,100,120,37,100,41,0,0,0,0,0,0,0,84,73,70,70,84,105,108,101,83,105,122,101,0,0,0,0,84,73,70,70,79,112,101,110,0,0,0,0,0,0,0,0,37,115,58,32,37,115,0,0,37,115,58,32,67,97,110,110,111,116,32,111,112,101,110,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,46,10,0,0,0,0,0,0,87,97,114,110,105,110,103,44,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,100,45,62,116,100,95,110,115,116,114,105,112,115,32,62,32,48,0,0,0,0,0,0,116,105,102,95,119,114,105,116,101,46,99,0,0,0,0,0,84,73,70,70,65,112,112,101,110,100,84,111,83,116,114,105,112,0,0,0,0,0,0,0,83,101,101,107,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,77,97,120,105,109,117,109,32,84,73,70,70,32,102,105,108,101,32,115,105,122,101,32,101,120,99,101,101,100,101,100,0,87,114,105,116,101,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,73,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,105,110,32,37,115,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,37,115,32,40,37,108,100,32,101,108,101,109,101,110,116,115,32,111,102,32,37,108,100,32,98,121,116,101,115,32,101,97,99,104,41,0,0,0,0,0,0,0,135,22,153,62,162,69,22,63,213,120,233,61,0,0,0,0,0,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,34,84,114,97,110,115,102,101,114,70,117,110,99,116,105,111,110,34,32,116,97,103,0,0,0,0,0,115,99,97,110,108,105,110,101,0,0,0,0,0,0,0,0,115,116,114,105,112,0,0,0,116,105,108,101,0,0,0,0,67,111,109,112,114,101,115,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([105,111,110,32,97,108,103,111,114,105,116,104,109,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,114,97,110,100,111,109,32,97,99,99,101,115,115,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,37,115,32,100,101,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,115,99,104,101,109,101,32,37,117,32,37,115,32,100,101,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,37,115,32,37,115,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,0,0,0,67,111,109,112,114,101,115,115,105,111,110,32,115,99,104,101,109,101,32,37,117,32,37,115,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,84,73,70,70,82,101,119,114,105,116,101,68,105,114,101,99,116,111,114,121,0,0,0,0,69,114,114,111,114,32,117,112,100,97,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,69,114,114,111,114,32,102,101,116,99,104,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,0,83,97,110,105,116,121,32,99,104,101,99,107,32,111,110,32,116,97,103,32,99,111,117,110,116,32,102,97,105,108,101,100,44,32,108,105,107,101,108,121,32,99,111,114,114,117,112,116,32,84,73,70,70,0,0,0,84,73,70,70,82,101,115,101,116,70,105,101,108,100,0,0,77,101,109,111,114,121,32,109,97,112,112,101,100,32,102,105,108,101,115,32,110,111,116,32,99,117,114,114,101,110,116,108,121,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,111,112,101,114,97,116,105,111,110,46,0,65,116,116,101,109,112,116,32,116,111,32,114,101,115,101,116,32,102,105,101,108,100,32,111,110,32,100,105,114,101,99,116,111,114,121,32,110,111,116,32,97,108,114,101,97,100,121,32,111,110,32,100,105,115,107,46,0,0,0,0,0,0,0,0,37,115,58,32,83,101,101,107,32,101,114,114,111,114,32,97,99,99,101,115,115,105,110,103,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,99,111,117,110,116,0,0,0,37,115,58,32,67,97,110,32,110,111,116,32,114,101,97,100,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,101,110,116,114,121,46,0,0,37,115,58,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,116,97,103,32,37,100,46,0,0,0,0,0,0,102,111,114,32,102,105,101,108,100,32,98,117,102,102,101,114,46,0,0,0,0,0,0,0,86,97,108,117,101,32,101,120,99,101,101,100,115,32,51,50,98,105,116,32,114,97,110,103,101,32,111,102,32,111,117,116,112,117,116,32,116,121,112,101,46,0,0,0,0,0,0,0,37,115,58,32,67,97,110,32,110,111,116,32,119,114,105,116,101,32,84,73,70,70,32,100,105,114,101,99,116,111,114,121,32,101,110,116,114,121,46,0,69,114,114,111,114,32,112,111,115,116,45,101,110,99,111,100,105,110,103,32,98,101,102,111,114,101,32,100,105,114,101,99,116,111,114,121,32,119,114,105,116,101,0,0,0,0,0,0,69,114,114,111,114,32,102,108,117,115,104,105,110,103,32,100,97,116,97,32,98,101,102,111,114,101,32,100,105,114,101,99,116,111,114,121,32,119,114,105,116,101,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,65,83,67,73,73,0,0,0,0,0,0,0,116,105,102,95,100,105,114,119,114,105,116,101,46,99,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,83,101,99,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,48,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,83,72,79,82,84,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,49,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,76,79,78,71,0,0,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,116,121,112,101,61,61,84,73,70,70,95,85,78,68,69,70,73,78,69,68,0,0,0,111,45,62,102,105,101,108,100,95,114,101,97,100,99,111,117,110,116,61,61,84,73,70,70,95,86,65,82,73,65,66,76,69,50,0,0,0,0,0,0,111,45,62,102,105,101,108,100,95,112,97,115,115,99,111,117,110,116,61,61,49,0,0,0,48,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,77,97,120,105,109,117,109,32,84,73,70,70,32,102,105,108,101,32,115,105,122,101,32,101,120,99,101,101,100,101,100,0,110,97,60,110,100,105,114,0,73,79,32,101,114,114,111,114,32,119,114,105,116,105,110,103,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,84,73,70,70,76,105,110,107,68,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,83,117,98,73,70,68,32,100,105,114,101,99,116,111,114,121,32,108,105,110,107,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,84,73,70,70,32,104,101,97,100,101,114,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,73,102,100,73,102,100,56,65,114,114,97,121,0,0,0,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,118,97,108,117,101,32,108,97,114,103,101,114,32,116,104,97,110,32,48,120,70,70,70,70,70,70,70,70,32,105,110,32,67,108,97,115,115,105,99,32,84,73,70,70,32,102,105,108,101,46,0,0,0,0,0,99,111,117,110,116,60,48,120,52,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,73,102,100,65,114,114,97,121,0,0,0,0,100,105,114,91,109,93,46,116,100,105,114,95,116,97,103,33,61,116,97,103,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,68,97,116,97,0,0,0,0,0,0,0,73,79,32,101,114,114,111,114,32,119,114,105,116,105,110,103,32,116,97,103,32,100,97,116,97,0,0,0,0,0,0,0,100,97,116,97,108,101,110,103,116,104,60,48,120,56,48,48,48,48,48,48,48,85,76,0,99,111,117,110,116,60,48,120,50,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,73,102,100,56,65,114,114,97,121,0,0,0,116,105,102,45,62,116,105,102,95,102,108,97,103,115,38,84,73,70,70,95,66,73,71,84,73,70,70,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,68,111,117,98,108,101,65,114,114,97,121,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,70,108,111,97,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,114,97,116,105,111,110,97,108,65,114,114,97,121,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,108,111,110,103,56,65,114,114,97,121,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,76,111,110,103,56,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,108,111,110,103,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,76,111,110,103,65,114,114,97,121,0,0,0,99,111,117,110,116,60,48,120,56,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,115,104,111,114,116,65,114,114,97,121,0,112,97,32,33,61,32,48,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,117,98,105,102,100,0,0,0,0,0,42,112,97,32,60,61,32,48,120,70,70,70,70,70,70,70,70,85,76,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,84,114,97,110,115,102,101,114,102,117,110,99,116,105,111,110,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,83,104,111,114,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,82,97,116,105,111,110,97,108,65,114,114,97,121,0,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,97,109,112,108,101,102,111,114,109,97,116,65,114,114,97,121,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,111,108,111,114,109,97,112,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,76,111,110,103,76,111,110,103,56,65,114,114,97,121,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,83,104,111,114,116,80,101,114,83,97,109,112,108,101,0,0,0,0,0,118,97,108,117,101,62,61,48,46,48,0,0,0,0,0,0,84,73,70,70,87,114,105,116,101,68,105,114,101,99,116,111,114,121,84,97,103,67,104,101,99,107,101,100,82,97,116,105,111,110,97,108,0,0,0,0,78,111,110,101,0,0,0,0,76,90,87,0,0,0,0,0,80,97,99,107,66,105,116,115,0,0,0,0,0,0,0,0,84,104,117,110,100,101,114,83,99,97,110,0,0,0,0,0,78,101,88,84,0,0,0,0,74,80,69,71,0,0,0,0,79,108,100,45,115,116,121,108,101,32,74,80,69,71,0,0,67,67,73,84,84,32,82,76,69,0,0,0,0,0,0,0,67,67,73,84,84,32,82,76,69,47,87,0,0,0,0,0,67,67,73,84,84,32,71,114,111,117,112,32,51,0,0,0,67,67,73,84,84,32,71,114,111,117,112,32,52,0,0,0,73,83,79,32,74,66,73,71,0,0,0,0,0,0,0,0,68,101,102,108,97,116,101,0,65,100,111,98,101,68,101,102,108,97,116,101,0,0,0,0,80,105,120,97,114,76,111,103,0,0,0,0,0,0,0,0,83,71,73,76,111,103,0,0,83,71,73,76,111,103,50,52,0,0,0,0,0,0,0,0,76,90,77,65,0,0,0,0,56,90,0,0,1,0,0,0,1,0,0,0,64,90,0,0,5,0,0,0,2,0,0,0,72,90,0,0,5,128,0,0,3,0,0,0,88,90,0,0,41,128,0,0,4,0,0,0,104,90,0,0,254,127,0,0,5,0,0,0,112,90,0,0,7,0,0,0,6,0,0,0,120,90,0,0,6,0,0,0,6,0,0,0,136,90,0,0,2,0,0,0,7,0,0,0,152,90,0,0,3,128,0,0,8,0,0,0,168,90,0,0,3,0,0,0,9,0,0,0,184,90,0,0,4,0,0,0,10,0,0,0,200,90,0,0,101,135,0,0,6,0,0,0,216,90,0,0,178,128,0,0,11,0,0,0,224,90,0,0,8,0,0,0,11,0,0,0,240,90,0,0,141,128,0,0,12,0,0,0,0,91,0,0,116,135,0,0,13,0,0,0,8,91,0,0,117,135,0,0,13,0,0,0,24,91,0,0,109,136,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,115,32,99,111,109,112,114,101,115,115,105,111,110,32,115,117,112,112,111,114,116,32,105,115,32,110,111,116,32,99,111,110,102,105,103,117,114,101,100,0,0,0,0,0,0,0,0,110,32,62,32,48,0,0,0,116,105,102,95,100,117,109,112,109,111,100,101,46,99,0,0,68,117,109,112,77,111,100,101,69,110,99,111,100,101,0,0,68,117,109,112,77,111,100,101,68,101,99,111,100,101,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,101,120,112,101,99,116,101,100,32,97,32,114,101,113,117,101,115,116,32,102,111,114,32,97,116,32,109,111,115,116,32,37,108,108,100,32,98,121,116,101,115,44,32,103,111,116,32,97,32,114,101,113,117,101,115,116,32,102,111,114,32,37,108,108,100,32,98,121,116,101,115,0,0,0,0,0,0,0,8,0,53,0,0,0,6,0,7,0,1,0,4,0,7,0,2,0,4,0,8,0,3,0,4,0,11,0,4,0,4,0,12,0,5,0,4,0,14,0,6,0,4,0,15,0,7,0,5,0,19,0,8,0,5,0,20,0,9,0,5,0,7,0,10,0,5,0,8,0,11,0,6,0,8,0,12,0,6,0,3,0,13,0,6,0,52,0,14,0,6,0,53,0,15,0,6,0,42,0,16,0,6,0,43,0,17,0,7,0,39,0,18,0,7,0,12,0,19,0,7,0,8,0,20,0,7,0,23,0,21,0,7,0,3,0,22,0,7,0,4,0,23,0,7,0,40,0,24,0,7,0,43,0,25,0,7,0,19,0,26,0,7,0,36,0,27,0,7,0,24,0,28,0,8,0,2,0,29,0,8,0,3,0,30,0,8,0,26,0,31,0,8,0,27,0,32,0,8,0,18,0,33,0,8,0,19,0,34,0,8,0,20,0,35,0,8,0,21,0,36,0,8,0,22,0,37,0,8,0,23,0,38,0,8,0,40,0,39,0,8,0,41,0,40,0,8,0,42,0,41,0,8,0,43,0,42,0,8,0,44,0,43,0,8,0,45,0,44,0,8,0,4,0,45,0,8,0,5,0,46,0,8,0,10,0,47,0,8,0,11,0,48,0,8,0,82,0,49,0,8,0,83,0,50,0,8,0,84,0,51,0,8,0,85,0,52,0,8,0,36,0,53,0,8,0,37,0,54,0,8,0,88,0,55,0,8,0,89,0,56,0,8,0,90,0,57,0,8,0,91,0,58,0,8,0,74,0,59,0,8,0,75,0,60,0,8,0,50,0,61,0,8,0,51,0,62,0,8,0,52,0,63,0,5,0,27,0,64,0,5,0,18,0,128,0,6,0,23,0,192,0,7,0,55,0,0,1,8,0,54,0,64,1,8,0,55,0,128,1,8,0,100,0,192,1,8,0,101,0,0,2,8,0,104,0,64,2,8,0,103,0,128,2,9,0,204,0,192,2,9,0,205,0,0,3,9,0,210,0,64,3,9,0,211,0,128,3,9,0,212,0,192,3,9,0,213,0,0,4,9,0,214,0,64,4,9,0,215,0,128,4,9,0,216,0,192,4,9,0,217,0,0,5,9,0,218,0,64,5,9,0,219,0,128,5,9,0,152,0,192,5,9,0,153,0,0,6,9,0,154,0,64,6,6,0,24,0,128,6,9,0,155,0,192,6,11,0,8,0,0,7,11,0,12,0,64,7,11,0,13,0,128,7,12,0,18,0,192,7,12,0,19,0,0,8,12,0,20,0,64,8,12,0,21,0,128,8,12,0,22,0,192,8,12,0,23,0,0,9,12,0,28,0,64,9,12,0,29,0,128,9,12,0,30,0,192,9,12,0,31,0,0,10,12,0,1,0,255,255,9,0,1,0,254,255,10,0,1,0,254,255,11,0,1,0,254,255,12,0,0,0,254,255,0,0,10,0,55,0,0,0,3,0,2,0,1,0,2,0,3,0,2,0,2,0,2,0,3,0,3,0,3,0,4,0,4,0,3,0,5,0,4,0,2,0,6,0,5,0,3,0,7,0,6,0,5,0,8,0,6,0,4,0,9,0,7,0,4,0,10,0,7,0,5,0,11,0,7,0,7,0,12,0,8,0,4,0,13,0,8,0,7,0,14,0,9,0,24,0,15,0,10,0,23,0,16,0,10,0,24,0,17,0,10,0,8,0,18,0,11,0,103,0,19,0,11,0,104,0,20,0,11,0,108,0,21,0,11,0,55,0,22,0,11,0,40,0,23,0,11,0,23,0,24,0,11,0,24,0,25,0,12,0,202,0,26,0,12,0,203,0,27,0,12,0,204,0,28,0,12,0,205,0,29,0,12,0,104,0,30,0,12,0,105,0,31,0,12,0,106,0,32,0,12,0,107,0,33,0,12,0,210,0,34,0,12,0,211,0,35,0,12,0,212,0,36,0,12,0,213,0,37,0,12,0,214,0,38,0,12,0,215,0,39,0,12,0,108,0,40,0,12,0,109,0,41,0,12,0,218,0,42,0,12,0,219,0,43,0,12,0,84,0,44,0,12,0,85,0,45,0,12,0,86,0,46,0,12,0,87,0,47,0,12,0,100,0,48,0,12,0,101,0,49,0,12,0,82,0,50,0,12,0,83,0,51,0,12,0,36,0,52,0,12,0,55,0,53,0,12,0,56,0,54,0,12,0,39,0,55,0,12,0,40,0,56,0,12,0,88,0,57,0,12,0,89,0,58,0,12,0,43,0,59,0,12,0,44,0,60,0,12,0,90,0,61,0,12,0,102,0,62,0,12,0,103,0,63,0,10,0,15,0,64,0,12,0,200,0,128,0,12,0,201,0,192,0,12,0,91,0,0,1,12,0,51,0,64,1,12,0,52,0,128,1,12,0,53,0,192,1,13,0,108,0,0,2,13,0,109,0,64,2,13,0,74,0,128,2,13,0,75,0,192,2,13,0,76,0,0,3,13,0,77,0,64,3,13,0,114,0,128,3,13,0,115,0,192,3,13,0,116,0,0,4,13,0,117,0,64,4,13,0,118,0,128,4,13,0,119,0,192,4,13,0,82,0,0,5,13,0,83,0,64,5,13,0,84,0,128,5,13,0,85,0,192,5,13,0,90,0,0,6,13,0,91,0,64,6,13,0,100,0,128,6,13,0,101,0,192,6,11,0,8,0,0,7,11,0,12,0,64,7,11,0,13,0,128,7,12,0,18,0,192,7,12,0,19,0,0,8,12,0,20,0,64,8,12,0,21,0,128,8,12,0,22,0,192,8,12,0,23,0,0,9,12,0,28,0,64,9,12,0,29,0,128,9,12,0,30,0,192,9,12,0,31,0,0,10,12,0,1,0,255,255,9,0,1,0,254,255,10,0,1,0,254,255,11,0,1,0,254,255,12,0,0,0,254,255,0,0,0,128,192,224,240,248,252,254,255,0,0,0,0,0,0,0,120,32,61,61,32,108,97,115,116,120,0,0,0,0,0,0,116,105,102,95,102,97,120,51,46,99,0,0,0,0,0,0,95,84,73,70,70,70,97,120,51,102,105,108,108,114,117,110,115,0,0,0,0,0,0,0,36,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,73,0,0,0,104,103,0,0,0,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,67,67,73,84,84,70,97,120,51,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,67,67,73,84,84,32,70,97,120,32,51,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,37,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,73,0,0,0,88,103,0,0,0,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,67,67,73,84,84,70,97,120,52,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,67,67,73,84,84,32,70,97,120,32,52,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,70,97,120,51,68,101,99,111,100,101,82,76,69,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,37,115,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,103,111,116,32,37,117,44,32,101,120,112,101,99,116,101,100,32,37,117,41,0,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,76,0,0,0,76,105,110,101,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,0,0,0,0,116,105,108,101,0,0,0,0,115,116,114,105,112,0,0,0,80,114,101,109,97,116,117,114,101,32,69,79,70,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,0,0,0,0,66,97,100,32,99,111,100,101,32,119,111,114,100,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,0,0,0,0,108,101,110,103,116,104,32,60,32,57,0,0,0,0,0,0,70,97,120,51,80,117,116,66,105,116,115,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,0,0,0,0,70,97,120,52,69,110,99,111,100,101,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,116,101,110,0,0,7,0,3,0,0,0,6,0,3,0,0,0,3,0,3,0,0,0,1,0,1,0,0,0,3,0,2,0,0,0,6,0,2,0,0,0,7,0,2,0,0,0,0,0,0,0,0,0,112,117,116,115,112,97,110,0,116,101,45,62,114,117,110,108,101,110,32,61,61,32,54,52,42,40,115,112,97,110,62,62,54,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,7,8,8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,97,120,52,68,101,99,111,100,101,0,0,0,0,0,0,85,110,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,41,32,97,116,32,108,105,110,101,32,37,117,32,111,102,32,37,115,32,37,117,32,40,120,32,37,117,41,0,0,0,0,71,114,111,117,112,52,79,112,116,105,111,110,115,0,0,0,71,114,111,117,112,51,79,112,116,105,111,110,115,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,88,107,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,96,107,0,0,0,0,0,0,70,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,66,0,1,0,112,107,0,0,0,0,0,0,71,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,67,0,1,0,128,107,0,0,0,0,0,0,72,1,0,0,1,0,1,0,4,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,68,0,1,0,144,107,0,0,0,0,0,0,0,0,0,0,73,110,105,116,67,67,73,84,84,70,97,120,51,0,0,0,77,101,114,103,105,110,103,32,99,111,109,109,111,110,32,67,67,73,84,84,32,70,97,120,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,0,0,0,0,115,112,32,33,61,32,48,0,70,97,120,51,67,108,101,97,110,117,112,0,0,0,0,0,70,97,120,51,69,110,99,111,100,101,0,0,0,0,0,0,116,112,97,114,109,32,60,32,57,0,0,0,0,0,0,0,70,97,120,51,80,117,116,69,79,76,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,70,97,120,51,80,114,101,69,110,99,111,100,101,0,0,0,70,97,120,51,68,101,99,111,100,101,49,68,0,0,0,0,70,97,120,51,80,114,101,68,101,99,111,100,101,0,0,0,70,97,120,51,83,101,116,117,112,83,116,97,116,101,0,0,66,105,116,115,47,115,97,109,112,108,101,32,109,117,115,116,32,98,101,32,49,32,102,111,114,32,71,114,111,117,112,32,51,47,52,32,101,110,99,111,100,105,110,103,47,100,101,99,111,100,105,110,103,0,0,0,82,111,119,32,112,105,120,101,108,115,32,105,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,32,40,114,111,119,112,105,120,101,108,115,32,37,117,41,0,0,0,0,0,0,102,111,114,32,71,114,111,117,112,32,51,47,52,32,114,117,110,32,97,114,114,97,121,115,0,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,71,114,111,117,112,32,51,47,52,32,114,101,102,101,114,101,110,99,101,32,108,105,110,101,0,0,0,70,97,120,51,68,101,99,111,100,101,50,68,0,0,0,0,70,97,120,51,80,114,105,110,116,68,105,114,0,0,0,0,32,0,0,0,0,0,0,0,32,32,71,114,111,117,112,32,52,32,79,112,116,105,111,110,115,58,0,0,0,0,0,0,37,115,117,110,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,0,0,32,32,71,114,111,117,112,32,51,32,79,112,116,105,111,110,115,58,0,0,0,0,0,0,37,115,50,45,100,32,101,110,99,111,100,105,110,103,0,0,43,0,0,0,0,0,0,0,37,115,69,79,76,32,112,97,100,100,105,110,103,0,0,0,32,40,37,108,117,32,61,32,48,120,37,108,120,41,10,0,32,32,70,97,120,32,68,97,116,97,58,0,0,0,0,0,32,99,108,101,97,110,0,0,32,114,101,99,101,105,118,101,114,32,114,101,103,101,110,101,114,97,116,101,100,0,0,0,32,117,110,99,111,114,114,101,99,116,101,100,32,101,114,114,111,114,115,0,0,0,0,0,32,40,37,117,32,61,32,48,120,37,120,41,10,0,0,0,32,32,66,97,100,32,70,97,120,32,76,105,110,101,115,58,32,37,108,117,10,0,0,0,32,32,67,111,110,115,101,99,117,116,105,118,101,32,66,97,100,32,70,97,120,32,76,105,110,101,115,58,32,37,108,117,10,0,0,0,0,0,0,0,70,97,120,51,86,83,101,116,70,105,101,108,100,0,0,0,115,112,45,62,118,115,101,116,112,97,114,101,110,116,32,33,61,32,48,0,0,0,0,0,70,97,120,51,86,71,101,116,70,105,101,108,100,0,0,0,70,97,120,77,111,100,101,0,70,97,120,70,105,108,108,70,117,110,99,0,0,0,0,0,66,97,100,70,97,120,76,105,110,101,115,0,0,0,0,0,67,108,101,97,110,70,97,120,68,97,116,97,0,0,0,0,67,111,110,115,101,99,117,116,105,118,101,66,97,100,70,97,120,76,105,110,101,115,0,0,12,7,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,7,0,0,3,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,6,7,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,5,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,7,0,0,3,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,4,6,0,0,2,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,1,4,0,0,0,0,0,0,3,1,0,0,0,0,0,0,5,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,2,3,0,0,0,0,0,0,3,1,0,0,0,0,0,0,4,3,0,0,1,0,0,0,3,1,0,0,0,0,0,0,12,11,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,0,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,64,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,64,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,64,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,128,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,192,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,12,11,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,0,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,64,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,128,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,128,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,8,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,11,0,0,128,7,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,5,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,192,4,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,192,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,192,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,9,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,64,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,64,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,64,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,39,0,0,0,7,6,0,0,16,0,0,0,9,8,0,0,64,2,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,55,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,45,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,53,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,192,1,0,0,7,4,0,0,6,0,0,0,7,8,0,0,35,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,51,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,63,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,0,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,43,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,0,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,29,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,33,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,49,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,61,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,47,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,59,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,41,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,0,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,31,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,57,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,9,0,0,0,3,0,0,7,4,0,0,6,0,0,0,7,8,0,0,37,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,64,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,11,12,0,0,0,10,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,7,0,0,20,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,24,0,0,0,7,6,0,0,14,0,0,0,7,7,0,0,28,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,23,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,27,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,40,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,3,0,0,7,4,0,0,6,0,0,0,7,7,0,0,19,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,56,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,46,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,54,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,0,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,36,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,52,0,0,0,7,6,0,0,15,0,0,0,7,8,0,0,0,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,9,9,0,0,192,6,0,0,7,4,0,0,5,0,0,0,7,8,0,0,44,0,0,0,7,6,0,0,17,0,0,0,9,9,0,0,128,5,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,30,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,6,0,0,12,0,0,0,7,5,0,0,9,0,0,0,9,6,0,0,128,6,0,0,7,4,0,0,6,0,0,0,7,8,0,0,34,0,0,0,9,5,0,0,128,0,0,0,7,8,0,0,50,0,0,0,7,6,0,0,14,0,0,0,7,8,0,0,62,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,8,0,0,48,0,0,0,7,4,0,0,3,0,0,0,7,8,0,0,60,0,0,0,7,4,0,0,5,0,0,0,7,8,0,0,42,0,0,0,7,6,0,0,16,0,0,0,9,9,0,0,128,4,0,0,7,4,0,0,6,0,0,0,7,8,0,0,32,0,0,0,7,5,0,0,8,0,0,0,7,8,0,0,58,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,7,0,0,22,0,0,0,7,4,0,0,3,0,0,0,7,5,0,0,11,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,26,0,0,0,7,5,0,0,9,0,0,0,9,8,0,0,128,2,0,0,7,4,0,0,6,0,0,0,7,8,0,0,38,0,0,0,9,5,0,0,128,0,0,0,7,7,0,0,25,0,0,0,7,6,0,0,15,0,0,0,9,8,0,0,128,1,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,7,6,0,0,13,0,0,0,7,4,0,0,3,0,0,0,7,7,0,0,18,0,0,0,7,4,0,0,5,0,0,0,7,7,0,0,21,0,0,0,7,6,0,0,17,0,0,0,9,7,0,0,0,1,0,0,7,4,0,0,6,0,0,0,7,6,0,0,1,0,0,0,7,5,0,0,8,0,0,0,9,6,0,0,192,0,0,0,9,5,0,0,64,0,0,0,7,5,0,0,10,0,0,0,7,4,0,0,4,0,0,0,7,4,0,0,2,0,0,0,7,4,0,0,7,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,56,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,30,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,57,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,54,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,52,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,48,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,44,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,36,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,28,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,60,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,40,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,50,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,34,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,26,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,32,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,61,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,42,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,62,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,46,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,38,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,31,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,58,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,49,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,45,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,37,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,29,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,0,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,41,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,51,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,35,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,64,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,27,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,59,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,33,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,0,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,43,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,128,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,55,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,63,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,47,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,39,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,53,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81920);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,10,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,56,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,30,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,57,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,54,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,52,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,48,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,44,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,36,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,128,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,28,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,60,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,40,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,64,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92160);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,50,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,34,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,26,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,32,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,61,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,42,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,62,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,46,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,38,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,192,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,12,11,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,0,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,23,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,20,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,25,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102400);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,5,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,31,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,64,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,58,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,21,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,3,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,2,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,49,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,45,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,37,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,192,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,29,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,64,6,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,41,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,128,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,18,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,17,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,8,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,51,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,35,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,64,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,27,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,59,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,33,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,11,0,0,128,7,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,12,0,0,0,1,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,43,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,13,0,0,192,4,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112640);
/* memory initializer */ allocate([8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,9,0,0,15,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,55,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,63,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,9,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,47,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,39,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,12,0,0,53,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,13,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,19,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,24,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,11,0,0,22,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,11,12,0,0,0,10,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,10,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,16,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,10,0,0,0,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,10,10,0,0,64,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,9,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,11,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,8,0,0,14,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,6,0,0,8,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,7,0,0,12,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,6,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,8,5,0,0,7,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,1,0,0,0,8,2,0,0,2,0,0,0,8,4,0,0,5,0,0,0,8,2,0,0,3,0,0,0,8,3,0,0,4,0,0,0,8,2,0,0,2,0,0,0,95,155,125,62,4,0,0,0,52,161,121,62,6,0,4,0,3,124,119,62,7,0,10,0,62,149,115,62,9,0,17,0,88,145,113,62,10,0,26,0,132,185,109,62,12,0,36,0,27,213,105,62,14,0,48,0,112,176,103,62,15,0,62,0,57,181,99,62,17,0,77,0,41,179,97,62,18,0,94,0,240,220,91,62,21,0,112,0,179,209,89,62,22,0,133,0,63,199,87,62,23,0,155,0,59,229,81,62,26,0,178,0,144,219,79,62,27,0,204,0,226,6,76,62,29,0,231,0,181,55,72,62,31,0,4,1,152,52,70,62,32,0,35,1,97,111,66,62,34,0,67,1,104,175,62,62,36,0,101,1,104,175,62,62,36,0,137,1,102,249,58,62,38,0,173,1,144,76,55,62,40,0,211,1,92,173,51,62,42,0,251,1,8,33,48,62,44,0,37,2,8,33,48,62,44,0,81,2,160,168,44,62,46,0,125,2,160,168,44,62,46,0,171,2,52,128,39,62,49,0,217,2,12,115,34,62,52,0,10,3,12,115,34,62,52,0,62,3,12,115,34,62,52,0,114,3,174,129,29,62,55,0,166,3,174,129,29,62,55,0,221,3,226,172,24,62,58,0,20,4,226,172,24,62,58,0,78,4,2,44,18,62,62,0,136,4,2,44,18,62,62,0,198,4,2,44,18,62,62,0,4,5,167,150,13,62,65,0,66,5,167,150,13,62,65,0,131,5,167,150,13,62,65,0,196,5,134,86,7,62,69,0,5,6,134,86,7,62,69,0,74,6,159,59,1,62,73,0,143,6,159,59,1,62,73,0,216,6,159,59,1,62,73,0,33,7,80,138,246,61,77,0,106,7,80,138,246,61,77,0,183,7,80,138,246,61,77,0,4,8,80,138,246,61,77,0,81,8,159,88,231,61,82,0,158,8,159,88,231,61,82,0,240,8,159,88,231,61,82,0,66,9,191,14,220,61,86,0,148,9,191,14,220,61,86,0,234,9,191,14,220,61,86,0,64,10,191,14,220,61,86,0,150,10,161,128,205,61,91,0,236,10,161,128,205,61,91,0,71,11,161,128,205,61,91,0,162,11,108,209,194,61,95,0,253,11,108,209,194,61,95,0,92,12,108,209,194,61,95,0,187,12,108,209,194,61,95,0,26,13,12,202,180,61,100,0,121,13,12,202,180,61,100,0,221,13,12,202,180,61,100,0,65,14,12,202,180,61,100,0,165,14,136,245,166,61,105,0,9,15,136,245,166,61,105,0,114,15,136,245,166,61,105,0,219,15,136,245,166,61,105,0,68,16,185,80,153,61,110,0,173,16,185,80,153,61,110,0,27,17,185,80,153,61,110,0,137,17,185,80,153,61,110,0,247,17,161,219,139,61,115,0,101,18,161,219,139,61,115,0,216,18,161,219,139,61,115,0,75,19,161,219,139,61,115,0,190,19,144,50,130,61,119,0,49,20,144,50,130,61,119,0,168,20,144,50,130,61,119,0,31,21,144,50,130,61,119,0,150,21,120,94,106,61,124,0,13,22,120,94,106,61,124,0,137,22,120,94,106,61,124,0,5,23,120,94,106,61,124,0,129,23,166,213,80,61,129,0,253,23,166,213,80,61,129,0,126,24,166,213,80,61,129,0,255,24,166,213,80,61,129,0,128,25,166,213,80,61,129,0,1,26,18,190,55,61,134,0,130,26,18,190,55,61,134,0,8,27,18,190,55,61,134,0,142,27,18,190,55,61,134,0,20,28,199,45,38,61,138,0,154,28,199,45,38,61,138,0,36,29,199,45,38,61,138,0,174,29,199,45,38,61,138,0,56,30,52,216,20,61,142,0,194,30,52,216,20,61,142,0,80,31,52,216,20,61,142,0,222,31,52,216,20,61,142,0,108,32,47,164,3,61,146,0,250,32,47,164,3,61,146,0,140,33,47,164,3,61,146,0,30,34,47,164,3,61,146,0,176,34,27,241,228,60,150,0,66,35,27,241,228,60,150,0,216,35,27,241,228,60,150,0,110,36,75,120,194,60,154,0,4,37,75,120,194,60,154,0,158,37,75,120,194,60,154,0,56,38,75,120,194,60,154,0,210,38,218,198,159,60,158,0,108,39,218,198,159,60,158,0,10,40,218,198,159,60,158,0,168,40,65,17,139,60,161,0,70,41,65,17,139,60,161,0,231,41,65,17,139,60,161,0,136,42,65,17,139,60,161,0,41,43,207,19,79,60,165,0,202,43,207,19,79,60,165,0,111,44,207,19,79,60,165,0,20,45,75,177,35,60,168,0,185,45,75,177,35,60,168,0,97,46,75,177,35,60,168,0,9,47,216,183,19,60,170,0,177,47,216,183,19,60,170,0,91,48,216,183,19,60,170,0,5,49,250,183,203,59,173,0,175,49,250,183,203,59,173,0,92,50,188,4,167,59,175,0,9,51,188,4,167,59,175,0,184,51,188,4,167,59,175,0,103,52,18,23,128,59,177,0,22,53,18,23,128,59,177,0,199,53,175,90,25,59,177,0,120,54,197,144,28,59,170,0,41,55,34,252,139,58,164,0,211,55,122,169,216,58,157,0,119,56,14,245,59,58,150,0,20,57,218,140,211,58,143,0,170,57,201,142,141,57,136,0,57,58,97,193,253,57,129,0,193,58,138,146,144,58,123,0,66,59,155,202,162,58,115,0,189,59,170,182,155,58,109,0,48,60,136,131,132,58,103,0,157,60,47,220,57,58,97,0,4,61,137,207,157,57,89,0,101,61,193,85,30,59,82,0,190,61,187,14,85,59,76,0,16,62,216,186,84,59,69,0,92,62,58,177,135,59,62,0,161,62,69,101,195,59,55,0,223,62,116,209,16,60,47,0,22,63,64,222,43,60,40,0,69,63,0,55,139,60,31,0,109,63,133,208,193,60,21,0,140,63,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,83,71,73,76,79,71,50,52,32,124,124,32,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,83,71,73,76,79,71,0,0,116,105,102,95,108,117,118,46,99,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,83,71,73,76,111,103,0,0,24,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,168,249,1,0,0,0,0,0,25,0,1,0,0,0,0,0,3,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,184,249,1,0,0,0,0,0,77,101,114,103,105,110,103,32,83,71,73,76,111,103,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,0,0,37,115,58,32,78,111,32,115,112,97,99,101,32,102,111,114,32,76,111,103,76,117,118,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,0,76,111,103,76,117,118,86,83,101,116,70,105,101,108,100,0,85,110,107,110,111,119,110,32,100,97,116,97,32,102,111,114,109,97,116,32,37,100,32,102,111,114,32,76,111,103,76,117,118,32,99,111,109,112,114,101,115,115,105,111,110,0,0,0,85,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,32,37,100,32,102,111,114,32,76,111,103,76,117,118,32,99,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,0,115,112,32,33,61,32,48,0,76,111,103,76,117,118,67,108,101,97,110,117,112,0,0,0,99,99,37,114,111,119,108,101,110,32,61,61,32,48,0,0,76,111,103,76,117,118,69,110,99,111,100,101,84,105,108,101,0,0,0,0,0,0,0,0,76,111,103,76,117,118,69,110,99,111,100,101,83,116,114,105,112,0,0,0,0,0,0,0,76,111,103,76,117,118,83,101,116,117,112,69,110,99,111,100,101,0,0,0,0,0,0,0,73,110,97,112,112,114,111,112,114,105,97,116,101,32,112,104,111,116,111,109,101,116,114,105,99,32,105,110,116,101,114,112,114,101,116,97,116,105,111,110,32,37,100,32,102,111,114,32,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,59,32,37,115,0,0,109,117,115,116,32,98,101,32,101,105,116,104,101,114,32,76,111,103,76,85,86,32,111,114,32,76,111,103,76,0,0,0,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,115,117,112,112,111,114,116,101,100,32,111,110,108,121,32,102,111,114,32,37,115,44,32,111,114,32,114,97,119,32,100,97,116,97,0,0,0,89,44,32,76,0,0,0,0,88,89,90,44,32,76,117,118,0,0,0,0,0,0,0,0,115,32,61,61,32,48,0,0,76,111,103,76,49,54,69,110,99,111,100,101,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,115,112,45,62,116,98,117,102,108,101,110,32,62,61,32,110,112,105,120,101,108,115,0,0,76,111,103,76,49,54,73,110,105,116,83,116,97,116,101,0,116,100,45,62,116,100,95,112,104,111,116,111,109,101,116,114,105,99,32,61,61,32,80,72,79,84,79,77,69,84,82,73,67,95,76,79,71,76,0,0,78,111,32,115,117,112,112,111,114,116,32,102,111,114,32,99,111,110,118,101,114,116,105,110,103,32,117,115,101,114,32,100,97,116,97,32,102,111,114,109,97,116,32,116,111,32,76,111,103,76,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,83,71,73,76,111,103,32,116,114,97,110,115,108,97,116,105,111,110,32,98,117,102,102,101,114,0,0,76,111,103,76,117,118,69,110,99,111,100,101,51,50,0,0,76,111,103,76,117,118,69,110,99,111,100,101,50,52,0,0,76,111,103,76,117,118,73,110,105,116,83,116,97,116,101,0,116,100,45,62,116,100,95,112,104,111,116,111,109,101,116,114,105,99,32,61,61,32,80,72,79,84,79,77,69,84,82,73,67,95,76,79,71,76,85,86,0,0,0,0,0,0,0,0,83,71,73,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,99,97,110,110,111,116,32,104,97,110,100,108,101,32,110,111,110,45,99,111,110,116,105,103,117,111,117,115,32,100,97,116,97,0,0,0,0,78,111,32,115,117,112,112,111,114,116,32,102,111,114,32,99,111,110,118,101,114,116,105,110,103,32,117,115,101,114,32,100,97,116,97,32,102,111,114,109,97,116,32,116,111,32,76,111,103,76,117,118,0,0,0,0,76,111,103,76,117,118,68,101,99,111,100,101,84,105,108,101,0,0,0,0,0,0,0,0,76,111,103,76,117,118,68,101,99,111,100,101,83,116,114,105,112,0,0,0,0,0,0,0,76,111,103,76,117,118,83,101,116,117,112,68,101,99,111,100,101,0,0,0,0,0,0,0,76,111,103,76,49,54,68,101,99,111,100,101,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,114,111,119,32,37,108,117,32,40,115,104,111,114,116,32,37,108,108,117,32,112,105,120,101,108,115,41,0,0,76,111,103,76,117,118,68,101,99,111,100,101,51,50,0,0,76,111,103,76,117,118,68,101,99,111,100,101,50,52,0,0,83,71,73,76,111,103,68,97,116,97,70,109,116,0,0,0,83,71,73,76,111,103,69,110,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,76,90,87,0,0,0,0,0,0,0,116,105,102,95,108,122,119,46,99,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,76,90,87,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,116,105,102,45,62,116,105,102,95,100,97,116,97,32,33,61,32,48,0,0,0,0,0,0,76,90,87,67,108,101,97,110,117,112,0,0,0,0,0,0,115,112,45,62,101,110,99,95,104,97,115,104,116,97,98,32,33,61,32,78,85,76,76,0,76,90,87,69,110,99,111,100,101,0,0,0,0,0,0,0,110,98,105,116,115,32,60,61,32,66,73,84,83,95,77,65,88,0,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,76,90,87,80,114,101,69,110,99,111,100,101,0,0,0,0,76,90,87,83,101,116,117,112,69,110,99,111,100,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,104,97,115,104,32,116,97,98,108,101,0,0,0,0,0,76,90,87,68,101,99,111,100,101,0,0,0,0,0,0,0,115,112,45,62,100,101,99,95,99,111,100,101,116,97,98,32,33,61,32,78,85,76,76,0,76,90,87,68,101,99,111,100,101,58,32,83,116,114,105,112,32,37,100,32,110,111,116,32,116,101,114,109,105,110,97,116,101,100,32,119,105,116,104,32,69,79,73,32,99,111,100,101,0,0,0,0,0,0,0,0,76,90,87,68,101,99,111,100,101,58,32,67,111,114,114,117,112,116,101,100,32,76,90,87,32,116,97,98,108,101,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,67,111,114,114,117,112,116,101,100,32,76,90,87,32,116,97,98,108,101,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,0,0,0,87,114,111,110,103,32,108,101,110,103,116,104,32,111,102,32,100,101,99,111,100,101,100,32,115,116,114,105,110,103,58,32,100,97,116,97,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,100,32,40,115,104,111,114,116,32,37,108,108,117,32,98,121,116,101,115,41,0,0,0,0,0,0,0,66,111,103,117,115,32,101,110,99,111,100,105,110,103,44,32,108,111,111,112,32,105,110,32,116,104,101,32,99,111,100,101,32,116,97,98,108,101,59,32,115,99,97,110,108,105,110,101,32,37,100,0,0,0,0,0,76,90,87,80,114,101,68,101,99,111,100,101,0,0,0,0,79,108,100,45,115,116,121,108,101,32,76,90,87,32,99,111,100,101,115,44,32,99,111,110,118,101,114,116,32,102,105,108,101,0,0,0,0,0,0,0,76,90,87,68,101,99,111,100,101,67,111,109,112,97,116,0,76,90,87,83,101,116,117,112,68,101,99,111,100,101,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,76,90,87,32,99,111,100,101,32,116,97,98,108,101,0,0,0,0,0,78,101,88,84,68,101,99,111,100,101,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,100,0,0,0,0,0,0,0,0,80,97,99,107,66,105,116,115,68,101,99,111,100,101,0,0,68,105,115,99,97,114,100,105,110,103,32,37,108,117,32,98,121,116,101,115,32,116,111,32,97,118,111,105,100,32,98,117,102,102,101,114,32,111,118,101,114,114,117,110,0,0,0,0,84,101,114,109,105,110,97,116,105,110,103,32,80,97,99,107,66,105,116,115,68,101,99,111,100,101,32,100,117,101,32,116,111,32,108,97,99,107,32,111,102,32,100,97,116,97,46,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,102,111,114,32,115,99,97,110,108,105,110,101,32,37,108,117,0,0,0,0,0,0,0,0,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,80,73,88,65,82,76,79,71,0,0,116,105,102,95,112,105,120,97,114,108,111,103,46,99,0,0,84,73,70,70,73,110,105,116,80,105,120,97,114,76,111,103,0,0,0,0,0,0,0,0,13,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,24,3,2,0,0,0,0,0,22,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,24,3,2,0,0,0,0,0,77,101,114,103,105,110,103,32,80,105,120,97,114,76,111,103,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,80,105,120,97,114,76,111,103,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,105,120,97,114,76,111,103,86,83,101,116,70,105,101,108,100,0,0,0,0,0,0,0,90,76,105,98,32,101,114,114,111,114,58,32,37,115,0,0,115,112,32,33,61,32,48,0,80,105,120,97,114,76,111,103,67,108,101,97,110,117,112,0,80,105,120,97,114,76,111,103,69,110,99,111,100,101,0,0,37,100,32,98,105,116,32,105,110,112,117,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,80,105,120,97,114,76,111,103,0,0,90,76,105,98,32,99,97,110,110,111,116,32,100,101,97,108,32,119,105,116,104,32,98,117,102,102,101,114,115,32,116,104,105,115,32,115,105,122,101,0,69,110,99,111,100,101,114,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,80,105,120,97,114,76,111,103,80,111,115,116,69,110,99,111,100,101,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,80,105,120,97,114,76,111,103,80,114,101,69,110,99,111,100,101,0,0,0,0,0,0,0,80,105,120,97,114,76,111,103,83,101,116,117,112,69,110,99,111,100,101,0,0,0,0,0,80,105,120,97,114,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,99,97,110,39,116,32,104,97,110,100,108,101,32,37,100,32,98,105,116,32,108,105,110,101,97,114,32,101,110,99,111,100,105,110,103,115,0,0,0,0,0,0,0,49,46,50,46,53,0,0,0,37,115,0,0,0,0,0,0,80,105,120,97,114,76,111,103,68,101,99,111,100,101,0,0,68,101,99,111,100,105,110,103,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,37,115,0,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,32,40,115,104,111,114,116,32,37,108,117,32,98,121,116,101,115,41,0,0,0,0,0,0,0,115,116,114,105,100,101,32,37,108,117,32,105,115,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,115,97,109,112,108,101,32,99,111,117,110,116,44,32,37,108,117,44,32,100,97,116,97,32,116,114,117,110,99,97,116,101,100,46,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,98,105,116,115,47,115,97,109,112,108,101,58,32,37,100,0,0,0,0,0,80,105,120,97,114,76,111,103,80,114,101,68,101,99,111,100,101,0,0,0,0,0,0,0,80,105,120,97,114,76,111,103,83,101,116,117,112,68,101,99,111,100,101,0,0,0,0,0,80,105,120,97,114,76,111,103,32,99,111,109,112,114,101,115,115,105,111,110,32,99,97,110,39,116,32,104,97,110,100,108,101,32,98,105,116,115,32,100,101,112,116,104,47,100,97,116,97,32,102,111,114,109,97,116,32,99,111,109,98,105,110,97,116,105,111,110,32,40,100,101,112,116,104,58,32,37,100,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,112,32,33,61,32,48,0,116,105,102,95,112,114,101,100,105,99,116,46,99,0,0,0,84,73,70,70,80,114,101,100,105,99,116,111,114,73,110,105,116,0,0,0,0,0,0,0,61,1,0,0,1,0,1,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,66,0,0,0,152,7,2,0,0,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,80,114,101,100,105,99,116,111,114,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,84,73,70,70,80,114,101,100,105,99,116,111,114,67,108,101,97,110,117,112,0,0,0,0,40,99,99,37,40,98,112,115,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,102,112,68,105,102,102,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,69,110,99,111,100,101,84,105,108,101,0,0,0,0,0,115,112,45,62,101,110,99,111,100,101,112,102,117,110,99,32,33,61,32,78,85,76,76,0,115,112,45,62,101,110,99,111,100,101,116,105,108,101,32,33,61,32,78,85,76,76,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,110,103,32,37,108,100,32,98,121,116,101,32,116,101,109,112,32,98,117,102,102,101,114,46,0,0,114,111,119,115,105,122,101,32,62,32,48,0,0,0,0,0,40,99,99,48,37,114,111,119,115,105,122,101,41,61,61,48,0,0,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,69,110,99,111,100,101,82,111,119,0,0,0,0,0,0,115,112,45,62,101,110,99,111,100,101,114,111,119,32,33,61,32,78,85,76,76,0,0,0,40,99,99,37,40,52,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,0,0,104,111,114,68,105,102,102,51,50,0,0,0,0,0,0,0,40,99,99,37,40,50,42,115,116,114,105,100,101,41,41,61,61,48,0,0,0,0,0,0,104,111,114,68,105,102,102,49,54,0,0,0,0,0,0,0,40,99,99,37,115,116,114,105,100,101,41,61,61,48,0,0,104,111,114,68,105,102,102,56,0,0,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,83,101,116,117,112,0,0,72,111,114,105,122,111,110,116,97,108,32,100,105,102,102,101,114,101,110,99,105,110,103,32,34,80,114,101,100,105,99,116,111,114,34,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,37,100,45,98,105,116,32,115,97,109,112,108,101,115,0,0,0,70,108,111,97,116,105,110,103,32,112,111,105,110,116,32,34,80,114,101,100,105,99,116,111,114,34,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,37,100,32,100,97,116,97,32,102,111,114,109,97,116,0,0,0,0,34,80,114,101,100,105,99,116,111,114,34,32,118,97,108,117,101,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,102,112,65,99,99,0,0,0,115,119,97,98,72,111,114,65,99,99,51,50,0,0,0,0,115,119,97,98,72,111,114,65,99,99,49,54,0,0,0,0,80,114,101,100,105,99,116,111,114,68,101,99,111,100,101,84,105,108,101,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,116,105,108,101,32,33,61,32,78,85,76,76,0,0,40,111,99,99,48,37,114,111,119,115,105,122,101,41,61,61,48,0,0,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,112,102,117,110,99,32,33,61,32,78,85,76,76,0,80,114,101,100,105,99,116,111,114,68,101,99,111,100,101,82,111,119,0,0,0,0,0,0,115,112,45,62,100,101,99,111,100,101,114,111,119,32,33,61,32,78,85,76,76,0,0,0,104,111,114,65,99,99,51,50,0,0,0,0,0,0,0,0,104,111,114,65,99,99,49,54,0,0,0,0,0,0,0,0,104,111,114,65,99,99,56,0,32,32,80,114,101,100,105,99,116,111,114,58,32,0,0,0,110,111,110,101,32,0,0,0,104,111,114,105,122,111,110,116,97,108,32,100,105,102,102,101,114,101,110,99,105,110,103,32,0,0,0,0,0,0,0,0,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,112,114,101,100,105,99,116,111,114,32,0,0,0,0,0,0,0,37,117,32,40,48,120,37,120,41,10,0,0,0,0,0,0,80,114,101,100,105,99,116,111,114,86,83,101,116,70,105,101,108,100,0,0,0,0,0,0,115,112,45,62,118,115,101,116,112,97,114,101,110,116,32,33,61,32,78,85,76,76,0,0,80,114,101,100,105,99,116,111,114,86,71,101,116,70,105,101,108,100,0,0,0,0,0,0,115,112,45,62,118,103,101,116,112,97,114,101,110,116,32,33,61,32,78,85,76,76,0,0,80,114,101,100,105,99,116,111,114,0,0,0,0,0,0,0,84,104,117,110,100,101,114,68,101,99,111,100,101,82,111,119,0,0,0,0,0,0,0,0,70,114,97,99,116,105,111,110,97,108,32,115,99,97,110,108,105,110,101,115,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,0,0,0,0,0,84,104,117,110,100,101,114,68,101,99,111,100,101,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122880);
/* memory initializer */ allocate([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,253,255,255,255,254,255,255,255,255,255,255,255,37,115,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,32,40,37,108,108,117,32,33,61,32,37,108,108,117,41,0,0,78,111,116,32,101,110,111,117,103,104,0,0,0,0,0,0,84,111,111,32,109,117,99,104,0,0,0,0,0,0,0,0,84,104,117,110,100,101,114,83,101,116,117,112,68,101,99,111,100,101,0,0,0,0,0,0,87,114,111,110,103,32,98,105,116,115,112,101,114,115,97,109,112,108,101,32,118,97,108,117,101,32,40,37,100,41,44,32,84,104,117,110,100,101,114,32,100,101,99,111,100,101,114,32,111,110,108,121,32,115,117,112,112,111,114,116,115,32,52,98,105,116,115,32,112,101,114,32,115,97,109,112,108,101,46,0,40,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,68,69,70,76,65,84,69,41,32,124,124,32,40,115,99,104,101,109,101,32,61,61,32,67,79,77,80,82,69,83,83,73,79,78,95,65,68,79,66,69,95,68,69,70,76,65,84,69,41,0,0,0,0,0,0,0,0,116,105,102,95,122,105,112,46,99,0,0,0,0,0,0,0,84,73,70,70,73,110,105,116,90,73,80,0,0,0,0,0,21,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,64,11,2,0,0,0,0,0,0,0,0,0,77,101,114,103,105,110,103,32,68,101,102,108,97,116,101,32,99,111,100,101,99,45,115,112,101,99,105,102,105,99,32,116,97,103,115,32,102,97,105,108,101,100,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,102,111,114,32,90,73,80,32,115,116,97,116,101,32,98,108,111,99,107,0,0,0,0,115,112,32,33,61,32,48,0,90,73,80,67,108,101,97,110,117,112,0,0,0,0,0,0,115,112,32,33,61,32,78,85,76,76,0,0,0,0,0,0,90,73,80,69,110,99,111,100,101,0,0,0,0,0,0,0,115,112,45,62,115,116,97,116,101,32,61,61,32,90,83,84,65,84,69,95,73,78,73,84,95,69,78,67,79,68,69,0,69,110,99,111,100,101,114,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,90,73,80,80,111,115,116,69,110,99,111,100,101,0,0,0,90,76,105,98,32,101,114,114,111,114,58,32,37,115,0,0,90,73,80,80,114,101,69,110,99,111,100,101,0,0,0,0,90,73,80,83,101,116,117,112,69,110,99,111,100,101,0,0,49,46,50,46,53,0,0,0,37,115,0,0,0,0,0,0,90,73,80,68,101,99,111,100,101,0,0,0,0,0,0,0,115,112,45,62,115,116,97,116,101,32,61,61,32,90,83,84,65,84,69,95,73,78,73,84,95,68,69,67,79,68,69,0,68,101,99,111,100,105,110,103,32,101,114,114,111,114,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,44,32,37,115,0,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,97,116,32,115,99,97,110,108,105,110,101,32,37,108,117,32,40,115,104,111,114,116,32,37,108,117,32,98,121,116,101,115,41,0,0,0,0,0,0,0,90,73,80,80,114,101,68,101,99,111,100,101,0,0,0,0,90,73,80,83,101,116,117,112,68,101,99,111,100,101,0,0,90,73,80,86,83,101,116,70,105,101,108,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,4,0,4,0,8,0,4,0,15,0,0,0,4,0,5,0,16,0,8,0,15,0,0,0,4,0,6,0,32,0,32,0,15,0,0,0,4,0,4,0,16,0,16,0,16,0,0,0,8,0,16,0,32,0,32,0,16,0,0,0,8,0,16,0,128,0,128,0,16,0,0,0,8,0,32,0,128,0,0,1,16,0,0,0,32,0,128,0,2,1,0,4,16,0,0,0,32,0,2,1,2,1,0,16,16,0,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,0,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,0,0,0,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,0,0,0,0,0,0,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,0,0,0,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,0,0,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,0,0,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,72,0,78,0,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,192,26,2,0,184,31,2,0,1,1,0,0,30,1,0,0,15,0,0,0,0,0,0,0,64,31,2,0,168,32,2,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,176,33,2,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,115,116,114,101,97,109,32,101,110,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,105,108,101,32,101,114,114,111,114,0,0,0,0,0,0,115,116,114,101,97,109,32,101,114,114,111,114,0,0,0,0,100,97,116,97,32,101,114,114,111,114,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,98,117,102,102,101,114,32,101,114,114,111,114,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0,0,0,0,0,34,2,0,16,34,2,0,32,34,2,0,40,34,2,0,56,34,2,0,72,34,2,0,88,34,2,0,112,34,2,0,128,34,2,0,32,34,2,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133120);
/* memory initializer */ allocate([41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143360);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  var _SItoD=true;

  var _SItoF=true;

   
  Module["_memset"] = _memset;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  function _abort() {
      Module['abort']();
    }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated };
      return ptr;
    }

  var _sqrt=Math_sqrt;


  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  var _UItoD=true;

  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _atan2=Math_atan2;

   
  Module["_strcpy"] = _strcpy;

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _UItoF=true;

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    Module["dynCall_viiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.___rand_seed|0;var p=env._stderr|0;var q=0;var r=0;var s=0;var t=0;var u=+env.NaN,v=+env.Infinity;var w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0.0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=0;var P=global.Math.floor;var Q=global.Math.abs;var R=global.Math.sqrt;var S=global.Math.pow;var T=global.Math.cos;var U=global.Math.sin;var V=global.Math.tan;var W=global.Math.acos;var X=global.Math.asin;var Y=global.Math.atan;var Z=global.Math.atan2;var _=global.Math.exp;var $=global.Math.log;var aa=global.Math.ceil;var ba=global.Math.imul;var ca=env.abort;var da=env.assert;var ea=env.asmPrintInt;var fa=env.asmPrintFloat;var ga=env.min;var ha=env.invoke_iiii;var ia=env.invoke_vi;var ja=env.invoke_vii;var ka=env.invoke_viiiiiiiiiiii;var la=env.invoke_ii;var ma=env.invoke_viii;var na=env.invoke_viiiiiiiii;var oa=env.invoke_iiiii;var pa=env.invoke_iii;var qa=env.invoke_viiii;var ra=env._fabs;var sa=env._exp;var ta=env._llvm_pow_f64;var ua=env._send;var va=env._fstat;var wa=env._lseek;var xa=env.___setErrNo;var ya=env._vfprintf;var za=env.___assert_fail;var Aa=env._floor;var Ba=env._fflush;var Ca=env._pwrite;var Da=env._strerror_r;var Ea=env._open;var Fa=env._sbrk;var Ga=env._snprintf;var Ha=env._llvm_bswap_i32;var Ia=env._emscripten_memcpy_big;var Ja=env._fileno;var Ka=env._sysconf;var La=env._close;var Ma=env.__formatString;var Na=env._atan2;var Oa=env._recv;var Pa=env._pread;var Qa=env._mkport;var Ra=env._sprintf;var Sa=env.__reallyNegative;var Ta=env._write;var Ua=env.___errno_location;var Va=env._stat;var Wa=env._log;var Xa=env._read;var Ya=env._abort;var Za=env._fwrite;var _a=env._time;var $a=env._fprintf;var ab=env._strerror;var bb=env._munmap;var cb=env._mmap;var db=env._sqrt;var eb=0.0;
// EMSCRIPTEN_START_FUNCS
function md(d,f,g,h,j,k,l,m,n,o){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;p=i;i=i+16|0;q=p+8|0;r=p;s=a[f]|0;t=s<<24>>24;if((t|0)==114){u=(a[f+1|0]|0)==43?2:0}else if((t|0)==97|(t|0)==119){u=s<<24>>24==119?578:66}else{c[q>>2]=f;sc(0,17256,17224,q);v=0;i=p;return v|0}s=me((Ni(d|0)|0)+697|0)|0;if((s|0)==0){c[q>>2]=d;sc(g,17256,17272,q);v=0;i=p;return v|0}pe(s,0,696);t=s+696|0;c[s>>2]=t;Ri(t|0,d|0)|0;t=s+8|0;c[t>>2]=u&2;b[s+448>>1]=-1;w=s+456|0;c[w>>2]=0;c[w+4>>2]=0;c[s+452>>2]=-1;c[s+444>>2]=-1;w=s+628|0;c[w>>2]=g;if((h|0)==0|(j|0)==0|(k|0)==0|(l|0)==0|(m|0)==0){sc(g,17256,17312,q);v=0;i=p;return v|0}g=s+632|0;c[g>>2]=h;h=s+636|0;c[h>>2]=j;j=s+640|0;c[j>>2]=k;c[s+644>>2]=l;c[s+648>>2]=m;m=s+620|0;c[m>>2]=(n|0)==0?3:n;c[s+624>>2]=(o|0)==0?1:o;Re(s);o=s+12|0;n=(u|0)==0;l=n?2049:1;k=(u&576|0)==0?l|32768:l;c[o>>2]=k;l=a[f]|0;a:do{if(!(l<<24>>24==0)){x=(u&64|0)==0;if(n){y=l;z=k;A=f}else{B=l;C=k;D=f;while(1){switch(B<<24>>24|0){case 72:{E=C&-4|2;c[o>>2]=E;F=E;break};case 98:{if(x){F=C}else{E=C|128;c[o>>2]=E;F=E}break};case 56:{if(x){F=C}else{E=C|524288;c[o>>2]=E;F=E}break};case 66:{E=C&-4|1;c[o>>2]=E;F=E;break};case 104:{E=C|65536;c[o>>2]=E;F=E;break};case 76:{E=C&-4|2;c[o>>2]=E;F=E;break};default:{F=C}}D=D+1|0;B=a[D]|0;if(B<<24>>24==0){break a}else{C=F}}}while(1){switch(y<<24>>24|0){case 104:{C=z|65536;c[o>>2]=C;G=C;break};case 66:{C=z&-4|1;c[o>>2]=C;G=C;break};case 72:{C=z&-4|2;c[o>>2]=C;G=C;break};case 77:{C=z|2048;c[o>>2]=C;G=C;break};case 99:{C=z&-32769;c[o>>2]=C;G=C;break};case 56:{if(x){G=z}else{C=z|524288;c[o>>2]=C;G=C}break};case 109:{C=z&-2049;c[o>>2]=C;G=C;break};case 67:{C=z|32768;c[o>>2]=C;G=C;break};case 98:{if(x){G=z}else{C=z|128;c[o>>2]=C;G=C}break};case 76:{C=z&-4|2;c[o>>2]=C;G=C;break};default:{G=z}}A=A+1|0;y=a[A]|0;if(y<<24>>24==0){break a}else{z=G}}}}while(0);b:do{if((u&512|0)==0?(G=s+424|0,(fb[c[g>>2]&31](c[w>>2]|0,G,8)|0)==8):0){z=b[G>>1]|0;G=z&65535;if(z<<16>>16==19789){c[o>>2]=c[o>>2]|128}else if(!(z<<16>>16==20549|z<<16>>16==18761)){z=c[w>>2]|0;c[q>>2]=G;c[q+4>>2]=G;sc(z,d,17416,q);break}z=s+426|0;if((c[o>>2]&128|0)!=0){Nd(z)}G=b[z>>1]|0;z=G&65535;if(!((G+ -42<<16>>16&65535)<2)){y=c[w>>2]|0;c[q>>2]=z;c[q+4>>2]=z;sc(y,d,17472,q);break}do{if(!(G<<16>>16==42)){y=s+432|0;if((fb[c[g>>2]&31](c[w>>2]|0,y,8)|0)!=8){sc(c[w>>2]|0,d,17360,q);break b}z=s+428|0;if((c[o>>2]&128|0)!=0){Nd(z);Pd(y)}y=b[z>>1]|0;z=y&65535;if(!(y<<16>>16==8)){y=c[w>>2]|0;c[q>>2]=z;c[q+4>>2]=z;sc(y,d,17520,q);break b}y=b[s+430>>1]|0;z=y&65535;if(y<<16>>16==0){b[s+440>>1]=16;y=c[o>>2]|524288;c[o>>2]=y;H=y;break}else{y=c[w>>2]|0;c[q>>2]=z;c[q+4>>2]=z;sc(y,d,17576,q);break b}}else{y=c[o>>2]|0;if((y&128|0)==0){I=y}else{Od(s+428|0);I=c[o>>2]|0}b[s+440>>1]=8;H=I}}while(0);G=H|512;c[o>>2]=G;y=s+588|0;c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;c[y+12>>2]=0;c[y+16>>2]=0;y=a[f]|0;if((y|0)==97){if((Ob(s)|0)==0){break}else{v=s}i=p;return v|0}else if((y|0)!=114){break}if((H&524288|0)==0){y=s+24|0;c[y>>2]=c[s+428>>2];c[y+4>>2]=0}else{y=s+432|0;z=c[y+4>>2]|0;A=s+24|0;c[A>>2]=c[y>>2];c[A+4>>2]=z}do{if((H&2048|0)!=0){if((fb[c[m>>2]&31](c[w>>2]|0,s+612|0,r)|0)==0){z=c[o>>2]&-2049;c[o>>2]=z;J=z;break}z=r;A=c[z>>2]|0;y=c[z+4>>2]|0;c[s+616>>2]=A;if((A|0)==(A|0)&(((A|0)<0)<<31>>31|0)==(y|0)){J=c[o>>2]|0;break}else{za(17624,17240,449,17256)}}else{J=G}}while(0);if((J&65536|0)!=0){v=s;i=p;return v|0}if((ac(s)|0)!=0){c[s+608>>2]=-1;c[o>>2]=c[o>>2]|16;v=s;i=p;return v|0}}else{K=37}}while(0);do{if((K|0)==37){if((c[t>>2]|0)==0){sc(c[w>>2]|0,d,17360,q);break}J=c[o>>2]|0;r=J&128;m=s+424|0;b[m>>1]=(r|0)!=0?19789:18761;H=s+426|0;if((J&524288|0)==0){b[H>>1]=42;c[s+428>>2]=0;if((r|0)!=0){Nd(H)}b[s+440>>1]=8}else{b[H>>1]=43;J=s+428|0;b[J>>1]=8;b[s+430>>1]=0;f=s+432|0;c[f>>2]=0;c[f+4>>2]=0;if((r|0)!=0){Nd(H);Nd(J)}b[s+440>>1]=16}mb[c[j>>2]&63](c[w>>2]|0,0,0,0)|0;J=s+440|0;H=fb[c[h>>2]&31](c[w>>2]|0,m,e[J>>1]|0)|0;if((H|0)!=(e[J>>1]|0)){sc(c[w>>2]|0,d,17384,q);break}if((b[m>>1]|0)==19789){c[o>>2]=c[o>>2]|128}if((Ob(s)|0)!=0){m=s+16|0;c[m>>2]=0;c[m+4>>2]=0;m=s+32|0;c[m>>2]=0;c[m+4>>2]=0;v=s;i=p;return v|0}}}while(0);c[t>>2]=0;Gb(s);v=0;i=p;return v|0}function nd(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function od(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function pd(a){a=a|0;return c[a>>2]|0}function qd(a){a=a|0;return(c[a+12>>2]|0)>>>10&1|0}function rd(a){a=a|0;return b[a+448>>1]|0}function sd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+16|0;g=f;if((c[a+8>>2]|0)==1){sc(c[a+628>>2]|0,c[a>>2]|0,18344,g);h=-1;i=f;return h|0}if((c[a+12>>2]&1024|0)!=0){sc(c[a+628>>2]|0,c[a>>2]|0,18424,g);h=-1;i=f;return h|0}j=c[a+168>>2]|0;if(!(j>>>0>b>>>0)){k=c[a+628>>2]|0;c[g>>2]=b;c[g+4>>2]=j;sc(k,17656,17680,g);h=-1;i=f;return h|0}g=c[a+100>>2]|0;k=c[a+60>>2]|0;j=g>>>0>k>>>0?k:g;g=((k+ -1+j|0)>>>0)/(j>>>0)|0;l=k-(ba((b>>>0)%(g>>>0)|0,j)|0)|0;k=Jd(a,l>>>0>j>>>0?j:l)|0;if((k|0)==0){h=-1;i=f;return h|0}l=(e|0)!=-1&(k|0)>(e|0)?e:k;if((td(a,b)|0)==0){h=-1;i=f;return h|0}if((mb[c[a+540>>2]&63](a,d,l,((b>>>0)/(g>>>0)|0)&65535)|0)<1){h=-1;i=f;return h|0}kb[c[a+652>>2]&63](a,d,l);h=l;i=f;return h|0}function td(a,b){a=a|0;b=b|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;i=i+32|0;f=d;if((fc(a)|0)==0){g=0;i=d;return g|0}h=a+176|0;j=c[h>>2]|0;if((j|0)==0){g=0;i=d;return g|0}k=a+12|0;l=c[k>>2]|0;do{if((l&131072|0)==0){m=j+(b<<3)|0;n=c[m>>2]|0;o=c[m+4>>2]|0;if((n|0)==0&(o|0)==0){m=c[a+628>>2]|0;p=f;c[p>>2]=0;c[p+4>>2]=0;c[f+8>>2]=b;sc(m,17744,17760,f);g=0;i=d;return g|0}if((l&2048|0)!=0?((e[a+94>>1]|0|256)&l|0)!=0:0){if((l&512|0)!=0?(m=a+588|0,p=c[m>>2]|0,(p|0)!=0):0){ne(p);c[m>>2]=0;c[a+592>>2]=0;q=c[k>>2]|0}else{q=l}m=q&-513;c[k>>2]=m;p=c[a+616>>2]|0;r=((p|0)<0)<<31>>31;s=(c[a+172>>2]|0)+(b<<3)|0;t=c[s>>2]|0;u=c[s+4>>2]|0;s=Ii(p|0,r|0,n|0,o|0)|0;v=F;if(!(o>>>0>r>>>0|(o|0)==(r|0)&n>>>0>p>>>0|(u>>>0>v>>>0|(u|0)==(v|0)&t>>>0>s>>>0))){c[a+592>>2]=n;c[a+588>>2]=(c[a+612>>2]|0)+t;c[a+596>>2]=0;c[a+600>>2]=n;c[k>>2]=m|8388608;break}m=c[a+628>>2]|0;s=Ii(p|0,r|0,t|0,u|0)|0;c[f>>2]=b;u=f+4|0;c[u>>2]=s;c[u+4>>2]=F;u=f+12|0;c[u>>2]=n;c[u+4>>2]=o;sc(m,17744,17808,f);c[a+452>>2]=-1;g=0;i=d;return g|0}if(!((n|0)==(n|0)&(((n|0)<0)<<31>>31|0)==(o|0))){sc(c[a+628>>2]|0,17744,17720,f);g=0;i=d;return g|0}do{if((n|0)>(c[a+592>>2]|0)){c[a+452>>2]=-1;if((l&512|0)==0){o=c[a+628>>2]|0;c[f>>2]=b;sc(o,17744,17864,f);g=0;i=d;return g|0}if((vd(a,0,n)|0)==0){g=0;i=d;return g|0}else{w=c[k>>2]|0;break}}else{w=l}}while(0);if((w&8388608|0)!=0?(c[a+452>>2]=-1,(vd(a,0,n)|0)==0):0){g=0;i=d;return g|0}o=a+588|0;if((ud(a,b,c[o>>2]|0,n,17744)|0)!=(n|0)){g=0;i=d;return g|0}c[a+596>>2]=0;c[a+600>>2]=n;if(((e[a+94>>1]|0|256)&c[k>>2]|0)==0){Xd(c[o>>2]|0,n)}}}while(0);if((fc(a)|0)==0){g=0;i=d;return g|0}if((c[h>>2]|0)==0){g=0;i=d;return g|0}w=c[k>>2]|0;do{if((w&32|0)==0){if((jb[c[a+508>>2]&31](a)|0)==0){g=0;i=d;return g|0}else{l=c[k>>2]|32;c[k>>2]=l;x=l;break}}else{x=w}}while(0);c[a+452>>2]=b;w=c[a+164>>2]|0;c[a+444>>2]=ba(c[a+100>>2]|0,(b>>>0)%(w>>>0)|0)|0;c[k>>2]=x&-1048577;if((x&131072|0)==0){c[a+604>>2]=c[a+588>>2];c[a+608>>2]=c[(c[h>>2]|0)+(b<<3)>>2]}else{c[a+604>>2]=0;c[a+608>>2]=0}g=nb[c[a+512>>2]&31](a,((b>>>0)/(w>>>0)|0)&65535)|0;i=d;return g|0}function ud(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+32|0;h=g;if((fc(a)|0)==0){j=-1;i=g;return j|0}k=c[a+12>>2]|0;if((k&131072|0)!=0){za(18056,18096,372,18680)}if((k&2048|0)==0){k=a+628|0;l=a+172|0;m=(c[l>>2]|0)+(b<<3)|0;n=mb[c[a+640>>2]&63](c[k>>2]|0,c[m>>2]|0,c[m+4>>2]|0,0)|0;m=(c[l>>2]|0)+(b<<3)|0;if(!((n|0)==(c[m>>2]|0)&(F|0)==(c[m+4>>2]|0))){m=c[k>>2]|0;c[h>>2]=c[a+444>>2];c[h+4>>2]=b;sc(m,f,18704,h);j=-1;i=g;return j|0}m=fb[c[a+632>>2]&31](c[k>>2]|0,d,e)|0;if((m|0)==(e|0)){j=e;i=g;return j|0}n=c[k>>2]|0;c[h>>2]=c[a+444>>2];k=h+4|0;c[k>>2]=m;c[k+4>>2]=((m|0)<0)<<31>>31;m=h+12|0;c[m>>2]=e;c[m+4>>2]=((e|0)<0)<<31>>31;sc(n,f,18744,h);j=-1;i=g;return j|0}n=(c[a+172>>2]|0)+(b<<3)|0;m=c[n>>2]|0;k=m+e|0;if((m|0)==(m|0)&(((m|0)<0)<<31>>31|0)==(c[n+4>>2]|0)?(n=c[a+616>>2]|0,(m|0)<=(n|0)):0){if((m|e|0)<0|(k|0)>(n|0)){o=n-m|0;p=13}}else{o=0;p=13}if((p|0)==13?(o|0)!=(e|0):0){p=c[a+628>>2]|0;c[h>>2]=c[a+444>>2];c[h+4>>2]=b;b=h+8|0;c[b>>2]=o;c[b+4>>2]=((o|0)<0)<<31>>31;o=h+16|0;c[o>>2]=e;c[o+4>>2]=((e|0)<0)<<31>>31;sc(p,f,18808,h);j=-1;i=g;return j|0}qe(d,(c[a+612>>2]|0)+m|0,e);j=e;i=g;return j|0}function vd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+16|0;f=e;g=a+12|0;h=c[g>>2]|0;if((h&131072|0)!=0){za(18056,18096,918,18112)}c[g>>2]=h&-8388609;j=a+588|0;k=c[j>>2]|0;if((k|0)!=0){if((h&512|0)!=0){ne(k)}c[j>>2]=0;c[a+592>>2]=0}if((b|0)!=0){c[a+592>>2]=d;c[j>>2]=b;c[g>>2]=c[g>>2]&-513;l=1;i=e;return l|0}b=d+1023&-1024;d=(b|0)==0?-1:b;c[a+592>>2]=d;b=me(d)|0;c[j>>2]=b;c[g>>2]=c[g>>2]|512;if((b|0)!=0){l=1;i=e;return l|0}b=c[a+628>>2]|0;c[f>>2]=c[a+444>>2];sc(b,18112,18136,f);c[a+592>>2]=0;l=0;i=e;return l|0}function wd(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;i=i+16|0;j=h;if((c[a+8>>2]|0)==1){sc(c[a+628>>2]|0,c[a>>2]|0,18344,j);k=-1;i=h;return k|0}if((c[a+12>>2]&1024|0)==0){sc(c[a+628>>2]|0,c[a>>2]|0,18376,j);k=-1;i=h;return k|0}if((Zd(a,d,e,f,g)|0)==0){k=-1;i=h;return k|0}k=xd(a,Yd(a,d,e,f,g)|0,b,-1)|0;i=h;return k|0}function xd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+16|0;g=f;h=c[a+496>>2]|0;if((c[a+8>>2]|0)==1){sc(c[a+628>>2]|0,c[a>>2]|0,18344,g);j=-1;i=f;return j|0}if((c[a+12>>2]&1024|0)==0){sc(c[a+628>>2]|0,c[a>>2]|0,18376,g);j=-1;i=f;return j|0}k=c[a+168>>2]|0;if(!(k>>>0>b>>>0)){l=c[a+628>>2]|0;c[g>>2]=b;c[g+4>>2]=k;sc(l,17904,17928,g);j=-1;i=f;return j|0}if((e|0)==-1){m=h}else{m=(h|0)<(e|0)?h:e}if((yd(a,b)|0)==0){j=-1;i=f;return j|0}if((mb[c[a+548>>2]&63](a,d,m,((b>>>0)/((c[a+164>>2]|0)>>>0)|0)&65535)|0)==0){j=-1;i=f;return j|0}kb[c[a+652>>2]&63](a,d,m);j=m;i=f;return j|0}function yd(a,b){a=a|0;b=b|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;i=i+16|0;f=d;if((fc(a)|0)==0){g=0;i=d;return g|0}h=a+176|0;j=c[h>>2]|0;if((j|0)==0){g=0;i=d;return g|0}k=a+12|0;l=c[k>>2]|0;do{if((l&131072|0)==0){m=j+(b<<3)|0;n=c[m>>2]|0;o=c[m+4>>2]|0;if((n|0)==0&(o|0)==0){m=c[a+628>>2]|0;p=f;c[p>>2]=0;c[p+4>>2]=0;c[f+8>>2]=b;sc(m,17960,17976,f);g=0;i=d;return g|0}if((l&2048|0)!=0?((e[a+94>>1]|0|256)&l|0)!=0:0){if((l&512|0)!=0?(m=a+588|0,p=c[m>>2]|0,(p|0)!=0):0){ne(p);c[m>>2]=0;c[a+592>>2]=0;q=c[k>>2]|0}else{q=l}m=q&-513;c[k>>2]=m;p=c[a+616>>2]|0;r=((p|0)<0)<<31>>31;if(!(o>>>0>r>>>0|(o|0)==(r|0)&n>>>0>p>>>0)?(s=(c[a+172>>2]|0)+(b<<3)|0,t=c[s>>2]|0,u=c[s+4>>2]|0,s=Ii(p|0,r|0,n|0,o|0)|0,r=F,!(u>>>0>r>>>0|(u|0)==(r|0)&t>>>0>s>>>0)):0){c[a+592>>2]=n;c[a+588>>2]=(c[a+612>>2]|0)+t;c[a+596>>2]=0;c[a+600>>2]=n;c[k>>2]=m|8388608;break}c[a+492>>2]=-1;g=0;i=d;return g|0}if(!((n|0)==(n|0)&(((n|0)<0)<<31>>31|0)==(o|0))){sc(c[a+628>>2]|0,17960,17720,f);g=0;i=d;return g|0}do{if((n|0)>(c[a+592>>2]|0)){c[a+492>>2]=-1;if((l&512|0)==0){o=c[a+628>>2]|0;c[f>>2]=b;sc(o,17960,18016,f);g=0;i=d;return g|0}if((vd(a,0,n)|0)==0){g=0;i=d;return g|0}else{v=c[k>>2]|0;break}}else{v=l}}while(0);if((v&8388608|0)!=0?(c[a+492>>2]=-1,(vd(a,0,n)|0)==0):0){g=0;i=d;return g|0}o=a+588|0;if((zd(a,b,c[o>>2]|0,n,17960)|0)!=(n|0)){g=0;i=d;return g|0}c[a+596>>2]=0;c[a+600>>2]=n;if(((e[a+94>>1]|0|256)&c[k>>2]|0)==0){Xd(c[o>>2]|0,n)}}}while(0);if((fc(a)|0)==0){g=0;i=d;return g|0}if((c[h>>2]|0)==0){g=0;i=d;return g|0}v=c[k>>2]|0;do{if((v&32|0)==0){if((jb[c[a+508>>2]&31](a)|0)==0){g=0;i=d;return g|0}else{l=c[k>>2]|32;c[k>>2]=l;w=l;break}}else{w=v}}while(0);c[a+492>>2]=b;v=c[a+56>>2]|0;l=c[a+68>>2]|0;if(v>>>0<(0-l|0)>>>0){x=((v+ -1+l|0)>>>0)/(l>>>0)|0}else{x=0}v=c[a+72>>2]|0;c[a+444>>2]=ba(v,(b>>>0)%(x>>>0)|0)|0;x=c[a+60>>2]|0;if(x>>>0<(0-v|0)>>>0){y=((v+ -1+x|0)>>>0)/(v>>>0)|0}else{y=0}c[a+488>>2]=ba((b>>>0)%(y>>>0)|0,l)|0;c[k>>2]=w&-1048577;if((w&131072|0)==0){c[a+604>>2]=c[a+588>>2];c[a+608>>2]=c[(c[h>>2]|0)+(b<<3)>>2]}else{c[a+604>>2]=0;c[a+608>>2]=0}g=nb[c[a+512>>2]&31](a,((b>>>0)/((c[a+164>>2]|0)>>>0)|0)&65535)|0;i=d;return g|0}function zd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+32|0;h=g;if((fc(a)|0)==0){j=-1;i=g;return j|0}k=c[a+12>>2]|0;if((k&131072|0)!=0){za(18056,18096,684,18472)}if((k&2048|0)==0){k=a+628|0;l=a+172|0;m=(c[l>>2]|0)+(b<<3)|0;n=mb[c[a+640>>2]&63](c[k>>2]|0,c[m>>2]|0,c[m+4>>2]|0,0)|0;m=(c[l>>2]|0)+(b<<3)|0;if(!((n|0)==(c[m>>2]|0)&(F|0)==(c[m+4>>2]|0))){m=c[k>>2]|0;n=c[a+488>>2]|0;c[h>>2]=c[a+444>>2];c[h+4>>2]=n;c[h+8>>2]=b;sc(m,f,18496,h);j=-1;i=g;return j|0}m=fb[c[a+632>>2]&31](c[k>>2]|0,d,e)|0;if((m|0)==(e|0)){j=e;i=g;return j|0}n=c[k>>2]|0;k=c[a+488>>2]|0;c[h>>2]=c[a+444>>2];c[h+4>>2]=k;k=h+8|0;c[k>>2]=m;c[k+4>>2]=((m|0)<0)<<31>>31;m=h+16|0;c[m>>2]=e;c[m+4>>2]=((e|0)<0)<<31>>31;sc(n,f,18544,h);j=-1;i=g;return j|0}n=(c[a+172>>2]|0)+(b<<3)|0;m=c[n>>2]|0;k=m+e|0;if((m|0)==(m|0)&(((m|0)<0)<<31>>31|0)==(c[n+4>>2]|0)?(n=c[a+616>>2]|0,(m|0)<=(n|0)):0){if((m|e|0)<0|(k|0)>(n|0)){o=n-m|0;p=13}}else{o=0;p=13}if((p|0)==13?(o|0)!=(e|0):0){p=c[a+628>>2]|0;n=c[a+488>>2]|0;c[h>>2]=c[a+444>>2];c[h+4>>2]=n;c[h+8>>2]=b;b=h+12|0;c[b>>2]=o;c[b+4>>2]=((o|0)<0)<<31>>31;o=h+20|0;c[o>>2]=e;c[o+4>>2]=((e|0)<0)<<31>>31;sc(p,f,18608,h);j=-1;i=g;return j|0}qe(d,(c[a+612>>2]|0)+m|0,e);j=e;i=g;return j|0}function Ad(a,b,c){a=a|0;b=b|0;c=c|0;return}function Bd(a,b,c){a=a|0;b=b|0;c=c|0;a=i;if((c&1|0)==0){Qd(b,(c|0)/2|0);i=a;return}else{za(18184,18096,1048,18200)}}function Cd(a,b,c){a=a|0;b=b|0;c=c|0;a=i;if(((c|0)%3|0|0)==0){Rd(b,(c|0)/3|0);i=a;return}else{za(18224,18096,1056,18240)}}function Dd(a,b,c){a=a|0;b=b|0;c=c|0;a=i;if((c&3|0)==0){Sd(b,(c|0)/4|0);i=a;return}else{za(18264,18096,1064,18280)}}function Ed(a,b,c){a=a|0;b=b|0;c=c|0;a=i;if((c&7|0)==0){Vd(b,(c|0)/8|0);i=a;return}else{za(18304,18096,1072,18320)}}function Fd(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;i=i+16|0;g=f;h=(d>>>0)/((c[a+100>>2]|0)>>>0)|0;if((b[a+126>>1]|0)!=2){j=h;i=f;return j|0}d=e&65535;k=b[a+98>>1]|0;if((k&65535)>(e&65535)){j=(ba(c[a+164>>2]|0,d)|0)+h|0;i=f;return j|0}else{h=c[a+628>>2]|0;c[g>>2]=d;c[g+4>>2]=k&65535;sc(h,18880,18904,g);j=0;i=f;return j|0}return 0}function Gd(a){a=a|0;var d=0,f=0,g=0,h=0,j=0;d=i;f=c[a+100>>2]|0;if(!((f|0)==-1)){g=c[a+60>>2]|0;if(g>>>0<(0-f|0)>>>0){h=((f+ -1+g|0)>>>0)/(f>>>0)|0}else{h=0}}else{h=1}if((b[a+126>>1]|0)!=2){j=h;i=d;return j|0}j=xe(a,h,e[a+98>>1]|0,18944)|0;i=d;return j|0}function Hd(a,d){a=a|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;i=i+16|0;g=f;h=f+8|0;if((d|0)==-1){j=c[a+60>>2]|0}else{j=d}if(((b[a+126>>1]|0)==1?(b[a+90>>1]|0)==6:0)?(c[a+12>>2]&16384|0)==0:0){if((b[a+98>>1]|0)!=3){sc(c[a+628>>2]|0,18968,18992,g);k=0;l=0;F=k;i=f;return l|0}d=h+2|0;c[g>>2]=h;c[g+4>>2]=d;Ce(a,530,g)|0;m=b[h>>1]|0;if(m<<16>>16==4|m<<16>>16==2|m<<16>>16==1){h=b[d>>1]|0;if(h<<16>>16==4|h<<16>>16==2|h<<16>>16==1){n=m&65535;o=h&65535;p=(ba(o,n)|0)+2|0;q=c[a+56>>2]|0;if(q>>>0<(0-n|0)>>>0){r=((n+ -1+q|0)>>>0)/(n>>>0)|0;s=0}else{r=0;s=0}if(j>>>0<(0-o|0)>>>0){t=((j+ -1+o|0)>>>0)/(o>>>0)|0;u=0}else{t=0;u=0}o=ye(a,r,s,p&65535,0,18968)|0;p=F;s=a+84|0;r=ye(a,o,p,e[s>>1]|0,0,18968)|0;n=ye(a,o,p,e[s>>1]|0,0,18968)|0;s=Pi(n|0,F|0,3)|0;n=Oi(s|0,F|0,((r&7|0)!=0|0!=0)&1|0,0)|0;r=ye(a,n,F,t,u,18968)|0;k=F;l=r;F=k;i=f;return l|0}else{v=h}}else{v=b[d>>1]|0}d=c[a+628>>2]|0;c[g>>2]=m&65535;c[g+4>>2]=v&65535;sc(d,18968,19032,g);k=0;l=0;F=k;i=f;return l|0}g=Id(a)|0;d=ye(a,j,0,g,F,18968)|0;k=F;l=d;F=k;i=f;return l|0}function Id(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;i=i+16|0;f=d;g=d+8|0;if((b[a+126>>1]|0)!=1){h=ye(a,c[a+56>>2]|0,0,e[a+84>>1]|0,0,19128)|0;j=Oi(h|0,F|0,7,0)|0;h=Pi(j|0,F|0,3)|0;k=F;l=h;F=k;i=d;return l|0}h=b[a+98>>1]|0;if((b[a+90>>1]|0)==6&h<<16>>16==3){if((c[a+12>>2]&16384|0)==0){j=g+2|0;c[f>>2]=g;c[f+4>>2]=j;Ce(a,530,f)|0;m=b[g>>1]|0;if(m<<16>>16==4|m<<16>>16==2|m<<16>>16==1?(g=b[j>>1]|0,g<<16>>16==4|g<<16>>16==2|g<<16>>16==1):0){n=m&65535;m=(ba(g&65535,n)|0)+2|0;g=c[a+56>>2]|0;if(g>>>0<(0-n|0)>>>0){o=((n+ -1+g|0)>>>0)/(n>>>0)|0;p=0}else{o=0;p=0}n=ye(a,o,p,m&65535,0,19128)|0;m=ye(a,n,F,e[a+84>>1]|0,0,19128)|0;n=Oi(m|0,F|0,7,0)|0;m=Pi(n|0,F|0,3)|0;n=Zi(m|0,F|0,e[j>>1]|0,0)|0;k=F;l=n;F=k;i=d;return l|0}sc(c[a+628>>2]|0,19128,19152,f);k=0;l=0;F=k;i=d;return l|0}else{q=3}}else{q=h}h=ye(a,c[a+56>>2]|0,0,q&65535,0,19128)|0;q=ye(a,h,F,e[a+84>>1]|0,0,19128)|0;a=Oi(q|0,F|0,7,0)|0;q=Pi(a|0,F|0,3)|0;k=F;l=q;F=k;i=d;return l|0}function Jd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+16|0;e=Hd(a,b)|0;if((e|0)==(e|0)&(((e|0)<0)<<31>>31|0)==(F|0)){f=e;i=d;return f|0}sc(c[a+628>>2]|0,19072,19088,d);f=0;i=d;return f|0}function Kd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;i=i+16|0;d=c[a+100>>2]|0;e=c[a+60>>2]|0;f=Hd(a,d>>>0>e>>>0?e:d)|0;if((f|0)==(f|0)&(((f|0)<0)<<31>>31|0)==(F|0)){g=f;i=b;return g|0}sc(c[a+628>>2]|0,19112,19088,b);g=0;i=b;return g|0}function Ld(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=i;if((b|0)>=1){d=b;i=c;return d|0}b=Id(a)|0;a=F;e=(b|0)==0&(a|0)==0;f=Zi(8192,0,(e?1:b)|0,(e?0:a)|0)|0;d=(f|0)==0&(F|0)==0?1:f;i=c;return d|0}function Md(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;d=Id(a)|0;if((d|0)==(d|0)&(((d|0)<0)<<31>>31|0)==(F|0)){e=d;i=b;return e|0}sc(c[a+628>>2]|0,19184,19208,b);e=0;i=b;return e|0}function Nd(b){b=b|0;var c=0,d=0;c=b+1|0;d=a[c]|0;a[c]=a[b]|0;a[b]=d;return}function Od(b){b=b|0;var c=0,d=0,e=0;c=b+3|0;d=a[c]|0;a[c]=a[b]|0;a[b]=d;d=b+2|0;c=a[d]|0;e=b+1|0;a[d]=a[e]|0;a[e]=c;return}function Pd(b){b=b|0;var c=0,d=0,e=0;c=b+7|0;d=a[c]|0;a[c]=a[b]|0;a[b]=d;d=b+6|0;c=a[d]|0;e=b+1|0;a[d]=a[e]|0;a[e]=c;c=b+5|0;e=a[c]|0;d=b+2|0;a[c]=a[d]|0;a[d]=e;e=b+4|0;d=a[e]|0;c=b+3|0;a[e]=a[c]|0;a[c]=d;return}function Qd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+1|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;if((e|0)<=0){break}else{f=f+2|0}}i=d;return}function Rd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+2|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;if((e|0)<=0){break}else{f=f+3|0}}i=d;return}function Sd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+3|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;c=f+2|0;b=a[c]|0;g=f+1|0;a[c]=a[g]|0;a[g]=b;if((e|0)<=0){break}else{f=f+4|0}}i=d;return}function Td(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+7|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;c=f+6|0;b=a[c]|0;g=f+1|0;a[c]=a[g]|0;a[g]=b;b=f+5|0;g=a[b]|0;c=f+2|0;a[b]=a[c]|0;a[c]=g;g=f+4|0;c=a[g]|0;b=f+3|0;a[g]=a[b]|0;a[b]=c;if((e|0)<=0){break}else{f=f+8|0}}i=d;return}function Ud(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+3|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;c=f+2|0;b=a[c]|0;g=f+1|0;a[c]=a[g]|0;a[g]=b;if((e|0)<=0){break}else{f=f+4|0}}i=d;return}function Vd(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=i;if((c|0)>0){e=c;f=b}else{i=d;return}while(1){e=e+ -1|0;b=f+7|0;c=a[b]|0;a[b]=a[f]|0;a[f]=c;c=f+6|0;b=a[c]|0;g=f+1|0;a[c]=a[g]|0;a[g]=b;b=f+5|0;g=a[b]|0;c=f+2|0;a[b]=a[c]|0;a[c]=g;g=f+4|0;c=a[g]|0;b=f+3|0;a[g]=a[b]|0;a[b]=c;if((e|0)<=0){break}else{f=f+8|0}}i=d;return}function Wd(a){a=a|0;return((a|0)!=0?19240:19496)|0}function Xd(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;if((c|0)>8){f=c+ -9&-8;g=f+8|0;h=b;j=c;while(1){a[h]=a[19240+(d[h]|0)|0]|0;k=h+1|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+2|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+3|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+4|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+5|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+6|0;a[k]=a[19240+(d[k]|0)|0]|0;k=h+7|0;a[k]=a[19240+(d[k]|0)|0]|0;j=j+ -8|0;if((j|0)<=8){break}else{h=h+8|0}}l=c+ -8-f|0;m=b+g|0}else{l=c;m=b}if((l|0)>0){n=m;o=l}else{i=e;return}while(1){o=o+ -1|0;a[n]=a[19240+(d[n]|0)|0]|0;if((o|0)<=0){break}else{n=n+1|0}}i=e;return}function Yd(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;h=i;j=c[a+68>>2]|0;k=c[a+72>>2]|0;l=c[a+76>>2]|0;m=c[a+64>>2]|0;n=(m|0)==1?0:f;if((j|0)==-1){o=c[a+56>>2]|0}else{o=j}if((k|0)==-1){p=c[a+60>>2]|0}else{p=k}k=(l|0)==-1?m:l;if((o|0)==0|(p|0)==0|(k|0)==0){q=1;i=h;return q|0}l=c[a+56>>2]|0;if(l>>>0<(0-o|0)>>>0){r=((o+ -1+l|0)>>>0)/(o>>>0)|0}else{r=0}l=c[a+60>>2]|0;if(l>>>0<(0-p|0)>>>0){s=((p+ -1+l|0)>>>0)/(p>>>0)|0}else{s=0}if(m>>>0<(0-k|0)>>>0){t=((k+ -1+m|0)>>>0)/(k>>>0)|0}else{t=0}m=ba(s,r)|0;if((b[a+126>>1]|0)==2){q=((d>>>0)/(o>>>0)|0)+(ba((e>>>0)/(p>>>0)|0,r)|0)+(ba(((n>>>0)/(k>>>0)|0)+(ba(t,g&65535)|0)|0,m)|0)|0;i=h;return q|0}else{q=(ba((e>>>0)/(p>>>0)|0,r)|0)+(ba((n>>>0)/(k>>>0)|0,m)|0)+((d>>>0)/(o>>>0)|0)|0;i=h;return q|0}return 0}function Zd(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+16|0;j=h;k=c[a+56>>2]|0;if(!(k>>>0>d>>>0)){l=c[a+628>>2]|0;m=c[a>>2]|0;c[j>>2]=d;c[j+4>>2]=k+ -1;sc(l,m,19752,j);n=0;i=h;return n|0}m=c[a+60>>2]|0;if(!(m>>>0>e>>>0)){l=c[a+628>>2]|0;k=c[a>>2]|0;c[j>>2]=e;c[j+4>>2]=m+ -1;sc(l,k,19784,j);n=0;i=h;return n|0}k=c[a+64>>2]|0;if(!(k>>>0>f>>>0)){l=c[a+628>>2]|0;m=c[a>>2]|0;c[j>>2]=f;c[j+4>>2]=k+ -1;sc(l,m,19816,j);n=0;i=h;return n|0}if((b[a+126>>1]|0)!=2){n=1;i=h;return n|0}m=b[a+98>>1]|0;if((m&65535)>(g&65535)){n=1;i=h;return n|0}l=c[a+628>>2]|0;k=c[a>>2]|0;c[j>>2]=g&65535;c[j+4>>2]=(m&65535)+ -1;sc(l,k,19856,j);n=0;i=h;return n|0}function _d(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;f=c[a+68>>2]|0;g=c[a+72>>2]|0;h=c[a+76>>2]|0;if((f|0)==-1){j=c[a+56>>2]|0}else{j=f}if((g|0)==-1){k=c[a+60>>2]|0}else{k=g}if((h|0)==-1){l=c[a+64>>2]|0}else{l=h}if((j|0)==0|(k|0)==0|(l|0)==0){m=0}else{h=c[a+56>>2]|0;if(h>>>0<(0-j|0)>>>0){n=((j+ -1+h|0)>>>0)/(j>>>0)|0}else{n=0}j=c[a+60>>2]|0;if(j>>>0<(0-k|0)>>>0){o=((k+ -1+j|0)>>>0)/(k>>>0)|0}else{o=0}k=xe(a,n,o,19896)|0;o=c[a+64>>2]|0;if(o>>>0<(0-l|0)>>>0){p=((l+ -1+o|0)>>>0)/(l>>>0)|0}else{p=0}m=xe(a,k,p,19896)|0}if((b[a+126>>1]|0)!=2){q=m;i=d;return q|0}q=xe(a,m,e[a+98>>1]|0,19896)|0;i=d;return q|0}function $d(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+16|0;f=d;if((c[a+72>>2]|0)!=0?(g=c[a+68>>2]|0,(g|0)!=0):0){h=ye(a,e[a+84>>1]|0,0,g,0,19920)|0;g=F;if((b[a+126>>1]|0)==1){j=ye(a,h,g,e[a+98>>1]|0,0,19920)|0;k=j;l=F}else{k=h;l=g}g=Pi(k|0,l|0,3)|0;l=Oi(((k&7|0)!=0|0!=0)&1|0,0,g|0,F|0)|0;m=l;n=F}else{m=0;n=0}if((m|0)==(m|0)&(((m|0)<0)<<31>>31|0)==(n|0)){o=m;i=d;return o|0}sc(c[a+628>>2]|0,19920,19936,f);o=0;i=d;return o|0}function ae(a,d){a=a|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;f=i;i=i+16|0;g=f;h=f+8|0;if((c[a+72>>2]|0)==0){j=0;k=0;F=j;i=f;return k|0}l=a+68|0;m=c[l>>2]|0;if((m|0)==0){j=0;k=0;F=j;i=f;return k|0}if((c[a+76>>2]|0)==0){j=0;k=0;F=j;i=f;return k|0}n=a+126|0;if((((b[n>>1]|0)==1?(b[a+90>>1]|0)==6:0)?(b[a+98>>1]|0)==3:0)?(c[a+12>>2]&16384|0)==0:0){o=h+2|0;c[g>>2]=h;c[g+4>>2]=o;Ce(a,530,g)|0;p=b[h>>1]|0;if(p<<16>>16==4|p<<16>>16==2|p<<16>>16==1){h=b[o>>1]|0;if(h<<16>>16==4|h<<16>>16==2|h<<16>>16==1){q=p&65535;r=h&65535;s=(ba(r,q)|0)+2|0;t=c[l>>2]|0;if(t>>>0<(0-q|0)>>>0){u=((q+ -1+t|0)>>>0)/(q>>>0)|0;v=0}else{u=0;v=0}if(d>>>0<(0-r|0)>>>0){w=((d+ -1+r|0)>>>0)/(r>>>0)|0;x=0}else{w=0;x=0}r=ye(a,u,v,s&65535,0,19960)|0;s=F;v=a+84|0;u=ye(a,r,s,e[v>>1]|0,0,19960)|0;q=ye(a,r,s,e[v>>1]|0,0,19960)|0;v=Pi(q|0,F|0,3)|0;q=Oi(v|0,F|0,((u&7|0)!=0|0!=0)&1|0,0)|0;u=ye(a,q,F,w,x,19960)|0;j=F;k=u;F=j;i=f;return k|0}else{y=h}}else{y=b[o>>1]|0}o=c[a+628>>2]|0;c[g>>2]=p&65535;c[g+4>>2]=y&65535;sc(o,19960,19976,g);j=0;k=0;F=j;i=f;return k|0}g=ye(a,e[a+84>>1]|0,0,m,0,19920)|0;m=F;if((b[n>>1]|0)==1){n=ye(a,g,m,e[a+98>>1]|0,0,19920)|0;z=n;A=F}else{z=g;A=m}m=Pi(z|0,A|0,3)|0;A=Oi(((z&7|0)!=0|0!=0)&1|0,0,m|0,F|0)|0;m=ye(a,d,0,A,F,19960)|0;j=F;k=m;F=j;i=f;return k|0}function be(a){a=a|0;var b=0,d=0;b=i;d=ae(a,c[a+72>>2]|0)|0;i=b;return d|0}function ce(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;d=ae(a,c[a+72>>2]|0)|0;if((d|0)==(d|0)&(((d|0)<0)<<31>>31|0)==(F|0)){e=d;i=b;return e|0}sc(c[a+628>>2]|0,20016,19936,b);e=0;i=b;return e|0}function de(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;a=i;e=c[b>>2]|0;if((e|0)<1){c[b>>2]=256;f=256}else{f=e}e=c[d>>2]|0;if((e|0)<1){c[d>>2]=256;g=256;h=c[b>>2]|0}else{g=e;h=f}if((h&15|0)==0){j=g}else{if(h>>>0<4294967280){k=h+15&-16}else{k=0}c[b>>2]=k;j=c[d>>2]|0}if((j&15|0)==0){i=a;return}if(j>>>0<4294967280){l=j+15&-16}else{l=0}c[d>>2]=l;i=a;return}function ee(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;e=Xa(a|0,b|0,c|0)|0;i=d;return e|0}function fe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;e=Ta(a|0,b|0,c|0)|0;i=d;return e|0}function ge(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;if((b|0)==(b|0)&(((b|0)<0)<<31>>31|0)==(d|0)){d=wa(a|0,b|0,e|0)|0;g=((d|0)<0)<<31>>31;h=d;F=g;i=f;return h|0}else{c[(Ua()|0)>>2]=22;g=-1;h=-1;F=g;i=f;return h|0}return 0}function he(a){a=a|0;var b=0,c=0;b=i;c=La(a|0)|0;i=b;return c|0}function ie(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+80|0;d=b;if((va(a|0,d|0)|0)<0){e=0;f=0}else{a=c[d+36>>2]|0;e=((a|0)<0)<<31>>31;f=a}F=e;i=b;return f|0}function je(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+80|0;f=e;g=a;if((va(g|0,f|0)|0)<0){h=0;j=0}else{a=c[f+36>>2]|0;h=((a|0)<0)<<31>>31;j=a}if(!((j|0)==(j|0)&(((j|0)<0)<<31>>31|0)==(h|0))){k=0;i=e;return k|0}a=cb(0,j|0,1,1,g|0,0)|0;c[b>>2]=a;if((a|0)==(-1|0)){k=0;i=e;return k|0}a=d;c[a>>2]=j;c[a+4>>2]=h;k=1;i=e;return k|0}function ke(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=i;bb(b|0,c|0)|0;i=d;return}function le(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+16|0;e=d;f=ld(b,20032)|0;if((f|0)==-1){g=0;i=d;return g|0}c[e>>2]=438;h=Ea(a|0,f|0,e|0)|0;if((h|0)>=0){f=md(a,b,h,4,5,5,1,2,6,2)|0;if((f|0)==0){La(h|0)|0;g=0;i=d;return g|0}else{c[f+4>>2]=h;g=f;i=d;return g|0}}f=Ua()|0;h=c[f>>2]|0;if((h|0)>0?(ab(h|0)|0)!=0:0){h=ab(c[f>>2]|0)|0;c[e>>2]=a;c[e+4>>2]=h;sc(0,20032,20048,e);g=0;i=d;return g|0}c[e>>2]=a;sc(0,20032,20056,e);g=0;i=d;return g|0}function me(a){a=a|0;var b=0,c=0;b=i;c=zi(a)|0;i=b;return c|0}function ne(a){a=a|0;var b=0;b=i;Ai(a);i=b;return}function oe(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;d=Bi(a,b)|0;i=c;return d|0}function pe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Li(a|0,b&255|0,c|0)|0;i=d;return}function qe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Qi(a|0,b|0,c|0)|0;i=d;return}function re(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;e=Ei(a,b,c)|0;i=d;return e|0}function se(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;g=c[p>>2]|0;if((a|0)!=0){c[f>>2]=a;$a(g|0,20088,f|0)|0}Za(20104,9,1,g|0)|0;ya(g|0,b|0,d|0)|0;Za(20096,2,1,g|0)|0;i=e;return}function te(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;g=c[p>>2]|0;if((a|0)!=0){c[f>>2]=a;$a(g|0,20088,f|0)|0}ya(g|0,b|0,d|0)|0;Za(20096,2,1,g|0)|0;i=e;return}function ue(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=e;e=c[5018]|0;if((e|0)!=0){kb[e&63](b,d,g)}e=c[5030]|0;if((e|0)==0){i=f;return}ob[e&3](a,b,d,g);i=f;return}function ve(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;i=i+16|0;g=f;h=a+172|0;j=(c[h>>2]|0)+(b<<3)|0;k=c[j>>2]|0;l=c[j+4>>2]|0;j=(k|0)==0&(l|0)==0;if(!j?(m=a+456|0,n=c[m>>2]|0,o=c[m+4>>2]|0,!((n|0)==0&(o|0)==0)):0){p=n;q=o;r=-1;s=-1}else{if((c[a+168>>2]|0)==0){za(20128,20152,668,20168)}o=a+176|0;n=(c[o>>2]|0)+(b<<3)|0;m=c[n>>2]|0;t=c[n+4>>2]|0;if(!((m|0)==0&(t|0)==0|j)?(j=((e|0)<0)<<31>>31,!(t>>>0<j>>>0|(t|0)==(j|0)&m>>>0<e>>>0)):0){m=a+628|0;j=mb[c[a+640>>2]&63](c[m>>2]|0,k,l,0)|0;l=F;k=(c[h>>2]|0)+(b<<3)|0;if((j|0)==(c[k>>2]|0)&(l|0)==(c[k+4>>2]|0)){u=j;v=l}else{l=c[m>>2]|0;c[g>>2]=c[a+444>>2];sc(l,20168,20192,g);w=0;i=f;return w|0}}else{l=mb[c[a+640>>2]&63](c[a+628>>2]|0,0,0,2)|0;m=F;j=(c[h>>2]|0)+(b<<3)|0;c[j>>2]=l;c[j+4>>2]=m;j=a+12|0;c[j>>2]=c[j>>2]|2097152;u=l;v=m}m=a+456|0;l=m;c[l>>2]=u;c[l+4>>2]=v;v=(c[o>>2]|0)+(b<<3)|0;o=v;l=c[o>>2]|0;u=c[o+4>>2]|0;o=v;c[o>>2]=0;c[o+4>>2]=0;o=m;p=c[o>>2]|0;q=c[o+4>>2]|0;r=l;s=u}u=((e|0)<0)<<31>>31;l=Oi(p|0,q|0,e|0,u|0)|0;o=a+12|0;m=(c[o>>2]&524288|0)==0;v=m?l:l;l=m?0:F;if(l>>>0<q>>>0|(l|0)==(q|0)&v>>>0<p>>>0|(l>>>0<u>>>0|(l|0)==(u|0)&v>>>0<e>>>0)){sc(c[a+628>>2]|0,20168,20224,g);w=0;i=f;return w|0}p=a+628|0;if((fb[c[a+636>>2]&31](c[p>>2]|0,d,e)|0)!=(e|0)){d=c[p>>2]|0;c[g>>2]=c[a+444>>2];sc(d,20168,20256,g);w=0;i=f;return w|0}g=a+456|0;c[g>>2]=v;c[g+4>>2]=l;l=(c[a+176>>2]|0)+(b<<3)|0;b=l;a=Oi(c[b>>2]|0,c[b+4>>2]|0,e|0,u|0)|0;u=F;e=l;c[e>>2]=a;c[e+4>>2]=u;if((a|0)==(r|0)&(u|0)==(s|0)){w=1;i=f;return w|0}c[o>>2]=c[o>>2]|2097152;w=1;i=f;return w|0}function we(a){a=a|0;var b=0,d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;d=a+608|0;f=c[d>>2]|0;if((f|0)<=0){g=1;i=b;return g|0}h=a+12|0;j=c[h>>2]|0;if((j&1048576|0)==0){g=1;i=b;return g|0}k=a+588|0;if(((e[a+94>>1]|0|256)&j|0)==0){Xd(c[k>>2]|0,f);l=c[h>>2]|0;m=c[d>>2]|0}else{l=j;m=f}if((ve(a,c[((l&1024|0)==0?a+452|0:a+492|0)>>2]|0,c[k>>2]|0,m)|0)==0){g=0;i=b;return g|0}c[d>>2]=0;c[a+604>>2]=c[k>>2];g=1;i=b;return g|0}function xe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;i=i+16|0;g=f;h=ba(d,b)|0;if((d|0)!=0?((h>>>0)/(d>>>0)|0|0)!=(b|0):0){b=c[a+628>>2]|0;c[g>>2]=e;sc(b,e,20288,g);j=0}else{j=h}i=f;return j|0}function ye(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;i=i+16|0;j=h;k=Yi(e|0,f|0,b|0,d|0)|0;l=F;if(!((e|0)==0&(f|0)==0)?(m=Zi(k|0,l|0,e|0,f|0)|0,!((m|0)==(b|0)&(F|0)==(d|0))):0){d=c[a+628>>2]|0;c[j>>2]=g;sc(d,g,20288,j);n=0;o=0}else{n=l;o=k}F=n;i=h;return o|0}function ze(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;g=i;i=i+16|0;h=g;if(!((d|0)==0|(e|0)==0)?(j=oe(b,ba(e,d)|0)|0,(j|0)!=0):0){k=j;i=g;return k|0}j=c[a+628>>2]|0;b=c[a>>2]|0;c[h>>2]=f;c[h+4>>2]=d;c[h+8>>2]=e;sc(j,b,20312,h);k=0;i=g;return k|0}function Ae(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;i=i+16|0;g=f;if(!((b|0)==0|(d|0)==0)?(h=oe(0,ba(d,b)|0)|0,(h|0)!=0):0){j=h;i=f;return j|0}h=c[a+628>>2]|0;k=c[a>>2]|0;c[g>>2]=e;c[g+4>>2]=b;c[g+8>>2]=d;sc(h,k,20312,g);j=0;i=f;return j|0}function Be(a,d,f){a=a|0;d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;h=i;i=i+16|0;j=h;if((Lb(a,d,f)|0)!=0){k=1;i=h;return k|0}if((d|0)==284){l=b[a+126>>1]|0;m=c[f>>2]|0;n=c[m>>2]|0;c[f>>2]=m+4;b[n>>1]=l;k=1;i=h;return k|0}else if((d|0)==32997){l=c[a+64>>2]|0;n=c[f>>2]|0;m=c[n>>2]|0;c[f>>2]=n+4;c[m>>2]=l;k=1;i=h;return k|0}else if((d|0)==529){l=c[f>>2]|0;m=c[l>>2]|0;c[f>>2]=l+4;c[m>>2]=20384;k=1;i=h;return k|0}else if((d|0)==317){m=c[c[a+576>>2]>>2]&65535;l=c[f>>2]|0;n=c[l>>2]|0;c[f>>2]=l+4;b[n>>1]=m;k=1;i=h;return k|0}else if((d|0)==530){m=b[a+192>>1]|0;n=c[f>>2]|0;l=c[n>>2]|0;c[f>>2]=n+4;b[l>>1]=m;m=b[a+194>>1]|0;l=c[f>>2]|0;n=c[l>>2]|0;c[f>>2]=l+4;b[n>>1]=m;k=1;i=h;return k|0}else if((d|0)==339){m=b[a+86>>1]|0;n=c[f>>2]|0;l=c[n>>2]|0;c[f>>2]=n+4;b[l>>1]=m;k=1;i=h;return k|0}else if((d|0)==258){m=b[a+84>>1]|0;l=c[f>>2]|0;n=c[l>>2]|0;c[f>>2]=l+4;b[n>>1]=m;k=1;i=h;return k|0}else if((d|0)==277){m=b[a+98>>1]|0;n=c[f>>2]|0;l=c[n>>2]|0;c[f>>2]=n+4;b[l>>1]=m;k=1;i=h;return k|0}else if((d|0)==280){m=b[a+104>>1]|0;l=c[f>>2]|0;n=c[l>>2]|0;c[f>>2]=l+4;b[n>>1]=m;k=1;i=h;return k|0}else if((d|0)==334){m=c[f>>2]|0;n=c[m>>2]|0;c[f>>2]=m+4;b[n>>1]=4;k=1;i=h;return k|0}else if((d|0)==32995){if((b[a+156>>1]|0)==1){o=(b[c[a+160>>2]>>1]|0)==1|0}else{o=0}n=c[f>>2]|0;m=c[n>>2]|0;c[f>>2]=n+4;b[m>>1]=o;k=1;i=h;return k|0}else if((d|0)==274){o=b[a+96>>1]|0;m=c[f>>2]|0;n=c[m>>2]|0;c[f>>2]=m+4;b[n>>1]=o;k=1;i=h;return k|0}else if((d|0)==254){o=c[a+80>>2]|0;n=c[f>>2]|0;m=c[n>>2]|0;c[f>>2]=n+4;c[m>>2]=o;k=1;i=h;return k|0}else if((d|0)==296){o=b[a+124>>1]|0;m=c[f>>2]|0;n=c[m>>2]|0;c[f>>2]=m+4;b[n>>1]=o;k=1;i=h;return k|0}else if((d|0)==332){o=c[f>>2]|0;n=c[o>>2]|0;c[f>>2]=o+4;b[n>>1]=1;k=1;i=h;return k|0}else if((d|0)==32998){n=c[a+76>>2]|0;o=c[f>>2]|0;m=c[o>>2]|0;c[f>>2]=o+4;c[m>>2]=n;k=1;i=h;return k|0}else if((d|0)==336){n=c[f>>2]|0;m=c[n>>2]|0;c[f>>2]=n+4;b[m>>1]=0;m=(1<<e[a+84>>1])+65535&65535;n=c[f>>2]|0;o=c[n>>2]|0;c[f>>2]=n+4;b[o>>1]=m;k=1;i=h;return k|0}else if((d|0)==532){m=a+212|0;o=c[m>>2]|0;do{if((o|0)==0){n=me(24)|0;c[m>>2]=n;if((n|0)==0){k=0;i=h;return k|0}if((b[a+90>>1]|0)==6){g[n>>2]=0.0;g[n+20>>2]=255.0;g[n+12>>2]=255.0;g[n+4>>2]=255.0;g[n+16>>2]=128.0;g[n+8>>2]=128.0;p=n;break}else{q=+((1<<e[a+84>>1])+ -1|0);g[n>>2]=0.0;g[n+4>>2]=q;g[n+8>>2]=0.0;g[n+12>>2]=q;g[n+16>>2]=0.0;g[n+20>>2]=q;p=n;break}}else{p=o}}while(0);o=c[f>>2]|0;m=c[o>>2]|0;c[f>>2]=o+4;c[m>>2]=p;k=1;i=h;return k|0}else if((d|0)==318){g[5100]=.3457419276237488;g[20404>>2]=.3585604429244995;p=c[f>>2]|0;m=c[p>>2]|0;c[f>>2]=p+4;c[m>>2]=20400;k=1;i=h;return k|0}else if((d|0)==278){m=c[a+100>>2]|0;p=c[f>>2]|0;o=c[p>>2]|0;c[f>>2]=p+4;c[o>>2]=m;k=1;i=h;return k|0}else if((d|0)==301){m=a+200|0;o=c[m>>2]|0;do{if((o|0)==0){p=a+208|0;c[p>>2]=0;n=a+204|0;c[n>>2]=0;c[m>>2]=0;l=b[a+84>>1]|0;if(!((l&65535)>29)?(r=1<<(l&65535),l=r<<1,s=me(l)|0,c[m>>2]=s,(s|0)!=0):0){b[s>>1]=0;if((r|0)>1){q=+(r|0)+-1.0;t=1;do{b[s+(t<<1)>>1]=~~+P(+(+S(+(+(t|0)/q),2.2)*65535.0+.5));t=t+1|0}while((t|0)!=(r|0))}r=a+98|0;t=a+156|0;if(((e[r>>1]|0)-(e[t>>1]|0)|0)<=1){u=t;v=r;w=s;break}x=me(l)|0;c[n>>2]=x;if((x|0)!=0?(qe(x,c[m>>2]|0,l),x=me(l)|0,c[p>>2]=x,(x|0)!=0):0){qe(x,c[m>>2]|0,l);u=t;v=r;w=c[m>>2]|0;break}r=c[m>>2]|0;if((r|0)!=0){ne(r)}r=c[n>>2]|0;if((r|0)!=0){ne(r)}r=c[p>>2]|0;if((r|0)!=0){ne(r)}c[p>>2]=0;c[n>>2]=0;c[m>>2]=0}sc(c[a+628>>2]|0,c[a>>2]|0,20408,j);k=0;i=h;return k|0}else{u=a+156|0;v=a+98|0;w=o}}while(0);o=c[f>>2]|0;j=c[o>>2]|0;c[f>>2]=o+4;c[j>>2]=w;if(((e[v>>1]|0)-(e[u>>1]|0)|0)<=1){k=1;i=h;return k|0}u=c[a+204>>2]|0;v=c[f>>2]|0;w=c[v>>2]|0;c[f>>2]=v+4;c[w>>2]=u;u=c[a+208>>2]|0;w=c[f>>2]|0;v=c[w>>2]|0;c[f>>2]=w+4;c[v>>2]=u;k=1;i=h;return k|0}else if((d|0)==263){u=b[a+92>>1]|0;v=c[f>>2]|0;w=c[v>>2]|0;c[f>>2]=v+4;b[w>>1]=u;k=1;i=h;return k|0}else if((d|0)==266){u=b[a+94>>1]|0;w=c[f>>2]|0;v=c[w>>2]|0;c[f>>2]=w+4;b[v>>1]=u;k=1;i=h;return k|0}else if((d|0)==32996){u=(e[a+86>>1]|0)+65535&65535;v=c[f>>2]|0;w=c[v>>2]|0;c[f>>2]=v+4;b[w>>1]=u;k=1;i=h;return k|0}else if((d|0)==531){u=b[a+196>>1]|0;w=c[f>>2]|0;v=c[w>>2]|0;c[f>>2]=w+4;b[v>>1]=u;k=1;i=h;return k|0}else if((d|0)==281){u=b[a+106>>1]|0;v=c[f>>2]|0;w=c[v>>2]|0;c[f>>2]=v+4;b[w>>1]=u;k=1;i=h;return k|0}else if((d|0)==338){d=b[a+156>>1]|0;u=c[f>>2]|0;w=c[u>>2]|0;c[f>>2]=u+4;b[w>>1]=d;d=c[a+160>>2]|0;a=c[f>>2]|0;w=c[a>>2]|0;c[f>>2]=a+4;c[w>>2]=d;k=1;i=h;return k|0}else{k=0;i=h;return k|0}return 0}function Ce(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=Be(a,b,f)|0;i=e;return d|0}function De(a,b,c,d,e,f,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0;j=i;k=+(b>>>0)*100.0/255.0;if(k<8.855999946594238){b=a+20|0;l=k*+g[b>>2]/903.2919921875;g[f>>2]=l;m=l/+g[b>>2]*7.7870001792907715+.13793103396892548}else{l=(k+16.0)/116.0;g[f>>2]=l*l*l*+g[a+20>>2];m=l}l=m+ +(c|0)/500.0;k=+g[a+16>>2];if(l<.2069000005722046){n=k*(l+-.1379300057888031)/7.7870001792907715}else{n=l*l*k*l}g[e>>2]=n;n=m- +(d|0)/200.0;m=+g[a+24>>2];if(n<.2069000005722046){o=m*(n+-.1379300057888031)/7.7870001792907715;g[h>>2]=o;i=j;return}else{o=n*n*m*n;g[h>>2]=o;i=j;return}}function Ee(a,b,d,e,f,h,j){a=a|0;b=+b;d=+d;e=+e;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;k=i;l=+g[a+28>>2]*b+ +g[a+32>>2]*d+ +g[a+36>>2]*e;m=+g[a+40>>2]*b+ +g[a+44>>2]*d+ +g[a+48>>2]*e;n=+g[a+52>>2]*b+ +g[a+56>>2]*d+ +g[a+60>>2]*e;e=+g[a+88>>2];d=l>e?l:e;l=+g[a+92>>2];b=m>l?m:l;m=+g[a+96>>2];o=n>m?n:m;n=+g[a+64>>2];p=+g[a+68>>2];q=+g[a+72>>2];r=~~(((d<n?d:n)-e)/+g[a+4>>2]);s=c[a>>2]|0;e=+g[a+(((s|0)<(r|0)?s:r)<<2)+112>>2];n=e;if(e>0.0){t=n+.5}else{t=n+-.5}c[f>>2]=~~t>>>0;r=~~(((b<p?b:p)-l)/+g[a+8>>2]);s=c[a>>2]|0;l=+g[a+(((s|0)<(r|0)?s:r)<<2)+6116>>2];p=l;if(l>0.0){u=p+.5}else{u=p+-.5}c[h>>2]=~~u>>>0;r=~~(((o<q?o:q)-m)/+g[a+12>>2]);s=c[a>>2]|0;m=+g[a+(((s|0)<(r|0)?s:r)<<2)+12120>>2];q=m;if(m>0.0){v=q+.5;w=~~v>>>0;c[j>>2]=w;x=c[f>>2]|0;y=a+76|0;z=c[y>>2]|0;A=x>>>0<z>>>0;B=A?x:z;c[f>>2]=B;C=c[h>>2]|0;D=a+80|0;E=c[D>>2]|0;F=C>>>0<E>>>0;G=F?C:E;c[h>>2]=G;H=c[j>>2]|0;I=a+84|0;J=c[I>>2]|0;K=H>>>0<J>>>0;L=K?H:J;c[j>>2]=L;i=k;return}else{v=q+-.5;w=~~v>>>0;c[j>>2]=w;x=c[f>>2]|0;y=a+76|0;z=c[y>>2]|0;A=x>>>0<z>>>0;B=A?x:z;c[f>>2]=B;C=c[h>>2]|0;D=a+80|0;E=c[D>>2]|0;F=C>>>0<E>>>0;G=F?C:E;c[h>>2]=G;H=c[j>>2]|0;I=a+84|0;J=c[I>>2]|0;K=H>>>0<J>>>0;L=K?H:J;c[j>>2]=L;i=k;return}}function Fe(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0,k=0.0,l=0,m=0.0,n=0.0,o=0,p=0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0,w=0,x=0.0,y=0,z=0,A=0.0,B=0;e=i;c[a>>2]=1500;qe(a+28|0,b,84);f=1.0/+g[a+100>>2];b=a+64|0;h=+g[b>>2];j=a+88|0;k=+g[j>>2];l=c[a>>2]|0;g[a+4>>2]=(h-k)/+(l|0);if((l|0)<0){m=h;n=k;o=l}else{p=a+76|0;q=l;l=0;while(1){g[a+(l<<2)+112>>2]=+((c[p>>2]|0)>>>0)*+S(+(+(l|0)/+(q|0)),+f);q=c[a>>2]|0;if((l|0)>=(q|0)){break}else{l=l+1|0}}m=+g[b>>2];n=+g[j>>2];o=q}f=1.0/+g[a+104>>2];g[a+8>>2]=(m-n)/+(o|0);if((o|0)<0){r=m;s=n;t=o}else{q=a+80|0;l=o;o=0;while(1){g[a+(o<<2)+6116>>2]=+((c[q>>2]|0)>>>0)*+S(+(+(o|0)/+(l|0)),+f);l=c[a>>2]|0;if((o|0)>=(l|0)){break}else{o=o+1|0}}r=+g[b>>2];s=+g[j>>2];t=l}f=1.0/+g[a+108>>2];g[a+12>>2]=(r-s)/+(t|0);if((t|0)<0){u=+g[d>>2];v=a+16|0;g[v>>2]=u;w=d+4|0;x=+g[w>>2];y=a+20|0;g[y>>2]=x;z=d+8|0;A=+g[z>>2];B=a+24|0;g[B>>2]=A;i=e;return 0}l=a+84|0;j=t;t=0;while(1){g[a+(t<<2)+12120>>2]=+((c[l>>2]|0)>>>0)*+S(+(+(t|0)/+(j|0)),+f);j=c[a>>2]|0;if((t|0)>=(j|0)){break}else{t=t+1|0}}u=+g[d>>2];v=a+16|0;g[v>>2]=u;w=d+4|0;x=+g[w>>2];y=a+20|0;g[y>>2]=x;z=d+8|0;A=+g[z>>2];B=a+24|0;g[B>>2]=A;i=e;return 0}function Ge(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;j=i;if((d|0)<0){k=0}else{k=(d|0)>255?255:d}if((e|0)<0){l=0}else{l=(e|0)>255?255:e}e=(c[a+20>>2]|0)+((b>>>0>255?255:b)<<2)|0;b=(c[(c[a+4>>2]|0)+(l<<2)>>2]|0)+(c[e>>2]|0)|0;if((b|0)<0){m=0}else{m=(b|0)>255?255:b}c[f>>2]=m;m=((c[(c[a+12>>2]|0)+(l<<2)>>2]|0)+(c[(c[a+16>>2]|0)+(k<<2)>>2]|0)>>16)+(c[e>>2]|0)|0;if((m|0)<0){n=0}else{n=(m|0)>255?255:m}c[g>>2]=n;n=(c[(c[a+8>>2]|0)+(k<<2)>>2]|0)+(c[e>>2]|0)|0;if((n|0)<0){o=0;c[h>>2]=o;i=j;return}o=(n|0)>255?255:n;c[h>>2]=o;i=j;return}function He(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0,u=0;f=i;pe(b+24|0,0,256);h=b+280|0;c[b>>2]=h;j=0;do{a[h+j|0]=j;j=j+1|0}while((j|0)!=256);pe(h+256|0,255,512);c[b+4>>2]=h+768;c[b+8>>2]=h+1792;c[b+12>>2]=h+2816;c[b+16>>2]=h+3840;c[b+20>>2]=h+4864;k=+g[d>>2];l=2.0-k*2.0;b=~~(l*65536.0+.5);m=+g[d+4>>2];j=0-~~(k*l/m*65536.0+.5)|0;l=+g[d+8>>2];k=2.0-l*2.0;d=~~(k*65536.0+.5);n=~~(l*k/m*65536.0+.5);m=+g[e+16>>2]+-128.0;o=~~m;k=+g[e+20>>2]+-128.0-m;m=k!=0.0?k:1.0;k=+g[e+8>>2]+-128.0;p=~~k;l=+g[e+12>>2]+-128.0-k;k=l!=0.0?l:1.0;l=+g[e>>2];q=~~l;r=+g[e+4>>2]-l;l=r!=0.0?r:1.0;e=0;s=-128;while(1){t=~~(+(s-o|0)*127.0/m);u=~~(+(s-p|0)*127.0/k);c[h+(e+192<<2)>>2]=(ba(t,b)|0)+32768>>16;c[h+(e+448<<2)>>2]=(ba(u,d)|0)+32768>>16;c[h+(e+704<<2)>>2]=ba(t,j)|0;c[h+(e+960<<2)>>2]=32768-(ba(u,n)|0);c[h+(e+1216<<2)>>2]=~~(+(s+128-q|0)*255.0/l);e=e+1|0;if((e|0)==256){break}else{s=s+1|0}}i=f;return 0}function Ie(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20448;sc(p,q,20640,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20448;sc(m,n,20680,e);i=f;return-1}return 0}function Je(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20464;sc(p,q,20640,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20464;sc(m,n,20680,e);i=f;return-1}return 0}function Ke(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20472;sc(p,q,20640,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20472;sc(m,n,20680,e);i=f;return-1}return 0}function Le(a){a=a|0;return 1}function Me(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20448;sc(p,q,20544,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20448;sc(m,n,20584,e);i=f;return-1}return 0}function Ne(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20464;sc(p,q,20544,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20464;sc(m,n,20584,e);i=f;return-1}return 0}function Oe(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;d=b[a+88>>1]|0;g=c[5134]|0;a:do{if((g|0)!=0){h=g;while(1){j=c[h+4>>2]|0;if((b[j+4>>1]|0)==d<<16>>16){break}k=c[h>>2]|0;if((k|0)==0){l=3;break a}else{h=k}}h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){m=h;n=k;l=11}else{o=j;p=h;q=k;l=10}}else{l=3}}while(0);b:do{if((l|0)==3){c:do{if((c[5832]|0)!=0){j=23328;while(1){g=j+12|0;if((b[j+4>>1]|0)==d<<16>>16){break}if((c[g>>2]|0)==0){break c}else{j=g}}o=j;p=c[a+628>>2]|0;q=c[a>>2]|0;l=10;break b}}while(0);m=c[a+628>>2]|0;n=c[a>>2]|0;l=11}}while(0);if((l|0)==10){c[e>>2]=c[o>>2];c[e+4>>2]=20472;sc(p,q,20544,e);i=f;return-1}else if((l|0)==11){c[e>>2]=d&65535;c[e+4>>2]=20472;sc(m,n,20584,e);i=f;return-1}return 0}function Pe(a,b){a=a|0;b=b|0;b=i;i=i+16|0;sc(c[a+628>>2]|0,c[a>>2]|0,20480,b);i=b;return 0}function Qe(a,b){a=a|0;b=b|0;return 1}function Re(a){a=a|0;var b=0;c[a+504>>2]=3;c[a+500>>2]=1;c[a+508>>2]=4;c[a+512>>2]=18;c[a+532>>2]=6;c[a+540>>2]=7;c[a+548>>2]=8;c[a+520>>2]=1;c[a+516>>2]=4;c[a+524>>2]=18;c[a+528>>2]=4;c[a+536>>2]=9;c[a+544>>2]=10;c[a+552>>2]=11;c[a+556>>2]=1;c[a+560>>2]=19;c[a+564>>2]=1;c[a+568>>2]=20;c[a+572>>2]=8;b=a+12|0;c[b>>2]=c[b>>2]&-131329;return}function Se(a){a=a|0;return 1}function Te(a){a=a|0;return}function Ue(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=d&65535;g=c[5134]|0;a:do{if((g|0)==0){h=3}else{j=g;while(1){k=c[j+4>>2]|0;if((b[k+4>>1]|0)==f<<16>>16){l=k;break a}k=c[j>>2]|0;if((k|0)==0){h=3;break}else{j=k}}}}while(0);b:do{if((h|0)==3){if((c[5832]|0)==0){l=0}else{g=23328;while(1){j=g+12|0;if((b[g+4>>1]|0)==f<<16>>16){l=g;break b}if((c[j>>2]|0)==0){l=0;break}else{g=j}}}}}while(0);c[a+504>>2]=3;c[a+500>>2]=1;c[a+508>>2]=4;c[a+512>>2]=18;c[a+532>>2]=6;c[a+540>>2]=7;c[a+548>>2]=8;c[a+520>>2]=1;c[a+516>>2]=4;c[a+524>>2]=18;c[a+528>>2]=4;c[a+536>>2]=9;c[a+544>>2]=10;c[a+552>>2]=11;c[a+556>>2]=1;c[a+560>>2]=19;c[a+564>>2]=1;c[a+568>>2]=20;c[a+572>>2]=8;f=a+12|0;c[f>>2]=c[f>>2]&-131329;if((l|0)==0){m=1;i=e;return m|0}m=nb[c[l+8>>2]&31](a,d)|0;i=e;return m|0}function Ve(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=c[5134]|0;a:do{if((e|0)!=0){f=e;while(1){g=c[f+4>>2]|0;if((b[g+4>>1]|0)==a<<16>>16){h=g;break}f=c[f>>2]|0;if((f|0)==0){break a}}i=d;return h|0}}while(0);if((c[5832]|0)==0){h=0;i=d;return h|0}else{j=23328}while(1){e=j+12|0;if((b[j+4>>1]|0)==a<<16>>16){h=j;k=7;break}if((c[e>>2]|0)==0){h=0;k=7;break}else{j=e}}if((k|0)==7){i=d;return h|0}return 0}function We(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,hb=0,ib=0,kb=0,lb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Lb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0.0,bc=0,cc=0,dc=0,ec=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0;k=i;i=i+96|0;l=k+32|0;m=k+76|0;n=k+24|0;o=k+72|0;p=k+84|0;q=k+68|0;r=k+16|0;s=k+8|0;t=k;u=k+64|0;v=k+82|0;w=k+60|0;x=k+56|0;y=k+80|0;z=k+52|0;A=k+48|0;B=k+44|0;C=k+40|0;if((c[d+8>>2]|0)==0){D=1;i=k;return D|0}fc(d)|0;E=(h|0)!=0;h=d+12|0;if(E){G=c[h>>2]|0;if((G&4096|0)!=0?(c[h>>2]=G&-4097,(jb[c[d+528>>2]&31](d)|0)==0):0){sc(c[d+628>>2]|0,21496,21352,l);D=0;i=k;return D|0}gb[c[d+556>>2]&15](d);G=d+608|0;if(((c[G>>2]|0)>0?(c[h>>2]&64|0)!=0:0)?(we(d)|0)==0:0){sc(c[d+628>>2]|0,21496,21400,l);D=0;i=k;return D|0}H=c[h>>2]|0;if((H&512|0)!=0?(I=d+588|0,J=c[I>>2]|0,(J|0)!=0):0){ne(J);c[G>>2]=0;c[I+0>>2]=0;c[I+4>>2]=0;c[I+8>>2]=0;c[I+12>>2]=0;K=c[h>>2]|0}else{K=H}c[h>>2]=K&-81}K=(f|0)!=0;f=d+40|0;H=d+156|0;I=d+44|0;G=d+184|0;J=d+464|0;L=d+188|0;M=d+472|0;N=d+480|0;O=d+660|0;P=d+656|0;Q=d+216|0;R=d+220|0;S=d+84|0;T=d+98|0;U=d+200|0;V=d+208|0;W=d+204|0;X=d+212|0;Y=d+196|0;Z=d+192|0;_=d+152|0;$=d+76|0;aa=d+64|0;ba=d+112|0;ca=d+108|0;da=d+86|0;ea=d+140|0;fa=d+144|0;ga=d+148|0;ha=d+168|0;ia=d+172|0;ja=d+176|0;ka=d+136|0;la=d+124|0;ma=d+126|0;na=d+106|0;oa=d+104|0;pa=d+100|0;qa=d+96|0;ra=d+94|0;sa=d+92|0;ta=d+90|0;ua=d+88|0;va=d+80|0;wa=d+128|0;xa=d+132|0;ya=d+116|0;Aa=d+120|0;Ba=d+68|0;Ca=d+72|0;Da=d+56|0;Ea=d+60|0;Fa=d+224|0;Ga=d+16|0;Ha=d+640|0;Ia=d+628|0;Ja=d+432|0;Ka=d+636|0;La=d+632|0;Ma=d+428|0;Na=(j|0)==0;Oa=d+448|0;Pa=d+228|0;Qa=0;Ra=0;a:while(1){c[u>>2]=0;if(K){do{if((c[f>>2]&2|0)!=0){Sa=c[Da>>2]|0;Ta=(Qa|0)==0;if(!Ta){if(Sa>>>0<65536){b[l>>1]=Sa;if((c[h>>2]&128|0)!=0){Nd(l)}Ua=bf(d,u,Qa,256,3,1,2,l)|0}else{c[l>>2]=Sa;if((c[h>>2]&128|0)!=0){Od(l)}Ua=bf(d,u,Qa,256,4,1,4,l)|0}if((Ua|0)==0){Va=Qa;Wa=598;break a}Sa=c[Ea>>2]|0;if(!Ta){if(Sa>>>0<65536){b[l>>1]=Sa;if((c[h>>2]&128|0)!=0){Nd(l)}Xa=bf(d,u,Qa,257,3,1,2,l)|0}else{c[l>>2]=Sa;if((c[h>>2]&128|0)!=0){Od(l)}Xa=bf(d,u,Qa,257,4,1,4,l)|0}if((Xa|0)==0){Va=Qa;Wa=598;break a}else{break}}}else{c[u>>2]=1}c[u>>2]=(c[u>>2]|0)+1}}while(0);do{if((c[f>>2]&4|0)!=0){Sa=c[Ba>>2]|0;Ta=(Qa|0)==0;if(!Ta){if(Sa>>>0<65536){b[l>>1]=Sa;if((c[h>>2]&128|0)!=0){Nd(l)}Ya=bf(d,u,Qa,322,3,1,2,l)|0}else{c[l>>2]=Sa;if((c[h>>2]&128|0)!=0){Od(l)}Ya=bf(d,u,Qa,322,4,1,4,l)|0}if((Ya|0)==0){Va=Qa;Wa=598;break a}Sa=c[Ca>>2]|0;if(!Ta){if(Sa>>>0<65536){b[l>>1]=Sa;if((c[h>>2]&128|0)!=0){Nd(l)}Za=bf(d,u,Qa,323,3,1,2,l)|0}else{c[l>>2]=Sa;if((c[h>>2]&128|0)!=0){Od(l)}Za=bf(d,u,Qa,323,4,1,4,l)|0}if((Za|0)==0){Va=Qa;Wa=598;break a}else{break}}}else{c[u>>2]=(c[u>>2]|0)+1}c[u>>2]=(c[u>>2]|0)+1}}while(0);Sa=c[f>>2]|0;if((Sa&8|0)==0){_a=Sa}else{if((Ze(d,u,Qa,282,+g[ya>>2])|0)==0){Va=Qa;Wa=598;break}if((Ze(d,u,Qa,283,+g[Aa>>2])|0)==0){Va=Qa;Wa=598;break}_a=c[f>>2]|0}if((_a&16|0)==0){$a=_a}else{if((Ze(d,u,Qa,286,+g[wa>>2])|0)==0){Va=Qa;Wa=598;break}if((Ze(d,u,Qa,287,+g[xa>>2])|0)==0){Va=Qa;Wa=598;break}$a=c[f>>2]|0}do{if(($a&32|0)==0){ab=$a}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;ab=$a;break}c[l>>2]=c[va>>2];if((c[h>>2]&128|0)!=0){Od(l)}if((bf(d,u,Qa,254,4,1,4,l)|0)==0){Va=Qa;Wa=598;break a}ab=c[f>>2]|0}}while(0);do{if((ab&64|0)==0){bb=ab}else{Sa=b[S>>1]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;bb=ab;break}Ta=me(e[T>>1]<<1)|0;if((Ta|0)==0){Wa=78;break a}if((b[T>>1]|0)==0){cb=0}else{db=Ta;eb=0;while(1){b[db>>1]=Sa;hb=eb+1<<16>>16;ib=b[T>>1]|0;if((hb&65535)<(ib&65535)){db=db+2|0;eb=hb}else{cb=ib;break}}}eb=cb&65535;if((c[h>>2]&128|0)!=0){Qd(Ta,eb)}db=bf(d,u,Qa,258,3,eb,eb<<1,Ta)|0;ne(Ta);if((db|0)==0){Va=Qa;Wa=598;break a}bb=c[f>>2]|0}}while(0);do{if((bb&128|0)==0){kb=bb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;kb=bb;break}b[l>>1]=b[ua>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,259,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}kb=c[f>>2]|0}}while(0);do{if((kb&256|0)==0){lb=kb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;lb=kb;break}b[l>>1]=b[ta>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,262,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}lb=c[f>>2]|0}}while(0);do{if((lb&512|0)==0){nb=lb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;nb=lb;break}b[l>>1]=b[sa>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,263,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}nb=c[f>>2]|0}}while(0);do{if((nb&1024|0)==0){ob=nb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;ob=nb;break}b[l>>1]=b[ra>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,266,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}ob=c[f>>2]|0}}while(0);do{if((ob&32768|0)==0){pb=ob}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;pb=ob;break}b[l>>1]=b[qa>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,274,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}pb=c[f>>2]|0}}while(0);do{if((pb&65536|0)==0){qb=pb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;qb=pb;break}b[l>>1]=b[T>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,277,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}qb=c[f>>2]|0}}while(0);do{if((qb&131072|0)==0){rb=qb}else{db=c[pa>>2]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;rb=qb;break}if(db>>>0<65536){b[l>>1]=db;if((c[h>>2]&128|0)!=0){Nd(l)}sb=bf(d,u,Qa,278,3,1,2,l)|0}else{c[l>>2]=db;if((c[h>>2]&128|0)!=0){Od(l)}sb=bf(d,u,Qa,278,4,1,4,l)|0}if((sb|0)==0){Va=Qa;Wa=598;break a}rb=c[f>>2]|0}}while(0);do{if((rb&262144|0)==0){tb=rb}else{db=b[oa>>1]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;tb=rb;break}eb=me(e[T>>1]<<1)|0;if((eb|0)==0){Wa=143;break a}if((b[T>>1]|0)==0){ub=0}else{Sa=eb;ib=0;while(1){b[Sa>>1]=db;hb=ib+1<<16>>16;vb=b[T>>1]|0;if((hb&65535)<(vb&65535)){Sa=Sa+2|0;ib=hb}else{ub=vb;break}}}ib=ub&65535;if((c[h>>2]&128|0)!=0){Qd(eb,ib)}Sa=bf(d,u,Qa,280,3,ib,ib<<1,eb)|0;ne(eb);if((Sa|0)==0){Va=Qa;Wa=598;break a}tb=c[f>>2]|0}}while(0);do{if((tb&524288|0)==0){wb=tb}else{Sa=b[na>>1]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;wb=tb;break}ib=me(e[T>>1]<<1)|0;if((ib|0)==0){Wa=154;break a}if((b[T>>1]|0)==0){xb=0}else{db=ib;Ta=0;while(1){b[db>>1]=Sa;vb=Ta+1<<16>>16;hb=b[T>>1]|0;if((vb&65535)<(hb&65535)){db=db+2|0;Ta=vb}else{xb=hb;break}}}Ta=xb&65535;if((c[h>>2]&128|0)!=0){Qd(ib,Ta)}db=bf(d,u,Qa,281,3,Ta,Ta<<1,ib)|0;ne(ib);if((db|0)==0){Va=Qa;Wa=598;break a}wb=c[f>>2]|0}}while(0);do{if((wb&1048576|0)==0){yb=wb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;yb=wb;break}b[l>>1]=b[ma>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,284,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}yb=c[f>>2]|0}}while(0);do{if((yb&4194304|0)==0){zb=yb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;zb=yb;break}b[l>>1]=b[la>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,296,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}zb=c[f>>2]|0}}while(0);do{if((zb&8388608|0)==0){Ab=zb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Ab=zb;break}if((c[h>>2]&128|0)!=0){Qd(ka,2)}if((bf(d,u,Qa,297,3,2,4,ka)|0)==0){Va=Qa;Wa=598;break a}Ab=c[f>>2]|0}}while(0);do{if((Ab&16777216|0)!=0){db=c[ha>>2]|0;Ta=c[ja>>2]|0;if((c[h>>2]&1024|0)==0){if((_e(d,u,Qa,279,db,Ta)|0)==0){Va=Qa;Wa=598;break a}else{break}}else{if((_e(d,u,Qa,325,db,Ta)|0)==0){Va=Qa;Wa=598;break a}else{break}}}}while(0);do{if((c[f>>2]&33554432|0)!=0){Ta=c[ha>>2]|0;db=c[ia>>2]|0;if((c[h>>2]&1024|0)==0){if((_e(d,u,Qa,273,Ta,db)|0)==0){Va=Qa;Wa=598;break a}else{break}}else{if((_e(d,u,Qa,324,Ta,db)|0)==0){Va=Qa;Wa=598;break a}else{break}}}}while(0);db=c[f>>2]|0;do{if((db&67108864|0)==0){Bb=db}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Bb=db;break}Ta=e[S>>1]|0;Sa=1<<Ta;eb=3<<Ta;Ta=eb<<1;hb=me(Ta)|0;if((hb|0)==0){Wa=193;break a}vb=Sa<<1;qe(hb,c[ea>>2]|0,vb);qe(hb+(Sa<<1)|0,c[fa>>2]|0,vb);qe(hb+(vb<<1)|0,c[ga>>2]|0,vb);if(!((eb|0)>-1)){Wa=195;break a}if((c[h>>2]&128|0)!=0){Qd(hb,eb)}vb=bf(d,u,Qa,320,3,eb,Ta,hb)|0;ne(hb);if((vb|0)==0){Va=Qa;Wa=598;break a}Bb=c[f>>2]|0}}while(0);do{if((Bb|0)<0?(b[H>>1]|0)!=0:0){c[l>>2]=v;c[l+4>>2]=w;Ce(d,338,l)|0;db=e[v>>1]|0;vb=c[w>>2]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;break}if((c[h>>2]&128|0)!=0){Qd(vb,db)}if((bf(d,u,Qa,338,3,db,db<<1,vb)|0)==0){Va=Qa;Wa=598;break a}}}while(0);vb=c[I>>2]|0;do{if((vb&1|0)==0){Cb=vb}else{db=b[da>>1]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Cb=vb;break}hb=me(e[T>>1]<<1)|0;if((hb|0)==0){Wa=212;break a}if((b[T>>1]|0)==0){Db=0}else{Ta=hb;eb=0;while(1){b[Ta>>1]=db;Sa=eb+1<<16>>16;Eb=b[T>>1]|0;if((Sa&65535)<(Eb&65535)){Ta=Ta+2|0;eb=Sa}else{Db=Eb;break}}}eb=Db&65535;if((c[h>>2]&128|0)!=0){Qd(hb,eb)}Ta=bf(d,u,Qa,339,3,eb,eb<<1,hb)|0;ne(hb);if((Ta|0)==0){Va=Qa;Wa=598;break a}Cb=c[I>>2]|0}}while(0);if((Cb&2|0)==0){Fb=Cb}else{if(($e(d,u,Qa,340,e[T>>1]|0,c[ca>>2]|0)|0)==0){Va=Qa;Wa=598;break}Fb=c[I>>2]|0}if((Fb&4|0)==0){Gb=Fb}else{if(($e(d,u,Qa,341,e[T>>1]|0,c[ba>>2]|0)|0)==0){Va=Qa;Wa=598;break}Gb=c[I>>2]|0}do{if((Gb&8|0)==0){Hb=Gb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Hb=Gb;break}c[l>>2]=c[aa>>2];if((c[h>>2]&128|0)!=0){Od(l)}if((bf(d,u,Qa,-32539,4,1,4,l)|0)==0){Va=Qa;Wa=598;break a}Hb=c[I>>2]|0}}while(0);do{if((Hb&16|0)==0){Ib=Hb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Ib=Hb;break}c[l>>2]=c[$>>2];if((c[h>>2]&128|0)!=0){Od(l)}if((bf(d,u,Qa,-32538,4,1,4,l)|0)==0){Va=Qa;Wa=598;break a}Ib=c[I>>2]|0}}while(0);do{if((Ib&32|0)==0){Jb=Ib}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Jb=Ib;break}if((c[h>>2]&128|0)!=0){Qd(_,2)}if((bf(d,u,Qa,321,3,2,4,_)|0)==0){Va=Qa;Wa=598;break a}Jb=c[I>>2]|0}}while(0);do{if((Jb&128|0)==0){Lb=Jb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Lb=Jb;break}if((c[h>>2]&128|0)!=0){Qd(Z,2)}if((bf(d,u,Qa,530,3,2,4,Z)|0)==0){Va=Qa;Wa=598;break a}Lb=c[I>>2]|0}}while(0);do{if((Lb&256|0)==0){Ob=Lb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Ob=Lb;break}b[l>>1]=b[Y>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,531,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}Ob=c[I>>2]|0}}while(0);if((Ob&512|0)==0){Pb=Ob}else{if((af(d,u,Qa,532,6,c[X>>2]|0)|0)==0){Va=Qa;Wa=598;break}Pb=c[I>>2]|0}do{if((Pb&4096|0)==0){Qb=Pb}else{if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Qb=Pb;break}vb=e[S>>1]|0;Ta=1<<vb;eb=(e[T>>1]|0)-(e[H>>1]|0)|0;db=(eb&65532)>>>0>3?3:eb&65535;if(db<<16>>16==3){eb=(re(c[U>>2]|0,c[V>>2]|0,Ta<<1)|0)==0;Rb=eb?2:3}else{Rb=db}if(Rb<<16>>16==2){db=(re(c[U>>2]|0,c[W>>2]|0,Ta<<1)|0)==0;Sb=db?1:2}else{Sb=Rb}db=Sb<<16>>16==0?1:Sb;eb=(db&65535)<<vb;vb=eb<<1;ib=me(vb)|0;if((ib|0)==0){Wa=270;break a}Eb=Ta<<1;qe(ib,c[U>>2]|0,Eb);if((db&65535)>1?(qe(ib+(Ta<<1)|0,c[W>>2]|0,Eb),(db&65535)>2):0){qe(ib+(Eb<<1)|0,c[V>>2]|0,Eb)}if(!((eb|0)>-1)){Wa=275;break a}if((c[h>>2]&128|0)!=0){Qd(ib,eb)}Eb=bf(d,u,Qa,301,3,eb,vb,ib)|0;ne(ib);if((Eb|0)==0){Va=Qa;Wa=598;break a}Qb=c[I>>2]|0}}while(0);do{if((Qb&16384|0)==0){Tb=Qb}else{Eb=c[Q>>2]|0;if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;Tb=Qb;break}if((bf(d,u,Qa,333,2,Eb,Eb,c[R>>2]|0)|0)==0){Ub=Qa;break a}Tb=c[I>>2]|0}}while(0);do{if((Tb&131072|0)!=0?(Eb=b[G>>1]|0,ib=Eb&65535,!(Eb<<16>>16==0)):0){if((Qa|0)==0){c[u>>2]=(c[u>>2]|0)+1;break}Eb=J;vb=c[Eb>>2]|0;eb=c[Eb+4>>2]|0;Eb=c[h>>2]|0;if((Eb&524288|0)==0){db=me(ib<<2)|0;if((db|0)==0){Wa=291;break a}Ta=b[G>>1]|0;if(Ta<<16>>16==0){Vb=0}else{Sa=0;Wb=c[L>>2]|0;Xb=db;while(1){if((Wb|0)==0){Wa=295;break a}Yb=Wb;Zb=c[Yb>>2]|0;_b=c[Yb+4>>2]|0;if(!(_b>>>0<1|(_b|0)==1&Zb>>>0<0)){Wa=297;break a}c[Xb>>2]=Zb;Zb=Sa+1<<16>>16;if((Zb&65535)<(Ta&65535)){Sa=Zb;Wb=Wb+8|0;Xb=Xb+4|0}else{Vb=Ta;break}}}Ta=Vb&65535;if((c[h>>2]&128|0)!=0){Sd(db,Ta)}Xb=bf(d,u,Qa,330,13,Ta,Ta<<2,db)|0;ne(db);$b=Xb}else{Xb=c[L>>2]|0;if((Eb&128|0)!=0){Td(Xb,ib)}$b=bf(d,u,Qa,330,18,ib,ib<<3,Xb)|0}if(($b|0)==0){Va=Qa;Wa=598;break a}c[h>>2]=c[h>>2]|8192;Xb=b[G>>1]|0;b[M>>1]=Xb;if(Xb<<16>>16==1){Xb=N;c[Xb>>2]=0;c[Xb+4>>2]=0;break}else{Xb=N;c[Xb>>2]=vb;c[Xb+4>>2]=eb;break}}}while(0);if((c[O>>2]|0)!=0){Xb=(Qa|0)==0;Ta=0;do{Wb=c[(c[P>>2]|0)+(Ta<<2)>>2]|0;Sa=b[Wb+24>>1]|0;hb=Sa&65535;do{if((Sa&65535)>65?(c[d+(hb>>>5<<2)+40>>2]&1<<(hb&31)|0)!=0:0){Zb=c[Wb+20>>2]|0;if((Zb|0)==4){if((c[Wb+8>>2]|0)!=3){Wa=324;break a}if((b[Wb+4>>1]|0)!=1){Wa=326;break a}if((a[Wb+27|0]|0)!=0){Wa=328;break a}_b=c[Wb>>2]|0;c[l>>2]=y;Kb(d,_b,l)|0;_b=c[Wb>>2]&65535;if(Xb){c[u>>2]=(c[u>>2]|0)+1;break}b[l>>1]=b[y>>1]|0;if((c[h>>2]&128|0)!=0){Nd(l)}if((bf(d,u,Qa,_b,3,1,2,l)|0)==0){Va=Qa;Wa=598;break a}else{break}}else if((Zb|0)==40){if((c[Wb+8>>2]|0)!=7){Wa=346;break a}if(!((b[Wb+4>>1]|0)==-3)){Wa=348;break a}if((a[Wb+27|0]|0)!=1){Wa=350;break a}_b=c[Wb>>2]|0;c[l>>2]=A;c[l+4>>2]=B;Kb(d,_b,l)|0;_b=c[A>>2]|0;if(!Xb){if((bf(d,u,Qa,c[Wb>>2]&65535,7,_b,_b,c[B>>2]|0)|0)==0){Ub=Qa;break a}else{break}}else{c[u>>2]=(c[u>>2]|0)+1;break}}else if((Zb|0)==6){if((c[Wb+8>>2]|0)!=4){Wa=335;break a}if((b[Wb+4>>1]|0)!=1){Wa=337;break a}if((a[Wb+27|0]|0)!=0){Wa=339;break a}_b=c[Wb>>2]|0;c[l>>2]=z;Kb(d,_b,l)|0;_b=c[Wb>>2]&65535;if(Xb){c[u>>2]=(c[u>>2]|0)+1;break}c[l>>2]=c[z>>2];if((c[h>>2]&128|0)!=0){Od(l)}if((bf(d,u,Qa,_b,4,1,4,l)|0)==0){Va=Qa;Wa=598;break a}else{break}}else if((Zb|0)==1){if((c[Wb+8>>2]|0)!=2){Wa=315;break a}if(!((b[Wb+4>>1]|0)==-1)){Wa=317;break a}if((a[Wb+27|0]|0)!=0){Wa=319;break a}Zb=c[Wb>>2]|0;c[l>>2]=x;Kb(d,Zb,l)|0;Zb=c[x>>2]|0;_b=Ni(Zb|0)|0;if(!Xb){if((bf(d,u,Qa,c[Wb>>2]&65535,2,_b,_b,Zb)|0)==0){Ub=Qa;break a}else{break}}else{c[u>>2]=(c[u>>2]|0)+1;break}}else{Wa=354;break a}}}while(0);Ta=Ta+1|0}while(Ta>>>0<(c[O>>2]|0)>>>0)}}b:do{if((c[Fa>>2]|0)!=0){Ta=(Qa|0)==0;Xb=0;while(1){Wb=c[Pa>>2]|0;hb=c[Wb+(Xb*12|0)>>2]|0;c:do{switch(c[hb+8>>2]|0){case 9:{Sa=c[hb>>2]&65535;eb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(eb>>>0<1073741824)){Wa=395;break a}if((c[h>>2]&128|0)!=0){Sd(vb,eb)}if((bf(d,u,Qa,Sa,9,eb,eb<<2,vb)|0)==0){Va=Qa;Wa=598;break a}break};case 4:{vb=c[hb>>2]&65535;eb=c[Wb+(Xb*12|0)+4>>2]|0;Sa=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(eb>>>0<1073741824)){Wa=388;break a}if((c[h>>2]&128|0)!=0){Sd(Sa,eb)}if((bf(d,u,Qa,vb,4,eb,eb<<2,Sa)|0)==0){Va=Qa;Wa=598;break a}break};case 16:{Sa=c[hb>>2]&65535;eb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(eb>>>0<536870912)){Wa=402;break a}ib=c[h>>2]|0;if((ib&524288|0)==0){Wa=404;break a}if((ib&128|0)!=0){Td(vb,eb)}if((bf(d,u,Qa,Sa,16,eb,eb<<3,vb)|0)==0){Va=Qa;Wa=598;break a}break};case 5:{if((af(d,u,Qa,c[hb>>2]&65535,c[Wb+(Xb*12|0)+4>>2]|0,c[Wb+(Xb*12|0)+8>>2]|0)|0)==0){Va=Qa;Wa=598;break a}break};case 17:{vb=c[hb>>2]&65535;eb=c[Wb+(Xb*12|0)+4>>2]|0;Sa=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(eb>>>0<536870912)){Wa=411;break a}ib=c[h>>2]|0;if((ib&524288|0)==0){Wa=413;break a}if((ib&128|0)!=0){Td(Sa,eb)}if((bf(d,u,Qa,vb,17,eb,eb<<3,Sa)|0)==0){Va=Qa;Wa=598;break a}break};case 10:{Sa=c[hb>>2]&65535;eb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}ib=eb<<1;Eb=eb<<3;db=me(Eb)|0;if((db|0)==0){Wa=422;break a}if((eb|0)!=0){Zb=vb;vb=db;_b=0;while(1){ac=+g[Zb>>2];Yb=~~ac;bc=ac==+(Yb|0);do{if(ac<0.0){if(bc){c[vb>>2]=Yb;c[vb+4>>2]=1;break}if(ac>-1.0){c[vb>>2]=0-~~(ac*-2147483648.0);c[vb+4>>2]=2147483647;break}else{c[vb>>2]=-2147483647;c[vb+4>>2]=~~(2147483648.0/-ac);break}}else{if(bc){c[vb>>2]=Yb;c[vb+4>>2]=1;break}if(ac<1.0){c[vb>>2]=~~(ac*2147483648.0);c[vb+4>>2]=2147483647;break}else{c[vb>>2]=2147483647;c[vb+4>>2]=~~(2147483648.0/ac);break}}}while(0);_b=_b+1|0;if((_b|0)==(eb|0)){break}else{Zb=Zb+4|0;vb=vb+8|0}}}if((c[h>>2]&128|0)!=0){Sd(db,ib)}vb=bf(d,u,Qa,Sa,10,eb,Eb,db)|0;ne(db);if((vb|0)==0){Va=Qa;Wa=598;break a}break};case 13:{vb=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;_b=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(Zb>>>0<1073741824)){Wa=455;break a}if((c[h>>2]&128|0)!=0){Sd(_b,Zb)}if((bf(d,u,Qa,vb,13,Zb,Zb<<2,_b)|0)==0){Va=Qa;Wa=598;break a}break};case 11:{_b=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(Zb>>>0<1073741824)){Wa=441;break a}if((c[h>>2]&128|0)!=0){Ud(vb,Zb)}if((bf(d,u,Qa,_b,11,Zb,Zb<<2,vb)|0)==0){Va=Qa;Wa=598;break a}break};case 12:{vb=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;_b=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!(Zb>>>0<536870912)){Wa=448;break a}if((c[h>>2]&128|0)!=0){Vd(_b,Zb)}if((bf(d,u,Qa,vb,12,Zb,Zb<<3,_b)|0)==0){Va=Qa;Wa=598;break a}break};case 2:{_b=c[Wb+(Xb*12|0)+4>>2]|0;if(!Ta){if((bf(d,u,Qa,c[hb>>2]&65535,2,_b,_b,c[Wb+(Xb*12|0)+8>>2]|0)|0)==0){Ub=Qa;break a}else{break c}}else{c[u>>2]=(c[u>>2]|0)+1;break c}break};case 7:{_b=c[Wb+(Xb*12|0)+4>>2]|0;if(!Ta){if((bf(d,u,Qa,c[hb>>2]&65535,7,_b,_b,c[Wb+(Xb*12|0)+8>>2]|0)|0)==0){Ub=Qa;break a}else{break c}}else{c[u>>2]=(c[u>>2]|0)+1;break c}break};case 6:{_b=c[Wb+(Xb*12|0)+4>>2]|0;if(!Ta){if((bf(d,u,Qa,c[hb>>2]&65535,6,_b,_b,c[Wb+(Xb*12|0)+8>>2]|0)|0)==0){Ub=Qa;break a}else{break c}}else{c[u>>2]=(c[u>>2]|0)+1;break c}break};case 3:{_b=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!((Zb|0)>-1)){Wa=374;break a}if((c[h>>2]&128|0)!=0){Qd(vb,Zb)}if((bf(d,u,Qa,_b,3,Zb,Zb<<1,vb)|0)==0){Va=Qa;Wa=598;break a}break};case 1:{vb=c[Wb+(Xb*12|0)+4>>2]|0;if(!Ta){if((bf(d,u,Qa,c[hb>>2]&65535,1,vb,vb,c[Wb+(Xb*12|0)+8>>2]|0)|0)==0){Ub=Qa;break a}else{break c}}else{c[u>>2]=(c[u>>2]|0)+1;break c}break};case 8:{vb=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;_b=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}if(!((Zb|0)>-1)){Wa=381;break a}if((c[h>>2]&128|0)!=0){Qd(_b,Zb)}if((bf(d,u,Qa,vb,8,Zb,Zb<<1,_b)|0)==0){Va=Qa;Wa=598;break a}break};case 18:{_b=c[hb>>2]&65535;Zb=c[Wb+(Xb*12|0)+4>>2]|0;vb=c[Wb+(Xb*12|0)+8>>2]|0;if(Ta){c[u>>2]=(c[u>>2]|0)+1;break c}Yb=c[h>>2]|0;if((Yb&524288|0)==0){bc=Zb<<2;cc=me(bc)|0;if((cc|0)==0){Wa=469;break a}if((Zb|0)!=0){dc=vb;ec=0;gc=cc;while(1){hc=dc;ic=c[hc>>2]|0;jc=c[hc+4>>2]|0;if(jc>>>0>0|(jc|0)==0&ic>>>0>4294967295){Wa=471;break a}c[gc>>2]=ic;ec=ec+1|0;if(!(ec>>>0<Zb>>>0)){break}else{dc=dc+8|0;gc=gc+4|0}}if(!(Zb>>>0<1073741824)){Wa=474;break a}}if((c[h>>2]&128|0)!=0){Sd(cc,Zb)}gc=bf(d,u,Qa,_b,13,Zb,bc,cc)|0;ne(cc);kc=gc}else{if(!(Zb>>>0<536870912)){Wa=463;break a}if((Yb&128|0)!=0){Td(vb,Zb)}kc=bf(d,u,Qa,_b,18,Zb,Zb<<3,vb)|0}if((kc|0)==0){Va=Qa;Wa=598;break a}break};default:{Wa=479;break a}}}while(0);Xb=Xb+1|0;if(!(Xb>>>0<(c[Fa>>2]|0)>>>0)){break b}}}}while(0);if((Qa|0)!=0){Wa=551;break}lc=me((c[u>>2]|0)*24|0)|0;if((lc|0)==0){Wa=483;break}do{if(K){Xb=Ga;if((c[Xb>>2]|0)==0&(c[Xb+4>>2]|0)==0){Xb=mb[c[Ha>>2]&63](c[Ia>>2]|0,0,0,2)|0;Ta=Oi(Xb|0,F|0,1,0)|0;Xb=F;Wb=Ta&-2;Ta=Ga;c[Ta>>2]=Wb;c[Ta+4>>2]=Xb;Ta=c[h>>2]|0;hb=(Ta&524288|0)!=0;if((Ta&8192|0)!=0){if(hb){gc=n;c[gc>>2]=Wb;c[gc+4>>2]=Xb;if((Ta&128|0)!=0){Pd(n)}gc=N;mb[c[Ha>>2]&63](c[Ia>>2]|0,c[gc>>2]|0,c[gc+4>>2]|0,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,n,8)|0)!=8){Wa=498;break a}gc=(b[M>>1]|0)+ -1<<16>>16;b[M>>1]=gc;if(gc<<16>>16==0){c[h>>2]=c[h>>2]&-8193;break}else{gc=N;dc=Oi(c[gc>>2]|0,c[gc+4>>2]|0,8,0)|0;gc=N;c[gc>>2]=dc;c[gc+4>>2]=F;break}}else{c[m>>2]=Wb;if((Ta&128|0)!=0){Od(m)}gc=N;mb[c[Ha>>2]&63](c[Ia>>2]|0,c[gc>>2]|0,c[gc+4>>2]|0,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,m,4)|0)!=4){Wa=491;break a}gc=(b[M>>1]|0)+ -1<<16>>16;b[M>>1]=gc;if(gc<<16>>16==0){c[h>>2]=c[h>>2]&-8193;break}else{gc=N;dc=Oi(c[gc>>2]|0,c[gc+4>>2]|0,4,0)|0;gc=N;c[gc>>2]=dc;c[gc+4>>2]=F;break}}}if(!hb){c[o>>2]=Wb;if((Ta&128|0)!=0){Od(o)}hb=c[Ma>>2]|0;if((hb|0)==0){c[Ma>>2]=c[Ga>>2];mb[c[Ha>>2]&63](c[Ia>>2]|0,4,0,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,o,4)|0)==4){break}else{Wa=507;break a}}else{mc=hb}do{hb=mb[c[Ha>>2]&63](c[Ia>>2]|0,mc,0,0)|0;if(!((hb|0)==(mc|0)&(F|0)==0)){Wa=510;break a}if((fb[c[La>>2]&31](c[Ia>>2]|0,p,2)|0)!=2){Wa=510;break a}if((c[h>>2]&128|0)!=0){Nd(p)}nc=mc+2|0;mb[c[Ha>>2]&63](c[Ia>>2]|0,((e[p>>1]|0)*12|0)+nc|0,0,0)|0;if((fb[c[La>>2]&31](c[Ia>>2]|0,q,4)|0)!=4){Wa=514;break a}if((c[h>>2]&128|0)!=0){Od(q)}mc=c[q>>2]|0}while((mc|0)!=0);mb[c[Ha>>2]&63](c[Ia>>2]|0,((e[p>>1]|0)*12|0)+nc|0,0,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,o,4)|0)==4){break}else{Wa=519;break a}}hb=r;c[hb>>2]=Wb;c[hb+4>>2]=Xb;if((Ta&128|0)!=0){Pd(r)}hb=Ja;gc=c[hb>>2]|0;dc=c[hb+4>>2]|0;if((gc|0)==0&(dc|0)==0){hb=Ga;ec=c[hb+4>>2]|0;db=Ja;c[db>>2]=c[hb>>2];c[db+4>>2]=ec;mb[c[Ha>>2]&63](c[Ia>>2]|0,8,0,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,r,8)|0)==8){break}else{Wa=524;break a}}else{oc=gc;pc=dc}do{dc=mb[c[Ha>>2]&63](c[Ia>>2]|0,oc,pc,0)|0;if(!((dc|0)==(oc|0)&(F|0)==(pc|0))){Wa=527;break a}if((fb[c[La>>2]&31](c[Ia>>2]|0,s,8)|0)!=8){Wa=527;break a}if((c[h>>2]&128|0)!=0){Pd(s)}dc=s;gc=c[dc>>2]|0;ec=c[dc+4>>2]|0;if(ec>>>0>0|(ec|0)==0&gc>>>0>65535){Wa=531;break a}ec=c[Ha>>2]|0;dc=c[Ia>>2]|0;db=Oi(oc|0,pc|0,8,0)|0;qc=Oi(db|0,F|0,(gc&65535)*20|0,0)|0;rc=F;mb[ec&63](dc,qc,rc,0)|0;if((fb[c[La>>2]&31](c[Ia>>2]|0,t,8)|0)!=8){Wa=533;break a}if((c[h>>2]&128|0)!=0){Pd(t)}dc=t;oc=c[dc>>2]|0;pc=c[dc+4>>2]|0}while(!((oc|0)==0&(pc|0)==0));mb[c[Ha>>2]&63](c[Ia>>2]|0,qc,rc,0)|0;if((fb[c[Ka>>2]&31](c[Ia>>2]|0,r,8)|0)!=8){Wa=538;break a}}}else{Ta=mb[c[Ha>>2]&63](c[Ia>>2]|0,0,0,2)|0;Xb=Oi(Ta|0,F|0,1,0)|0;Ta=Ga;c[Ta>>2]=Xb&-2;c[Ta+4>>2]=F}}while(0);if(!Na){Ta=Ga;Xb=c[Ta+4>>2]|0;Wb=j;c[Wb>>2]=c[Ta>>2];c[Wb+4>>2]=Xb}Xb=c[u>>2]|0;if((c[h>>2]&524288|0)==0){Wb=(Xb*12|2)+4|0;Ta=Ga;dc=c[Ta>>2]|0;ec=c[Ta+4>>2]|0;Ta=Oi(dc|0,ec|0,Wb|0,0)|0;tc=Ta;uc=0;vc=ec;wc=dc;xc=0;yc=Wb;zc=Wb}else{Wb=(Xb*20|0)+16|0;Xb=Ga;dc=c[Xb>>2]|0;ec=c[Xb+4>>2]|0;Xb=Oi(dc|0,ec|0,Wb|0,0)|0;tc=Xb;uc=F;vc=ec;wc=dc;xc=0;yc=Wb;zc=Wb}Wb=J;c[Wb>>2]=tc;c[Wb+4>>2]=uc;if(uc>>>0<vc>>>0|(uc|0)==(vc|0)&tc>>>0<wc>>>0|(uc>>>0<xc>>>0|(uc|0)==(xc|0)&tc>>>0<yc>>>0)){Wa=546;break}if(!((tc&1|0)==0&0==0)){Wb=Oi(tc|0,uc|0,1,0)|0;dc=J;c[dc>>2]=Wb;c[dc+4>>2]=F}if(!K){Qa=lc;Ra=zc;continue}b[Oa>>1]=(b[Oa>>1]|0)+1<<16>>16;Qa=lc;Ra=zc}do{if((Wa|0)==78){sc(c[Ia>>2]|0,23e3,21776,l);Ub=Qa}else if((Wa|0)==143){sc(c[Ia>>2]|0,23e3,21776,l);Ub=Qa}else if((Wa|0)==154){sc(c[Ia>>2]|0,23e3,21776,l);Ub=Qa}else if((Wa|0)==193){sc(c[Ia>>2]|0,22928,21776,l);Ub=Qa}else if((Wa|0)==195){za(22632,21480,1956,22800)}else if((Wa|0)==212){sc(c[Ia>>2]|0,23e3,21776,l);Ub=Qa}else if((Wa|0)==270){sc(c[Ia>>2]|0,22760,21776,l);Va=Qa;Wa=598}else if((Wa|0)==275){za(22632,21480,1956,22800)}else if((Wa|0)==291){sc(c[Ia>>2]|0,22704,21776,l);Va=Qa;Wa=598}else if((Wa|0)==295){za(22696,21480,1868,22704)}else if((Wa|0)==297){za(22736,21480,1869,22704)}else if((Wa|0)==315){za(21448,21480,643,21496)}else if((Wa|0)==317){za(21520,21480,644,21496)}else if((Wa|0)==319){za(21560,21480,645,21496)}else if((Wa|0)==324){za(21584,21480,655,21496)}else if((Wa|0)==326){za(21616,21480,656,21496)}else if((Wa|0)==328){za(21560,21480,657,21496)}else if((Wa|0)==335){za(21640,21480,666,21496)}else if((Wa|0)==337){za(21616,21480,667,21496)}else if((Wa|0)==339){za(21560,21480,668,21496)}else if((Wa|0)==346){za(21672,21480,678,21496)}else if((Wa|0)==348){za(21704,21480,679,21496)}else if((Wa|0)==350){za(21744,21480,680,21496)}else if((Wa|0)==354){za(21768,21480,687,21496)}else if((Wa|0)==374){za(22632,21480,1956,22800)}else if((Wa|0)==381){za(22632,21480,1979,22656)}else if((Wa|0)==388){za(22072,21480,2e3,22592)}else if((Wa|0)==395){za(22072,21480,2023,22552)}else if((Wa|0)==402){za(22248,21480,2047,22512)}else if((Wa|0)==404){za(22312,21480,2049,22512)}else if((Wa|0)==411){za(22248,21480,2072,22472)}else if((Wa|0)==413){za(22312,21480,2074,22472)}else if((Wa|0)==422){sc(c[Ia>>2]|0,22424,21776,l);Ub=Qa}else if((Wa|0)==441){za(22072,21480,2239,22384)}else if((Wa|0)==448){za(22248,21480,2264,22344)}else if((Wa|0)==455){za(22072,21480,2275,22096)}else if((Wa|0)==463){za(22248,21480,2285,22272)}else if((Wa|0)==469){sc(c[Ia>>2]|0,21960,21776,l);Va=Qa;Wa=598}else if((Wa|0)==471){sc(c[Ia>>2]|0,21960,22e3,l);ne(cc);Va=Qa;Wa=598}else if((Wa|0)==474){za(22072,21480,2275,22096)}else if((Wa|0)==479){za(21768,21480,763,21496)}else if((Wa|0)==483){sc(c[Ia>>2]|0,21496,21776,l);Va=lc;Wa=598}else if((Wa|0)==491){sc(c[Ia>>2]|0,21864,21888,l);Va=lc;Wa=598}else if((Wa|0)==498){sc(c[Ia>>2]|0,21864,21888,l);Va=lc;Wa=598}else if((Wa|0)==507){sc(c[Ia>>2]|0,c[d>>2]|0,21928,l);Va=lc;Wa=598}else if((Wa|0)==510){sc(c[Ia>>2]|0,21864,20792,l);Va=lc;Wa=598}else if((Wa|0)==514){sc(c[Ia>>2]|0,21864,20824,l);Va=lc;Wa=598}else if((Wa|0)==519){sc(c[Ia>>2]|0,21864,20856,l);Va=lc;Wa=598}else if((Wa|0)==524){sc(c[Ia>>2]|0,c[d>>2]|0,21928,l);Va=lc;Wa=598}else if((Wa|0)==527){sc(c[Ia>>2]|0,21864,20792,l);Va=lc;Wa=598}else if((Wa|0)==531){sc(c[Ia>>2]|0,21864,20888,l);Va=lc;Wa=598}else if((Wa|0)==533){sc(c[Ia>>2]|0,21864,20824,l);Va=lc;Wa=598}else if((Wa|0)==538){sc(c[Ia>>2]|0,21864,20856,l);Va=lc;Wa=598}else if((Wa|0)==546){sc(c[Ia>>2]|0,21496,21792,l);Va=lc;Wa=598}else if((Wa|0)==551){do{if((K?(c[I>>2]&131072|0)!=0:0)?(zc=N,(c[zc>>2]|0)==0&(c[zc+4>>2]|0)==0):0){zc=c[u>>2]|0;if((zc|0)==0){za(21824,21480,809,21496)}else{Ac=0;Bc=Qa}while(1){if((b[Bc>>1]|0)==330){break}Oa=Ac+1|0;if(Oa>>>0<zc>>>0){Ac=Oa;Bc=Bc+24|0}else{Wa=555;break}}if((Wa|0)==555){za(21824,21480,809,21496)}zc=Ga;Oa=c[zc>>2]|0;J=c[zc+4>>2]|0;if((c[h>>2]&524288|0)==0){zc=Oi(Ac*12|0,0,10,0)|0;uc=Oi(zc|0,F|0,Oa|0,J|0)|0;zc=N;c[zc>>2]=uc;c[zc+4>>2]=F;break}else{zc=Oi(Ac*20|0,0,20,0)|0;uc=Oi(zc|0,F|0,Oa|0,J|0)|0;J=N;c[J>>2]=uc;c[J+4>>2]=F;break}}}while(0);J=me(Ra)|0;if((J|0)==0){sc(c[Ia>>2]|0,21496,21776,l);Va=Qa;Wa=598;break}uc=c[h>>2]|0;Oa=c[u>>2]|0;if((uc&524288|0)!=0){zc=J;c[zc>>2]=Oa;c[zc+4>>2]=0;if((uc&128|0)==0){Cc=Oa}else{Pd(J);Cc=c[u>>2]|0}zc=J+8|0;d:do{if((Cc|0)==0){Dc=zc}else{tc=J;yc=1;xc=zc;wc=Qa;while(1){b[xc>>1]=b[wc>>1]|0;vc=c[h>>2]|0;if((vc&128|0)==0){Ec=vc}else{Nd(xc);Ec=c[h>>2]|0}vc=tc+10|0;b[vc>>1]=b[wc+2>>1]|0;if((Ec&128|0)!=0){Nd(vc)}vc=tc+12|0;qe(vc,wc+8|0,8);if((c[h>>2]&128|0)!=0){Pd(vc)}vc=tc+20|0;qe(vc,wc+16|0,8);j=tc+28|0;if(!(yc>>>0<(c[u>>2]|0)>>>0)){Dc=j;break d}tc=vc;yc=yc+1|0;xc=j;wc=wc+24|0}}}while(0);qe(Dc,d+24|0,8);if((c[h>>2]&128|0)!=0){Pd(Dc)}}else{b[J>>1]=Oa;if((uc&128|0)==0){Fc=Oa}else{Nd(J);Fc=c[u>>2]|0}zc=J+2|0;e:do{if((Fc|0)==0){Gc=zc}else{wc=1;xc=zc;yc=Qa;while(1){b[xc>>1]=b[yc>>1]|0;tc=c[h>>2]|0;if((tc&128|0)==0){Hc=tc}else{Nd(xc);Hc=c[h>>2]|0}tc=xc+2|0;b[tc>>1]=b[yc+2>>1]|0;if((Hc&128|0)!=0){Nd(tc)}tc=xc+4|0;c[C>>2]=c[yc+8>>2];qe(tc,C,4);if((c[h>>2]&128|0)!=0){Od(tc)}qe(xc+8|0,yc+16|0,4);tc=xc+12|0;if(!(wc>>>0<(c[u>>2]|0)>>>0)){Gc=tc;break e}wc=wc+1|0;xc=tc;yc=yc+24|0}}}while(0);c[C>>2]=c[d+24>>2];if((c[h>>2]&128|0)!=0){Od(C)}qe(Gc,C,4)}ne(Qa);zc=Ga;Oa=mb[c[Ha>>2]&63](c[Ia>>2]|0,c[zc>>2]|0,c[zc+4>>2]|0,0)|0;zc=Ga;do{if((Oa|0)==(c[zc>>2]|0)&(F|0)==(c[zc+4>>2]|0)){if((fb[c[Ka>>2]&31](c[Ia>>2]|0,J,Ra)|0)!=(Ra|0)){sc(c[Ia>>2]|0,21496,21832,l);break}ne(J);if(!E){D=1;i=k;return D|0}Mb(d);c[h>>2]=c[h>>2]&-2097161;gb[c[d+564>>2]&15](d);Nb(d)|0;D=1;i=k;return D|0}else{sc(c[Ia>>2]|0,21496,21832,l)}}while(0);if((J|0)==0){D=0;i=k;return D|0}ne(J);D=0;i=k;return D|0}}while(0);if((Wa|0)==598){if((Va|0)==0){D=0;i=k;return D|0}else{Ub=Va}}ne(Ub);D=0;i=k;return D|0}function Xe(a){a=a|0;var b=0,d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0;b=i;i=i+48|0;d=b+24|0;f=b+36|0;g=b+32|0;h=b+28|0;j=b+16|0;k=b+8|0;l=b;m=a+16|0;n=m;o=c[n>>2]|0;p=c[n+4>>2]|0;if((o|0)==0&(p|0)==0){q=We(a,1,1,0)|0;i=b;return q|0}n=a+12|0;do{if((c[n>>2]&524288|0)==0){r=a+428|0;s=c[r>>2]|0;if((s|0)==(o|0)&0==(p|0)){c[r>>2]=0;t=m;c[t>>2]=0;c[t+4>>2]=0;t=a+628|0;mb[c[a+640>>2]&63](c[t>>2]|0,4,0,0)|0;if((fb[c[a+636>>2]&31](c[t>>2]|0,r,4)|0)==4){break}sc(c[t>>2]|0,c[a>>2]|0,20760,d);q=0;i=b;return q|0}t=a+640|0;r=a+628|0;u=a+632|0;v=s;while(1){s=mb[c[t>>2]&63](c[r>>2]|0,v,0,0)|0;if(!((s|0)==(v|0)&(F|0)==0)){w=10;break}if((fb[c[u>>2]&31](c[r>>2]|0,f,2)|0)!=2){w=10;break}if((c[n>>2]&128|0)!=0){Nd(f)}x=v+2|0;mb[c[t>>2]&63](c[r>>2]|0,((e[f>>1]|0)*12|0)+x|0,0,0)|0;if((fb[c[u>>2]&31](c[r>>2]|0,g,4)|0)!=4){w=14;break}if((c[n>>2]&128|0)!=0){Od(g)}s=c[g>>2]|0;y=m;if((s|0)==(c[y>>2]|0)&0==(c[y+4>>2]|0)){w=18;break}else{v=s}}if((w|0)==10){sc(c[r>>2]|0,20736,20792,d);q=0;i=b;return q|0}else if((w|0)==14){sc(c[r>>2]|0,20736,20824,d);q=0;i=b;return q|0}else if((w|0)==18){c[h>>2]=0;mb[c[t>>2]&63](c[r>>2]|0,((e[f>>1]|0)*12|0)+x|0,0,0)|0;if((fb[c[a+636>>2]&31](c[r>>2]|0,h,4)|0)==4){v=m;c[v>>2]=0;c[v+4>>2]=0;break}sc(c[r>>2]|0,20736,20856,d);q=0;i=b;return q|0}}else{v=a+432|0;u=v;s=c[u>>2]|0;y=c[u+4>>2]|0;if((s|0)==(o|0)&(y|0)==(p|0)){u=v;c[u>>2]=0;c[u+4>>2]=0;u=m;c[u>>2]=0;c[u+4>>2]=0;u=a+628|0;mb[c[a+640>>2]&63](c[u>>2]|0,8,0,0)|0;if((fb[c[a+636>>2]&31](c[u>>2]|0,v,8)|0)==8){break}sc(c[u>>2]|0,c[a>>2]|0,20760,d);q=0;i=b;return q|0}u=a+640|0;v=a+628|0;z=a+632|0;A=s;s=y;while(1){y=mb[c[u>>2]&63](c[v>>2]|0,A,s,0)|0;if(!((y|0)==(A|0)&(F|0)==(s|0))){w=27;break}if((fb[c[z>>2]&31](c[v>>2]|0,j,8)|0)!=8){w=27;break}if((c[n>>2]&128|0)!=0){Pd(j)}y=j;B=c[y>>2]|0;C=c[y+4>>2]|0;if(C>>>0>0|(C|0)==0&B>>>0>65535){w=31;break}C=c[u>>2]|0;y=c[v>>2]|0;D=Oi(A|0,s|0,8,0)|0;E=Oi(D|0,F|0,(B&65535)*20|0,0)|0;G=F;mb[C&63](y,E,G,0)|0;if((fb[c[z>>2]&31](c[v>>2]|0,k,8)|0)!=8){w=33;break}if((c[n>>2]&128|0)!=0){Pd(k)}y=k;C=c[y>>2]|0;B=c[y+4>>2]|0;y=m;if((C|0)==(c[y>>2]|0)&(B|0)==(c[y+4>>2]|0)){w=37;break}else{A=C;s=B}}if((w|0)==27){sc(c[v>>2]|0,20736,20792,d);q=0;i=b;return q|0}else if((w|0)==31){sc(c[v>>2]|0,20736,20888,d);q=0;i=b;return q|0}else if((w|0)==33){sc(c[v>>2]|0,20736,20824,d);q=0;i=b;return q|0}else if((w|0)==37){s=l;c[s>>2]=0;c[s+4>>2]=0;mb[c[u>>2]&63](c[v>>2]|0,E,G,0)|0;if((fb[c[a+636>>2]&31](c[v>>2]|0,l,8)|0)==8){s=m;c[s>>2]=0;c[s+4>>2]=0;break}sc(c[v>>2]|0,20736,20856,d);q=0;i=b;return q|0}}}while(0);q=We(a,1,1,0)|0;i=b;return q|0}function Ye(a,d,f,g,h){a=a|0;d=d|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;j=i;i=i+64|0;k=j+24|0;l=j+60|0;m=j+40|0;n=j+38|0;o=j+36|0;p=j+16|0;q=j+8|0;r=j;s=j+32|0;b[n>>1]=0;b[o>>1]=0;t=p;c[t>>2]=0;c[t+4>>2]=0;t=q;c[t>>2]=0;c[t+4>>2]=0;t=d&65535;Wb(a,t,0)|0;u=a+12|0;if((c[u>>2]&2048|0)!=0){sc(c[a+628>>2]|0,20944,20960,k);v=0;i=j;return v|0}w=a+16|0;x=w;y=c[x>>2]|0;z=c[x+4>>2]|0;if((y|0)==0&(z|0)==0){sc(c[a+628>>2]|0,20944,21024,k);v=0;i=j;return v|0}x=a+640|0;A=a+628|0;B=mb[c[x>>2]&63](c[A>>2]|0,y,z,0)|0;z=F;y=w;if(!((B|0)==(c[y>>2]|0)&(z|0)==(c[y+4>>2]|0))){y=c[A>>2]|0;c[k>>2]=c[a>>2];sc(y,20944,21088,k);v=0;i=j;return v|0}y=a+632|0;w=c[y>>2]|0;C=c[A>>2]|0;if((c[u>>2]&524288|0)==0){if((fb[w&31](C,l,2)|0)!=2){D=c[A>>2]|0;c[k>>2]=c[a>>2];sc(D,20944,21128,k);v=0;i=j;return v|0}if((c[u>>2]&128|0)!=0){Nd(l)}D=Oi(B|0,z|0,2,0)|0;E=D;G=F;H=12;I=18}else{if((fb[w&31](C,r,8)|0)!=8){C=c[A>>2]|0;c[k>>2]=c[a>>2];sc(C,20944,21128,k);v=0;i=j;return v|0}if((c[u>>2]&128|0)!=0){Pd(r)}C=c[r>>2]&65535;b[l>>1]=C;r=Oi(B|0,z|0,8,0)|0;J=C;K=r;L=F;M=20}while(1){if((I|0)==18){I=0;J=b[l>>1]|0;K=E;L=G;M=H}if(J<<16>>16==0){I=26;break}if((fb[c[y>>2]&31](c[A>>2]|0,m,M)|0)!=(M|0)){I=21;break}r=b[m>>1]|0;b[n>>1]=r;if((c[u>>2]&128|0)==0){N=r}else{Nd(n);N=b[n>>1]|0}if(N<<16>>16==d<<16>>16){break}r=Oi(K|0,L|0,M|0,0)|0;E=r;G=F;H=M;I=18}if((I|0)==21){H=c[A>>2]|0;c[k>>2]=c[a>>2];sc(H,20944,21168,k);v=0;i=j;return v|0}if((I|0)==26?!((b[n>>1]|0)==d<<16>>16):0){d=c[A>>2]|0;c[k>>2]=c[a>>2];c[k+4>>2]=t;sc(d,20944,21208,k);v=0;i=j;return v|0}d=m+2|0;b[o>>1]=b[d>>1]|0;t=c[u>>2]|0;if((t&128|0)==0){O=t}else{Nd(o);O=c[u>>2]|0}t=m+4|0;if((O&524288|0)!=0){n=t;I=n;H=n+4|0;n=e[H>>1]|e[H+2>>1]<<16;H=p;c[H>>2]=e[I>>1]|e[I+2>>1]<<16;c[H+4>>2]=n;if((O&128|0)==0){P=O}else{Pd(p);P=c[u>>2]|0}n=m+12|0;H=n;I=n+4|0;n=e[I>>1]|e[I+2>>1]<<16;I=q;c[I>>2]=e[H>>1]|e[H+2>>1]<<16;c[I+4>>2]=n;if((P&128|0)!=0){Pd(q)}}else{P=e[t>>1]|e[t+2>>1]<<16;c[s>>2]=P;if((O&128|0)==0){Q=P;R=O}else{Od(s);Q=c[s>>2]|0;R=c[u>>2]|0}O=p;c[O>>2]=Q;c[O+4>>2]=0;O=m+8|0;Q=e[O>>1]|e[O+2>>1]<<16;c[s>>2]=Q;if((R&128|0)==0){S=Q}else{Od(s);S=c[s>>2]|0}s=q;c[s>>2]=S;c[s+4>>2]=0}do{if((Yb(f)|0)==8?(c[u>>2]&524288|0)==0:0){if((f|0)==17){T=9;break}else if((f|0)==16){T=4;break}else if((f|0)==18){T=13;break}else{T=f;break}}else{T=f}}while(0);s=Ae(a,g,Yb(T)|0,21240)|0;if((s|0)==0){v=0;i=j;return v|0}a:do{if((T|0)==(f|0)){Qi(s|0,h|0,ba(Yb(f)|0,g)|0)|0}else{if((T|0)==9&(f|0)==17){if((g|0)<=0){break}S=0;while(1){Q=h+(S<<3)|0;R=c[Q>>2]|0;O=c[Q+4>>2]|0;c[s+(S<<2)>>2]=R;S=S+1|0;if(!((R|0)==(R|0)&(((R|0)<0)<<31>>31|0)==(O|0))){break}if((S|0)>=(g|0)){break a}}ne(s);sc(c[A>>2]|0,20944,21264,k);v=0;i=j;return v|0}if((T|0)==4&(f|0)==16){if((g|0)<=0){break}}else{if(!((T|0)==13&(f|0)==18&(g|0)>0)){break}}S=0;while(1){O=h+(S<<3)|0;R=c[O>>2]|0;Q=c[O+4>>2]|0;c[s+(S<<2)>>2]=R;S=S+1|0;if(!((R|0)==(R|0)&0==(Q|0))){break}if((S|0)>=(g|0)){break a}}ne(s);sc(c[A>>2]|0,20944,21264,k);v=0;i=j;return v|0}}while(0);do{if((Yb(T)|0)>1?(c[u>>2]&128|0)!=0:0){if((Yb(T)|0)==2){Qd(s,g);break}if((Yb(T)|0)==4){Sd(s,g);break}if((Yb(T)|0)==8){Td(s,g)}}}while(0);h=(c[u>>2]&524288|0)==0;f=ba(Yb(T)|0,g)|0;if(h){if((f|0)<5){h=Oi(K|0,L|0,8,0)|0;S=q;c[S>>2]=h;c[S+4>>2]=F;U=1}else{U=0}}else{if((f|0)<9){f=Oi(K|0,L|0,12,0)|0;S=q;c[S>>2]=f;c[S+4>>2]=F;U=1}else{U=0}}S=p;if((c[S>>2]|0)==(g|0)&(c[S+4>>2]|0)==(((g|0)<0)<<31>>31|0)?(b[o>>1]|0)==(T&65535)<<16>>16:0){S=q;f=mb[c[x>>2]&63](c[A>>2]|0,c[S>>2]|0,c[S+4>>2]|0,0)|0;S=q;if(!((f|0)==(c[S>>2]|0)&(F|0)==(c[S+4>>2]|0))){ne(s);S=c[A>>2]|0;c[k>>2]=c[a>>2];sc(S,20944,21088,k);v=0;i=j;return v|0}S=c[a+636>>2]|0;f=c[A>>2]|0;h=ba(Yb(T)|0,g)|0;Q=fb[S&31](f,s,h)|0;h=(Q|0)==(ba(Yb(T)|0,g)|0);ne(s);if(h){v=1;i=j;return v|0}sc(c[A>>2]|0,20944,20856,k);v=0;i=j;return v|0}if((U|0)==0){U=mb[c[x>>2]&63](c[A>>2]|0,0,0,2)|0;h=q;c[h>>2]=U;c[h+4>>2]=F;h=c[a+636>>2]|0;U=c[A>>2]|0;Q=ba(Yb(T)|0,g)|0;f=fb[h&31](U,s,Q)|0;Q=(f|0)==(ba(Yb(T)|0,g)|0);ne(s);if(!Q){sc(c[A>>2]|0,20944,20856,k);v=0;i=j;return v|0}}else{Qi(q|0,s|0,ba(Yb(T)|0,g)|0)|0}g=T&65535;b[o>>1]=g;b[d>>1]=g;g=c[u>>2]|0;if((g&128|0)==0){V=g}else{Nd(d);V=c[u>>2]|0}if((V&524288|0)==0){d=c[p>>2]|0;b[t>>1]=d;b[t+2>>1]=d>>>16;if((V&128|0)==0){W=V}else{Od(t);W=c[u>>2]|0}d=c[q>>2]|0;g=m+8|0;b[g>>1]=d;b[g+2>>1]=d>>>16;if((W&128|0)!=0){Od(g)}}else{g=p;p=c[g>>2]|0;W=c[g+4>>2]|0;g=t;d=g;b[d>>1]=p;b[d+2>>1]=p>>>16;p=g+4|0;b[p>>1]=W;b[p+2>>1]=W>>>16;if((V&128|0)==0){X=V}else{Pd(t);X=c[u>>2]|0}u=m+12|0;t=q;q=c[t>>2]|0;V=c[t+4>>2]|0;t=u;W=t;b[W>>1]=q;b[W+2>>1]=q>>>16;q=t+4|0;b[q>>1]=V;b[q+2>>1]=V>>>16;if((X&128|0)!=0){Pd(u)}}u=mb[c[x>>2]&63](c[A>>2]|0,K,L,0)|0;if(!((u|0)==(K|0)&(F|0)==(L|0))){L=c[A>>2]|0;c[k>>2]=c[a>>2];sc(L,20944,21088,k);v=0;i=j;return v|0}if((fb[c[a+636>>2]&31](c[A>>2]|0,m,M)|0)==(M|0)){v=1;i=j;return v|0}M=c[A>>2]|0;c[k>>2]=c[a>>2];sc(M,20944,21312,k);v=0;i=j;return v|0}function Ze(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0,h=0,j=0,k=0;g=i;i=i+16|0;h=g;if((d|0)==0){c[b>>2]=(c[b>>2]|0)+1;j=1;i=g;return j|0}if(!(f>=0.0)){za(23040,21480,2084,23056)}do{if(!(f<=0.0)){k=~~f>>>0;if(+(k>>>0)==f){c[h>>2]=k;c[h+4>>2]=1;break}if(f<1.0){c[h>>2]=~~(f*4294967295.0)>>>0;c[h+4>>2]=-1;break}else{c[h>>2]=-1;c[h+4>>2]=~~(4294967295.0/f)>>>0;break}}else{c[h>>2]=0;c[h+4>>2]=1}}while(0);if((c[a+12>>2]&128|0)!=0){Od(h);Od(h+4|0)}j=bf(a,b,d,e,5,1,8,h)|0;i=g;return j|0}function _e(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;h=i;i=i+16|0;j=h;if((d|0)==0){c[b>>2]=(c[b>>2]|0)+1;k=1;i=h;return k|0}l=a+12|0;m=c[l>>2]|0;if((m&524288|0)!=0){if(!(f>>>0<536870912)){za(22248,21480,2047,22512)}if((m&128|0)!=0){Td(g,f)}k=bf(a,b,d,e,16,f,f<<3,g)|0;i=h;return k|0}m=f<<2;n=me(m)|0;if((n|0)==0){sc(c[a+628>>2]|0,22960,21776,j);k=0;i=h;return k|0}do{if((f|0)!=0){o=g;p=0;q=n;while(1){r=o;s=c[r>>2]|0;t=c[r+4>>2]|0;if(t>>>0>0|(t|0)==0&s>>>0>4294967295){u=13;break}c[q>>2]=s;s=p+1|0;if(s>>>0<f>>>0){o=o+8|0;p=s;q=q+4|0}else{u=15;break}}if((u|0)==13){sc(c[a+628>>2]|0,22960,22e3,j);ne(n);k=0;i=h;return k|0}else if((u|0)==15){if(f>>>0<1073741824){break}za(22072,21480,2e3,22592)}}}while(0);if((c[l>>2]&128|0)!=0){Sd(n,f)}l=bf(a,b,d,e,4,f,m,n)|0;ne(n);k=l;i=h;return k|0}function $e(d,f,j,k,l,m){d=d|0;f=f|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;n=i;i=i+16|0;o=l<<3;p=me(o)|0;if((p|0)==0){sc(c[d+628>>2]|0,22888,21776,n);q=0;i=n;return q|0}r=e[d+86>>1]|0;do{if((r|0)==3){if((e[d+84>>1]|0)>=33){if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!(l>>>0<536870912)){za(22248,21480,2264,22344)}if((c[d+12>>2]&128|0)!=0){Vd(m,l)}s=bf(d,f,j,k,12,l,o,m)|0;break}if((l|0)!=0){t=0;do{g[p+(t<<2)>>2]=+h[m+(t<<3)>>3];t=t+1|0}while((t|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!(l>>>0<1073741824)){za(22072,21480,2239,22384)}if((c[d+12>>2]&128|0)!=0){Ud(p,l)}s=bf(d,f,j,k,11,l,l<<2,p)|0}else if((r|0)==2){t=b[d+84>>1]|0;if((t&65535)<9){if((l|0)!=0){u=0;do{a[p+u|0]=~~+h[m+(u<<3)>>3];u=u+1|0}while((u|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}else{s=bf(d,f,j,k,6,l,l,p)|0;break}}u=(l|0)==0;if((t&65535)<17){if(!u){v=0;do{b[p+(v<<1)>>1]=~~+h[m+(v<<3)>>3];v=v+1|0}while((v|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!((l|0)>-1)){za(22632,21480,1979,22656)}if((c[d+12>>2]&128|0)!=0){Qd(p,l)}s=bf(d,f,j,k,8,l,l<<1,p)|0;break}else{if(!u){v=0;do{c[p+(v<<2)>>2]=~~+h[m+(v<<3)>>3];v=v+1|0}while((v|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!(l>>>0<1073741824)){za(22072,21480,2023,22552)}if((c[d+12>>2]&128|0)!=0){Sd(p,l)}s=bf(d,f,j,k,9,l,l<<2,p)|0;break}}else if((r|0)==1){v=b[d+84>>1]|0;if((v&65535)<9){if((l|0)!=0){u=0;do{a[p+u|0]=~~+h[m+(u<<3)>>3];u=u+1|0}while((u|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}else{s=bf(d,f,j,k,1,l,l,p)|0;break}}u=(l|0)==0;if((v&65535)<17){if(!u){t=0;do{b[p+(t<<1)>>1]=~~+h[m+(t<<3)>>3];t=t+1|0}while((t|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!((l|0)>-1)){za(22632,21480,1956,22800)}if((c[d+12>>2]&128|0)!=0){Qd(p,l)}s=bf(d,f,j,k,3,l,l<<1,p)|0;break}else{if(!u){t=0;do{c[p+(t<<2)>>2]=~~+h[m+(t<<3)>>3]>>>0;t=t+1|0}while((t|0)!=(l|0))}if((j|0)==0){c[f>>2]=(c[f>>2]|0)+1;s=1;break}if(!(l>>>0<1073741824)){za(22072,21480,2e3,22592)}if((c[d+12>>2]&128|0)!=0){Sd(p,l)}s=bf(d,f,j,k,4,l,l<<2,p)|0;break}}else{s=0}}while(0);ne(p);q=s;i=n;return q|0}function af(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0;j=i;i=i+16|0;if((d|0)==0){c[b>>2]=(c[b>>2]|0)+1;k=1;i=j;return k|0}l=f<<1;m=f<<3;n=me(m)|0;if((n|0)==0){sc(c[a+628>>2]|0,22840,21776,j);k=0;i=j;return k|0}if((f|0)!=0){o=h;h=n;p=0;while(1){q=+g[o>>2];do{if(!(q<=0.0)){r=~~q>>>0;if(q==+(r>>>0)){c[h>>2]=r;c[h+4>>2]=1;break}if(q<1.0){c[h>>2]=~~(q*4294967296.0)>>>0;c[h+4>>2]=-1;break}else{c[h>>2]=-1;c[h+4>>2]=~~(4294967296.0/q)>>>0;break}}else{c[h>>2]=0;c[h+4>>2]=1}}while(0);p=p+1|0;if((p|0)==(f|0)){break}else{o=o+4|0;h=h+8|0}}}if((c[a+12>>2]&128|0)!=0){Sd(n,l)}l=bf(a,b,d,e,5,f,m,n)|0;ne(n);k=l;i=j;return k|0}function bf(a,d,e,f,g,h,j,k){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;l=i;i=i+16|0;m=l;n=l+4|0;o=c[d>>2]|0;if((o|0)!=0){p=0;while(1){q=b[e+(p*24|0)>>1]|0;if(q<<16>>16==f<<16>>16){r=4;break}s=p+1|0;if((q&65535)>(f&65535)){t=p;break}if(s>>>0<o>>>0){p=s}else{t=s;break}}if((r|0)==4){za(22136,21480,2301,22160)}if(t>>>0<o>>>0){r=o;while(1){o=e+(r*24|0)|0;p=r+ -1|0;s=e+(p*24|0)|0;c[o+0>>2]=c[s+0>>2];c[o+4>>2]=c[s+4>>2];c[o+8>>2]=c[s+8>>2];c[o+12>>2]=c[s+12>>2];c[o+16>>2]=c[s+16>>2];c[o+20>>2]=c[s+20>>2];if(p>>>0>t>>>0){r=p}else{u=t;break}}}else{u=t}}else{u=0}b[e+(u*24|0)>>1]=f;b[e+(u*24|0)+2>>1]=g;g=e+(u*24|0)+8|0;c[g>>2]=h;c[g+4>>2]=0;g=e+(u*24|0)+16|0;u=g;c[u>>2]=0;c[u+4>>2]=0;u=a+12|0;e=c[u>>2]&524288;do{if(((e>>>17)+4|0)>>>0<j>>>0){h=(e|0)==0;f=a+464|0;t=f;r=c[t>>2]|0;p=c[t+4>>2]|0;t=Oi(r|0,p|0,j|0,0)|0;s=h?t:t;t=h?0:F;if(t>>>0<p>>>0|(t|0)==(p|0)&s>>>0<r>>>0|(t>>>0<0|(t|0)==0&s>>>0<j>>>0)){sc(c[a+628>>2]|0,22160,21792,m);v=0;i=l;return v|0}h=a+628|0;o=mb[c[a+640>>2]&63](c[h>>2]|0,r,p,0)|0;if(!((o|0)==(r|0)&(F|0)==(p|0))){sc(c[h>>2]|0,22160,22192,m);v=0;i=l;return v|0}if(!((j|0)>-1)){za(22224,21480,2335,22160)}if((fb[c[a+636>>2]&31](c[h>>2]|0,k,j)|0)!=(j|0)){sc(c[h>>2]|0,22160,22192,m);v=0;i=l;return v|0}h=Oi(s&1|0,0,s|0,t|0)|0;t=f;c[t>>2]=h;c[t+4>>2]=F;t=c[u>>2]|0;if((t&524288|0)!=0){h=g;c[h>>2]=r;c[h+4>>2]=p;if((t&128|0)==0){break}Pd(g);break}c[n>>2]=r;if((t&128|0)!=0){Od(n)}qe(g,n,4)}else{qe(g,k,j)}}while(0);c[d>>2]=(c[d>>2]|0)+1;v=1;i=l;return v|0}function cf(a,b){a=a|0;b=b|0;c[a+504>>2]=5;c[a+500>>2]=0;c[a+508>>2]=5;c[a+520>>2]=0;c[a+516>>2]=5;return 1}function df(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+32|0;f=d;g=d+4|0;h=a+88|0;j=Ve(b[h>>1]|0)|0;c[f>>2]=e[h>>1]|0;Ra(g|0,23560,f|0)|0;h=c[a+628>>2]|0;k=c[a>>2]|0;if((j|0)==0){l=g}else{l=c[j>>2]|0}c[f>>2]=l;sc(h,k,23568,f);i=d;return 0}function ef(a,b){a=a|0;b=b|0;c[a+504>>2]=6;c[a+532>>2]=12;c[a+540>>2]=12;c[a+548>>2]=12;c[a+536>>2]=13;c[a+544>>2]=13;c[a+552>>2]=13;c[a+560>>2]=21;return 1}function ff(a){a=a|0;return 1}function gf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+32|0;f=e;g=a+608|0;h=c[g>>2]|0;if((h|0)<(d|0)){j=c[a+628>>2]|0;c[f>>2]=c[a+444>>2];k=f+4|0;c[k>>2]=h;c[k+4>>2]=((h|0)<0)<<31>>31;k=f+12|0;c[k>>2]=d;c[k+4>>2]=((d|0)<0)<<31>>31;sc(j,23656,23672,f);l=0;i=e;return l|0}f=a+604|0;a=c[f>>2]|0;if((a|0)==(b|0)){m=b;n=h}else{qe(b,a,d);m=c[f>>2]|0;n=c[g>>2]|0}c[f>>2]=m+d;c[g>>2]=n-d;l=1;i=e;return l|0}function hf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;if((d|0)<=0){f=1;i=e;return f|0}g=a+608|0;h=a+592|0;j=a+604|0;k=d;d=b;while(1){b=c[g>>2]|0;l=c[h>>2]|0;m=(b+k|0)>(l|0)?l-b|0:k;if((m|0)<=0){n=4;break}o=c[j>>2]|0;if((o|0)==(d|0)){p=d;q=b;r=l}else{qe(o,d,m);p=c[j>>2]|0;q=c[g>>2]|0;r=c[h>>2]|0}c[j>>2]=p+m;o=q+m|0;c[g>>2]=o;l=d+m|0;b=k-m|0;if((o|0)>=(r|0)?(we(a)|0)==0:0){f=-1;n=10;break}if((b|0)>0){k=b;d=l}else{f=1;n=10;break}}if((n|0)==4){za(23616,23624,55,23640)}else if((n|0)==10){i=e;return f|0}return 0}function jf(a,b){a=a|0;b=b|0;var d=0;d=ba(c[a+580>>2]|0,b)|0;b=a+604|0;c[b>>2]=(c[b>>2]|0)+d;b=a+608|0;c[b>>2]=(c[b>>2]|0)-d;return 1}function kf(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;h=i;if((f-e&4|0)==0){j=f}else{c[f>>2]=0;j=f+4|0}if(j>>>0>e>>>0){f=e;e=0;while(1){k=c[f>>2]|0;if((k+e|0)>>>0>g>>>0|k>>>0>g>>>0){l=g-e|0;c[f>>2]=l;m=l}else{m=k}if((m|0)==0){n=e}else{k=e>>>3;l=b+k|0;o=e&7;p=8-o|0;if(m>>>0>p>>>0){if((o|0)==0){q=l;r=m}else{a[l]=(d[l]|0)&255<<p;q=b+(k+1)|0;r=m-p|0}p=r>>>3;if((p|0)==0){s=q;t=r}else{if(r>>>0>63){k=q;u=p;while(1){if((k&3|0)==0){v=k;w=u;break}x=k+1|0;a[k]=0;y=u+ -1|0;if((y|0)==0){v=x;w=0;break}else{k=x;u=y}}u=w>>>2;k=u<<2;Li(v|0,0,k|0)|0;z=v+k|0;A=w-(u<<2)|0}else{z=q;A=p}switch(A|0){case 6:{B=25;break};case 7:{B=24;break};case 12:{B=19;break};case 8:{B=23;break};case 10:{B=21;break};case 15:{a[z+14|0]=0;B=17;break};case 3:{B=28;break};case 4:{B=27;break};case 13:{B=18;break};case 14:{B=17;break};case 1:{B=30;break};case 2:{B=29;break};case 9:{B=22;break};case 11:{B=20;break};case 5:{B=26;break};default:{C=z}}if((B|0)==17){B=0;a[z+13|0]=0;B=18}if((B|0)==18){B=0;a[z+12|0]=0;B=19}if((B|0)==19){B=0;a[z+11|0]=0;B=20}if((B|0)==20){B=0;a[z+10|0]=0;B=21}if((B|0)==21){B=0;a[z+9|0]=0;B=22}if((B|0)==22){B=0;a[z+8|0]=0;B=23}if((B|0)==23){B=0;a[z+7|0]=0;B=24}if((B|0)==24){B=0;a[z+6|0]=0;B=25}if((B|0)==25){B=0;a[z+5|0]=0;B=26}if((B|0)==26){B=0;a[z+4|0]=0;B=27}if((B|0)==27){B=0;a[z+3|0]=0;B=28}if((B|0)==28){B=0;a[z+2|0]=0;B=29}if((B|0)==29){B=0;a[z+1|0]=0;B=30}if((B|0)==30){B=0;a[z]=0;C=z+A|0}s=C;t=r&7}if((t|0)!=0){a[s]=(d[s]|0)&255>>>t}}else{a[l]=((d[25096+m|0]|0)>>>o^255)&(d[l]|0)}n=(c[f>>2]|0)+e|0}u=f+4|0;k=c[u>>2]|0;if((k+n|0)>>>0>g>>>0|k>>>0>g>>>0){y=g-n|0;c[u>>2]=y;D=y}else{D=k}if((D|0)==0){E=n}else{k=n>>>3;y=b+k|0;x=n&7;F=8-x|0;if(D>>>0>F>>>0){if((x|0)==0){G=y;H=D}else{a[y]=d[y]|0|255>>>x;G=b+(k+1)|0;H=D-F|0}F=H>>>3;if((F|0)==0){I=G;J=H}else{if(H>>>0>63){k=G;K=F;while(1){if((k&3|0)==0){L=k;M=K;break}N=k+1|0;a[k]=-1;O=K+ -1|0;if((O|0)==0){L=N;M=0;break}else{k=N;K=O}}K=M>>>2;k=K<<2;Li(L|0,-1,k|0)|0;P=L+k|0;Q=M-(K<<2)|0}else{P=G;Q=F}switch(Q|0){case 12:{B=51;break};case 4:{B=59;break};case 14:{B=49;break};case 2:{B=61;break};case 11:{B=52;break};case 9:{B=54;break};case 15:{a[P+14|0]=-1;B=49;break};case 1:{B=62;break};case 7:{B=56;break};case 5:{B=58;break};case 8:{B=55;break};case 3:{B=60;break};case 13:{B=50;break};case 10:{B=53;break};case 6:{B=57;break};default:{R=P}}if((B|0)==49){B=0;a[P+13|0]=-1;B=50}if((B|0)==50){B=0;a[P+12|0]=-1;B=51}if((B|0)==51){B=0;a[P+11|0]=-1;B=52}if((B|0)==52){B=0;a[P+10|0]=-1;B=53}if((B|0)==53){B=0;a[P+9|0]=-1;B=54}if((B|0)==54){B=0;a[P+8|0]=-1;B=55}if((B|0)==55){B=0;a[P+7|0]=-1;B=56}if((B|0)==56){B=0;a[P+6|0]=-1;B=57}if((B|0)==57){B=0;a[P+5|0]=-1;B=58}if((B|0)==58){B=0;a[P+4|0]=-1;B=59}if((B|0)==59){B=0;a[P+3|0]=-1;B=60}if((B|0)==60){B=0;a[P+2|0]=-1;B=61}if((B|0)==61){B=0;a[P+1|0]=-1;B=62}if((B|0)==62){B=0;a[P]=-1;R=P+Q|0}I=R;J=H&7}if((J|0)!=0){a[I]=d[I]|0|65280>>>J}}else{a[y]=d[y]|0|(d[25096+D|0]|0)>>>x}E=(c[u>>2]|0)+n|0}K=f+8|0;if(K>>>0<j>>>0){f=K;e=E}else{S=E;break}}}else{S=0}if((S|0)==(g|0)){i=h;return}else{za(25112,25128,452,25144)}}function lf(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;i=i+16|0;d=b;if((mf(a)|0)==0){e=1;i=b;return e|0}if((Vb(a,25168,1)|0)==0){sc(c[a+628>>2]|0,25208,25232,d);e=0;i=b;return e|0}else{c[d>>2]=1;e=Ib(a,65536,d)|0;i=b;return e|0}return 0}function mf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;i=i+16|0;d=b;if((Vb(a,26488,5)|0)==0){sc(c[a+628>>2]|0,26672,26688,d);e=0;i=b;return e|0}f=me(96)|0;g=a+576|0;c[g>>2]=f;if((f|0)==0){sc(c[a+628>>2]|0,26672,26744,d);e=0;i=b;return e|0}h=c[a+8>>2]|0;c[f>>2]=h;j=a+672|0;c[f+32>>2]=c[j>>2];c[j>>2]=7;j=a+668|0;c[f+36>>2]=c[j>>2];c[j>>2]=8;j=a+676|0;c[f+40>>2]=c[j>>2];c[j>>2]=9;c[f+28>>2]=0;if((h|0)==0){h=a+12|0;c[h>>2]=c[h>>2]|256}c[(c[g>>2]|0)+64>>2]=0;c[d>>2]=3;Ib(a,65540,d)|0;c[(c[g>>2]|0)+80>>2]=0;c[a+504>>2]=7;c[a+508>>2]=8;c[a+512>>2]=22;c[a+532>>2]=14;c[a+540>>2]=14;c[a+548>>2]=14;c[a+516>>2]=8;c[a+524>>2]=23;c[a+528>>2]=9;c[a+536>>2]=15;c[a+544>>2]=15;c[a+552>>2]=15;c[a+556>>2]=2;c[a+564>>2]=3;e=1;i=b;return e|0}function nf(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;i=i+16|0;d=b;if((mf(a)|0)==0){e=0;i=b;return e|0}if((Vb(a,25280,1)|0)==0){sc(c[a+628>>2]|0,25320,25344,d);e=0;i=b;return e|0}else{c[a+532>>2]=16;c[a+540>>2]=16;c[a+548>>2]=16;c[a+536>>2]=17;c[a+544>>2]=17;c[a+552>>2]=17;c[a+528>>2]=10;c[d>>2]=1;e=Ib(a,65536,d)|0;i=b;return e|0}return 0}function of(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0;f=i;i=i+32|0;g=f;h=c[a+576>>2]|0;j=c[h+12>>2]|0;k=c[h+44>>2]|0;l=h+8|0;if(((e|0)%(c[l>>2]|0)|0|0)!=0){sc(c[a+628>>2]|0,26376,25408,g);m=-1;i=f;return m|0}n=h+48|0;o=c[n>>2]|0;p=h+52|0;q=c[p>>2]|0;r=h+56|0;s=c[r>>2]|0;t=a+604|0;u=c[t>>2]|0;v=a+608|0;w=c[v>>2]|0;x=u+w|0;do{if((e|0)>0){y=h+72|0;z=h+68|0;A=(j|0)>0;B=h+92|0;C=a+628|0;D=a+12|0;E=a+492|0;F=a+452|0;G=h+60|0;H=b;I=e;J=c[z>>2]|0;K=c[y>>2]|0;L=o;M=q;N=s;O=u;a:while(1){b:do{if(A){P=K;Q=L;R=M;S=0;T=0;U=c[J>>2]|0;V=O;W=K;X=J+4|0;c:while(1){Y=(W|0)==(K|0);d:do{if(Y){Z=Q;_=R;$=0;aa=S;ba=T;ca=U;da=V;ea=X;while(1){do{if((_|0)<7){if(!(da>>>0<x>>>0)){if((_|0)==0){fa=Z;ga=0;ha=$;ia=ba;ja=da;ka=K;la=88;break a}else{ma=Z;na=7;oa=da;break}}else{ma=(d[k+(d[da]|0)|0]|0)<<_|Z;na=_+8|0;oa=da+1|0;break}}else{ma=Z;na=_;oa=da}}while(0);pa=ma&127;qa=d[27561+(pa<<3)|0]|0;ra=na-qa|0;sa=ma>>>qa;switch(d[27560+(pa<<3)|0]|0|0){case 3:{ta=ra;ua=sa;va=$;wa=ba;xa=aa;ya=ca;za=oa;Aa=ea;la=62;break d;break};case 2:{Ba=ra;Ca=sa;Da=$;Ea=ba;Fa=ca;Ga=oa;Ha=ea;la=22;break d;break};case 6:{Ia=ra;Ja=sa;Ka=$;La=ba;Ma=oa;Na=K;la=77;break c;break};case 12:{Oa=qa;Pa=ra;Qa=sa;Ra=na;Sa=$;Ta=ba;Ua=oa;Va=K;la=78;break c;break};case 4:{Wa=pa;Xa=ra;Ya=sa;Za=$;_a=ba;$a=aa;ab=ca;bb=oa;cb=ea;la=66;break d;break};case 5:{db=pa;eb=ra;fb=sa;gb=$;hb=ba;ib=ca;jb=oa;kb=ea;la=70;break d;break};case 1:{break};default:{lb=sa;mb=ra;nb=$;pb=ba;qb=oa;rb=K;la=85;break c}}pa=(c[ea>>2]|0)+ca|0;qa=aa+$+pa|0;if((pa|0)<(j|0)){Z=sa;_=ra;$=qa;aa=0-pa|0;ba=pa;ca=pa+(c[ea+4>>2]|0)|0;da=oa;ea=ea+8|0}else{sb=sa;tb=ra;ub=qa;vb=pa;wb=oa;xb=K;la=99;break c}}}else{ea=Q;da=R;ca=0;ba=S;aa=T;$=U;_=V;Z=X;while(1){do{if((da|0)<7){if(!(_>>>0<x>>>0)){if((da|0)==0){fa=ea;ga=0;ha=ca;ia=aa;ja=_;ka=W;la=88;break a}else{yb=ea;zb=7;Ab=_;break}}else{yb=(d[k+(d[_]|0)|0]|0)<<da|ea;zb=da+8|0;Ab=_+1|0;break}}else{yb=ea;zb=da;Ab=_}}while(0);pa=yb&127;qa=d[27561+(pa<<3)|0]|0;ra=zb-qa|0;sa=yb>>>qa;switch(d[27560+(pa<<3)|0]|0|0){case 3:{ta=ra;ua=sa;va=ca;wa=aa;xa=ba;ya=$;za=Ab;Aa=Z;la=62;break d;break};case 1:{break};case 2:{Ba=ra;Ca=sa;Da=ca;Ea=aa;Fa=$;Ga=Ab;Ha=Z;la=22;break d;break};case 6:{Ia=ra;Ja=sa;Ka=ca;La=aa;Ma=Ab;Na=W;la=77;break c;break};case 12:{Oa=qa;Pa=ra;Qa=sa;Ra=zb;Sa=ca;Ta=aa;Ua=Ab;Va=W;la=78;break c;break};case 4:{Wa=pa;Xa=ra;Ya=sa;Za=ca;_a=aa;$a=ba;ab=$;bb=Ab;cb=Z;la=66;break d;break};case 5:{db=pa;eb=ra;fb=sa;gb=ca;hb=aa;ib=$;jb=Ab;kb=Z;la=70;break d;break};default:{lb=sa;mb=ra;nb=ca;pb=aa;qb=Ab;rb=W;la=85;break c}}if(($|0)<=(aa|0)&($|0)<(j|0)){pa=$;qa=Z;while(1){Bb=(c[qa>>2]|0)+pa+(c[qa+4>>2]|0)|0;Cb=qa+8|0;if((Bb|0)<=(aa|0)&(Bb|0)<(j|0)){pa=Bb;qa=Cb}else{Db=Bb;Eb=Cb;break}}}else{Db=$;Eb=Z}qa=(c[Eb>>2]|0)+Db|0;pa=ba+ca+qa|0;if((qa|0)<(j|0)){ea=sa;da=ra;ca=pa;ba=0-qa|0;aa=qa;$=qa+(c[Eb+4>>2]|0)|0;_=Ab;Z=Eb+8|0}else{sb=sa;tb=ra;ub=pa;vb=qa;wb=Ab;xb=W;la=99;break c}}}}while(0);if((la|0)==22){la=0;if((W-P&4|0)==0){Z=Ca;_=Ba;$=Da;aa=Ea;ba=Ga;while(1){do{if((_|0)<12){if(!(ba>>>0<x>>>0)){if((_|0)==0){fa=Z;ga=0;ha=$;ia=aa;ja=ba;ka=W;la=88;break a}else{Fb=Z;Gb=12;Hb=ba;break}}ca=ba+1|0;da=(d[k+(d[ba]|0)|0]|0)<<_|Z;ea=_+8|0;if((ea|0)<12){if(ca>>>0<x>>>0){Fb=(d[k+(d[ca]|0)|0]|0)<<ea|da;Gb=_+16|0;Hb=ba+2|0}else{Fb=da;Gb=12;Hb=ca}}else{Fb=da;Gb=ea;Hb=ca}}else{Fb=Z;Gb=_;Hb=ba}}while(0);Ib=Fb&4095;ca=d[28585+(Ib<<3)|0]|0;Jb=Gb-ca|0;Kb=Fb>>>ca;ca=d[28584+(Ib<<3)|0]|0;if((ca|0)==7){break}else if(!((ca|0)==11|(ca|0)==9)){Lb=Kb;Mb=Jb;Nb=$;Ob=aa;Pb=Hb;Qb=W;la=87;break c}ca=c[28588+(Ib<<3)>>2]|0;Z=Kb;_=Jb;$=ca+$|0;aa=ca+aa|0;ba=Hb}ba=c[28588+(Ib<<3)>>2]|0;_=W+4|0;c[W>>2]=ba+$;Z=Kb;ca=Jb;ea=0;da=ba+aa|0;ba=Hb;while(1){do{if((ca|0)<13){if(!(ba>>>0<x>>>0)){if((ca|0)==0){fa=Z;ga=0;ha=ea;ia=da;ja=ba;ka=_;la=88;break a}else{Rb=Z;Sb=13;Tb=ba;break}}qa=ba+1|0;pa=(d[k+(d[ba]|0)|0]|0)<<ca|Z;Cb=ca+8|0;if((Cb|0)<13){if(qa>>>0<x>>>0){Rb=(d[k+(d[qa]|0)|0]|0)<<Cb|pa;Sb=ca+16|0;Tb=ba+2|0}else{Rb=pa;Sb=13;Tb=qa}}else{Rb=pa;Sb=Cb;Tb=qa}}else{Rb=Z;Sb=ca;Tb=ba}}while(0);Ub=Rb&8191;qa=d[61353+(Ub<<3)|0]|0;Vb=Sb-qa|0;Wb=Rb>>>qa;qa=d[61352+(Ub<<3)|0]|0;if((qa|0)==8){break}else if(!((qa|0)==11|(qa|0)==10)){Xb=Wb;Yb=Vb;Zb=ea;_b=da;$b=Tb;ac=_;la=86;break c}qa=c[61356+(Ub<<3)>>2]|0;Z=Wb;ca=Vb;ea=qa+ea|0;da=qa+da|0;ba=Tb}ba=c[61356+(Ub<<3)>>2]|0;c[_>>2]=ba+ea;bc=Wb;cc=Vb;dc=ba+da|0;ec=Tb}else{ba=Ca;ca=Ba;Z=Da;aa=Ea;$=Ga;while(1){do{if((ca|0)<13){if(!($>>>0<x>>>0)){if((ca|0)==0){fa=ba;ga=0;ha=Z;ia=aa;ja=$;ka=W;la=88;break a}else{fc=ba;gc=13;hc=$;break}}qa=$+1|0;Cb=(d[k+(d[$]|0)|0]|0)<<ca|ba;pa=ca+8|0;if((pa|0)<13){if(qa>>>0<x>>>0){fc=(d[k+(d[qa]|0)|0]|0)<<pa|Cb;gc=ca+16|0;hc=$+2|0}else{fc=Cb;gc=13;hc=qa}}else{fc=Cb;gc=pa;hc=qa}}else{fc=ba;gc=ca;hc=$}}while(0);ic=fc&8191;qa=d[61353+(ic<<3)|0]|0;jc=gc-qa|0;kc=fc>>>qa;qa=d[61352+(ic<<3)|0]|0;if((qa|0)==8){break}else if(!((qa|0)==11|(qa|0)==10)){Xb=kc;Yb=jc;Zb=Z;_b=aa;$b=hc;ac=W;la=86;break c}qa=c[61356+(ic<<3)>>2]|0;ba=kc;ca=jc;Z=qa+Z|0;aa=qa+aa|0;$=hc}$=c[61356+(ic<<3)>>2]|0;ca=W+4|0;c[W>>2]=$+Z;ba=kc;da=jc;ea=0;_=$+aa|0;$=hc;while(1){do{if((da|0)<12){if(!($>>>0<x>>>0)){if((da|0)==0){fa=ba;ga=0;ha=ea;ia=_;ja=$;ka=ca;la=88;break a}else{lc=ba;mc=12;nc=$;break}}qa=$+1|0;pa=(d[k+(d[$]|0)|0]|0)<<da|ba;Cb=da+8|0;if((Cb|0)<12){if(qa>>>0<x>>>0){lc=(d[k+(d[qa]|0)|0]|0)<<Cb|pa;mc=da+16|0;nc=$+2|0}else{lc=pa;mc=12;nc=qa}}else{lc=pa;mc=Cb;nc=qa}}else{lc=ba;mc=da;nc=$}}while(0);oc=lc&4095;qa=d[28585+(oc<<3)|0]|0;pc=mc-qa|0;qc=lc>>>qa;qa=d[28584+(oc<<3)|0]|0;if((qa|0)==7){break}else if(!((qa|0)==11|(qa|0)==9)){Lb=qc;Mb=pc;Nb=ea;Ob=_;Pb=nc;Qb=ca;la=87;break c}qa=c[28588+(oc<<3)>>2]|0;ba=qc;da=pc;ea=qa+ea|0;_=qa+_|0;$=nc}$=c[28588+(oc<<3)>>2]|0;c[ca>>2]=$+ea;bc=qc;cc=pc;dc=$+_|0;ec=nc}$=W+8|0;if(($|0)!=(K|0)){if((Fa|0)<=(dc|0)&(Fa|0)<(j|0)){da=Fa;ba=Ha;while(1){aa=(c[ba>>2]|0)+da+(c[ba+4>>2]|0)|0;Z=ba+8|0;if((aa|0)<=(dc|0)&(aa|0)<(j|0)){da=aa;ba=Z}else{rc=bc;tc=cc;uc=dc;vc=aa;wc=ec;xc=$;yc=Z;break}}}else{rc=bc;tc=cc;uc=dc;vc=Fa;wc=ec;xc=$;yc=Ha}}else{rc=bc;tc=cc;uc=dc;vc=Fa;wc=ec;xc=K;yc=Ha}}else if((la|0)==62){la=0;if(!Y?(ya|0)<=(wa|0)&(ya|0)<(j|0):0){ba=ya;da=Aa;while(1){_=(c[da>>2]|0)+ba+(c[da+4>>2]|0)|0;ea=da+8|0;if((_|0)<=(wa|0)&(_|0)<(j|0)){ba=_;da=ea}else{zc=_;Ac=ea;break}}}else{zc=ya;Ac=Aa}c[W>>2]=xa+va+zc;rc=ua;tc=ta;uc=zc;vc=(c[Ac>>2]|0)+zc|0;wc=za;xc=W+4|0;yc=Ac+4|0}else if((la|0)==66){la=0;if(!Y?(ab|0)<=(_a|0)&(ab|0)<(j|0):0){da=ab;ba=cb;while(1){$=(c[ba>>2]|0)+da+(c[ba+4>>2]|0)|0;ea=ba+8|0;if(($|0)<=(_a|0)&($|0)<(j|0)){da=$;ba=ea}else{Bc=$;Cc=ea;break}}}else{Bc=ab;Cc=cb}ba=c[27564+(Wa<<3)>>2]|0;c[W>>2]=$a+Za+Bc+ba;rc=Ya;tc=Xa;uc=ba+Bc|0;vc=(c[Cc>>2]|0)+Bc|0;wc=bb;xc=W+4|0;yc=Cc+4|0}else if((la|0)==70){la=0;ba=(W|0)!=(K|0);if(ba?(ib|0)<=(hb|0)&(ib|0)<(j|0):0){da=ib;Y=kb;while(1){ea=(c[Y>>2]|0)+da+(c[Y+4>>2]|0)|0;$=Y+8|0;if((ea|0)<=(hb|0)&(ea|0)<(j|0)){da=ea;Y=$}else{Dc=ea;Ec=$;break}}}else{Dc=ib;Ec=kb}Y=c[27564+(db<<3)>>2]|0;da=Y+hb|0;if((Dc|0)<=(da|0)&((Dc|0)<(da|0)|ba)){la=74;break}c[W>>2]=Dc-hb+gb-Y;da=Ec+ -4|0;rc=fb;tc=eb;uc=Dc-Y|0;vc=Dc-(c[da>>2]|0)|0;wc=jb;xc=W+4|0;yc=da}if((uc|0)<(j|0)){Q=rc;R=tc;S=0-uc|0;T=uc;U=vc;V=wc;W=xc;X=yc}else{Fc=rc;Gc=tc;Hc=N;Ic=uc;Jc=wc;Kc=xc;break b}}do{if((la|0)==74){la=0;X=c[C>>2]|0;V=(c[D>>2]&1024|0)!=0;U=c[(V?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=V?25536:25544;c[g+8>>2]=U;c[g+12>>2]=hb;sc(X,26376,25600,g);Lc=fb;Mc=eb;Nc=N;Oc=gb;Pc=hb;Qc=jb;Rc=W}else if((la|0)==77){la=0;c[Na>>2]=j-La;X=c[C>>2]|0;U=(c[D>>2]&1024|0)!=0;V=c[(U?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=U?25536:25544;c[g+8>>2]=V;c[g+12>>2]=La;sc(X,26376,26392,g);Lc=Ja;Mc=Ia;Nc=N;Oc=Ka;Pc=La;Qc=Ma;Rc=Na+4|0}else if((la|0)==78){la=0;X=Va+4|0;c[Va>>2]=j-Ta;do{if((Pa|0)<4){if(!(Ua>>>0<x>>>0)){if((Ra|0)==(Oa|0)){fa=Qa;ga=Pa;ha=Sa;ia=Ta;ja=Ua;ka=X;la=88;break a}else{Sc=Qa;Tc=4;Uc=Ua;break}}else{Sc=(d[k+(d[Ua]|0)|0]|0)<<Pa|Qa;Tc=Pa+8|0;Uc=Ua+1|0;break}}else{Sc=Qa;Tc=Pa;Uc=Ua}}while(0);if((Sc&15|0)!=0){ba=c[C>>2]|0;V=(c[D>>2]&1024|0)!=0;U=c[(V?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=V?25536:25544;c[g+8>>2]=U;c[g+12>>2]=Ta;sc(ba,26376,25600,g)}Lc=Sc>>>4;Mc=Tc+ -4|0;Nc=1;Oc=Sa;Pc=Ta;Qc=Uc;Rc=X}else if((la|0)==86){la=0;ba=c[C>>2]|0;U=(c[D>>2]&1024|0)!=0;V=c[(U?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=U?25536:25544;c[g+8>>2]=V;c[g+12>>2]=_b;sc(ba,26376,25600,g);Lc=Xb;Mc=Yb;Nc=N;Oc=Zb;Pc=_b;Qc=$b;Rc=ac}else if((la|0)==87){la=0;ba=c[C>>2]|0;V=(c[D>>2]&1024|0)!=0;U=c[(V?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=V?25536:25544;c[g+8>>2]=U;c[g+12>>2]=Ob;sc(ba,26376,25600,g);Lc=Lb;Mc=Mb;Nc=N;Oc=Nb;Pc=Ob;Qc=Pb;Rc=Qb}else if((la|0)==99){la=0;if((ub|0)==0){Fc=sb;Gc=tb;Hc=N;Ic=vb;Jc=wb;Kc=xb;break b}if((vb+ub|0)<(j|0)){do{if((tb|0)<1){if(!(wb>>>0<x>>>0)){if((tb|0)==0){fa=sb;ga=0;ha=ub;ia=vb;ja=wb;ka=xb;la=88;break a}else{Vc=sb;Wc=1;Xc=wb;break}}else{Vc=(d[k+(d[wb]|0)|0]|0)<<tb|sb;Wc=tb+8|0;Xc=wb+1|0;break}}else{Vc=sb;Wc=tb;Xc=wb}}while(0);if((Vc&1|0)==0){lb=Vc;mb=Wc;nb=ub;pb=vb;qb=Xc;rb=xb;la=85;break}Yc=Vc>>>1;Zc=Wc+ -1|0;_c=Xc}else{Yc=sb;Zc=tb;_c=wb}c[xb>>2]=ub;Fc=Yc;Gc=Zc;Hc=N;Ic=vb;Jc=_c;Kc=xb+4|0;break b}}while(0);if((la|0)==85){la=0;W=c[C>>2]|0;X=(c[D>>2]&1024|0)!=0;ba=c[(X?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=X?25536:25544;c[g+8>>2]=ba;c[g+12>>2]=pb;sc(W,26376,25600,g);Lc=lb;Mc=mb;Nc=N;Oc=nb;Pc=pb;Qc=qb;Rc=rb}if((Oc|0)==0){Fc=Lc;Gc=Mc;Hc=Nc;Ic=Pc;Jc=Qc;Kc=Rc}else{c[Rc>>2]=Oc;Fc=Lc;Gc=Mc;Hc=Nc;Ic=Pc;Jc=Qc;Kc=Rc+4|0}}else{Fc=L;Gc=M;Hc=N;Ic=0;Jc=O;Kc=K}}while(0);do{if((Ic|0)==(j|0)){$c=Kc}else{W=c[B>>2]|0;ba=c[C>>2]|0;X=(c[D>>2]&1024|0)!=0;U=c[(X?E:F)>>2]|0;c[g>>2]=Ic>>>0<j>>>0?25496:25512;c[g+4>>2]=W;c[g+8>>2]=X?25536:25544;c[g+12>>2]=U;c[g+16>>2]=Ic;c[g+20>>2]=j;ue(ba,26376,25448,g);ba=(Ic|0)>(j|0);if(ba&Kc>>>0>K>>>0){U=Ic;X=Kc;while(1){W=X+ -4|0;V=U-(c[W>>2]|0)|0;T=(V|0)>(j|0);if(T&W>>>0>K>>>0){U=V;X=W}else{ad=T;bd=V;cd=W;break}}}else{ad=ba;bd=Ic;cd=Kc}if((bd|0)>=(j|0)){if(!ad){$c=cd;break}c[cd>>2]=j;c[cd+4>>2]=0;$c=cd+8|0;break}if((cd-K&4|0)==0){dd=cd}else{c[cd>>2]=0;dd=cd+4|0}c[dd>>2]=j-((bd|0)<0?0:bd);$c=dd+4|0}}while(0);if((Hc|0)!=0){ed=Fc;fd=Gc;gd=Hc;hd=Jc;id=$c;break}ob[c[G>>2]&3](H,K,$c,j);c[$c>>2]=0;X=c[y>>2]|0;U=c[z>>2]|0;c[y>>2]=U;c[z>>2]=X;W=c[l>>2]|0;V=I-W|0;c[B>>2]=(c[B>>2]|0)+1;if((V|0)>0){H=H+W|0;I=V;J=X;K=U;L=Fc;M=Gc;N=0;O=Jc}else{la=128;break}}if((la|0)==128){jd=c[t>>2]|0;kd=c[v>>2]|0;ld=Fc;md=Gc;nd=0;od=Jc;break}do{if((la|0)==88){O=c[C>>2]|0;M=(c[D>>2]&1024|0)!=0;L=c[(M?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=M?25536:25544;c[g+8>>2]=L;c[g+12>>2]=ia;ue(O,26376,25552,g);if((ha|0)==0){pd=ka}else{c[ka>>2]=ha;pd=ka+4|0}if((ia|0)==(j|0)){ed=fa;fd=ga;gd=N;hd=ja;id=pd}else{O=c[B>>2]|0;L=c[C>>2]|0;M=(c[D>>2]&1024|0)!=0;J=c[(M?E:F)>>2]|0;c[g>>2]=ia>>>0<j>>>0?25496:25512;c[g+4>>2]=O;c[g+8>>2]=M?25536:25544;c[g+12>>2]=J;c[g+16>>2]=ia;c[g+20>>2]=j;ue(L,26376,25448,g);L=(ia|0)>(j|0);if(L&pd>>>0>K>>>0){J=ia;M=pd;while(1){O=M+ -4|0;I=J-(c[O>>2]|0)|0;z=(I|0)>(j|0);if(z&O>>>0>K>>>0){J=I;M=O}else{qd=z;rd=I;sd=O;break}}}else{qd=L;rd=ia;sd=pd}if((rd|0)>=(j|0)){if(!qd){ed=fa;fd=ga;gd=N;hd=ja;id=sd;break}c[sd>>2]=j;c[sd+4>>2]=0;ed=fa;fd=ga;gd=N;hd=ja;id=sd+8|0;break}if((sd-K&4|0)==0){td=sd}else{c[sd>>2]=0;td=sd+4|0}c[td>>2]=j-((rd|0)<0?0:rd);ed=fa;fd=ga;gd=N;hd=ja;id=td+4|0}}}while(0);do{if((fd|0)<13){if(!(hd>>>0<x>>>0)){ud=ed;vd=(fd|0)==0?0:13;wd=hd;break}N=hd+1|0;F=(d[k+(d[hd]|0)|0]|0)<<fd|ed;E=fd+8|0;if((E|0)<13){if(N>>>0<x>>>0){ud=(d[k+(d[N]|0)|0]|0)<<E|F;vd=fd+16|0;wd=hd+2|0}else{ud=F;vd=13;wd=N}}else{ud=F;vd=E;wd=N}}else{ud=ed;vd=fd;wd=hd}}while(0);ob[c[G>>2]&3](H,K,id,j);c[p>>2]=vd+ -13;c[n>>2]=ud>>>13;c[r>>2]=gd;c[v>>2]=(c[t>>2]|0)-wd+(c[v>>2]|0);c[t>>2]=wd;m=(c[B>>2]|0)!=0?1:-1;i=f;return m|0}else{jd=u;kd=w;ld=o;md=q;nd=s;od=u}}while(0);c[p>>2]=md;c[n>>2]=ld;c[r>>2]=nd;c[v>>2]=jd-od+kd;c[t>>2]=od;m=1;i=f;return m|0}function pf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+16|0;f=c[a+576>>2]|0;g=f+8|0;if(((d|0)%(c[g>>2]|0)|0|0)!=0){sc(c[a+628>>2]|0,25720,25736,e);h=0;i=e;return h|0}if((d|0)<=0){h=1;i=e;return h|0}j=f+80|0;k=f+12|0;f=b;b=d;while(1){vf(a,f,c[j>>2]|0,c[k>>2]|0);qe(c[j>>2]|0,f,c[g>>2]|0);d=c[g>>2]|0;l=b-d|0;if((l|0)>0){f=f+d|0;b=l}else{h=1;break}}i=e;return h|0}function qf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b+576>>2]|0;uf(b,1,12);uf(b,1,12);f=e+52|0;if((c[f>>2]|0)==8){i=d;return 1}g=b+608|0;if((c[g>>2]|0)>=(c[b+592>>2]|0)){we(b)|0}h=e+48|0;e=c[h>>2]&255;j=b+604|0;b=c[j>>2]|0;c[j>>2]=b+1;a[b]=e;c[g>>2]=(c[g>>2]|0)+1;c[h>>2]=0;c[f>>2]=8;i=d;return 1}function rf(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;i=i+16|0;d=b;if((mf(a)|0)==0){e=0;i=b;return e|0}c[a+532>>2]=18;c[a+540>>2]=18;c[a+548>>2]=18;c[d>>2]=7;e=Ib(a,65536,d)|0;i=b;return e|0}function sf(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0;f=i;i=i+32|0;g=f;h=c[a+576>>2]|0;j=c[h+12>>2]|0;k=c[h+44>>2]|0;l=c[h+4>>2]|0;m=h+8|0;if(((e|0)%(c[m>>2]|0)|0|0)!=0){sc(c[a+628>>2]|0,25392,25408,g);n=-1;i=f;return n|0}o=h+48|0;p=c[o>>2]|0;q=h+52|0;r=c[q>>2]|0;s=h+56|0;t=c[s>>2]|0;u=a+604|0;v=c[u>>2]|0;w=a+608|0;x=c[w>>2]|0;y=v+x|0;z=c[h+72>>2]|0;do{if((e|0)>0){A=h+92|0;B=a+628|0;C=a+12|0;D=a+492|0;E=a+452|0;F=h+60|0;G=(l&4|0)==0;H=(l&8|0)==0;I=z;J=b;K=e;L=p;M=r;N=t;O=v;a:while(1){P=L;Q=M;R=0;S=O;T=z;b:while(1){U=P;V=Q;W=0;X=R;Y=S;while(1){do{if((V|0)<12){if(!(Y>>>0<y>>>0)){if((V|0)==0){Z=U;_=W;$=X;aa=Y;ba=T;break a}else{ca=U;da=12;ea=Y;break}}fa=Y+1|0;ga=(d[k+(d[Y]|0)|0]|0)<<V|U;ha=V+8|0;if((ha|0)<12){if(fa>>>0<y>>>0){ca=(d[k+(d[fa]|0)|0]|0)<<ha|ga;da=V+16|0;ea=Y+2|0}else{ca=ga;da=12;ea=fa}}else{ca=ga;da=ha;ea=fa}}else{ca=U;da=V;ea=Y}}while(0);ia=ca&4095;fa=d[28585+(ia<<3)|0]|0;ja=da-fa|0;ka=ca>>>fa;fa=d[28584+(ia<<3)|0]|0;if((fa|0)==7){break}else if((fa|0)==12){la=ka;ma=ja;na=1;oa=W;pa=X;qa=ea;ra=T;sa=40;break b}else if(!((fa|0)==11|(fa|0)==9)){sa=16;break b}fa=c[28588+(ia<<3)>>2]|0;U=ka;V=ja;W=fa+W|0;X=fa+X|0;Y=ea}Y=c[28588+(ia<<3)>>2]|0;V=Y+W|0;ta=T+4|0;c[T>>2]=V;U=Y+X|0;if((U|0)<(j|0)){ua=ka;va=ja;wa=0;xa=U;ya=ea}else{za=ka;Aa=ja;Ba=N;Ca=U;Da=ea;Ea=ta;break}while(1){do{if((va|0)<13){if(!(ya>>>0<y>>>0)){if((va|0)==0){Z=ua;_=wa;$=xa;aa=ya;ba=ta;break a}else{Fa=ua;Ga=13;Ha=ya;break}}U=ya+1|0;Y=(d[k+(d[ya]|0)|0]|0)<<va|ua;fa=va+8|0;if((fa|0)<13){if(U>>>0<y>>>0){Fa=(d[k+(d[U]|0)|0]|0)<<fa|Y;Ga=va+16|0;Ha=ya+2|0}else{Fa=Y;Ga=13;Ha=U}}else{Fa=Y;Ga=fa;Ha=U}}else{Fa=ua;Ga=va;Ha=ya}}while(0);Ia=Fa&8191;U=d[61353+(Ia<<3)|0]|0;Ja=Ga-U|0;Ka=Fa>>>U;U=d[61352+(Ia<<3)|0]|0;if((U|0)==8){break}else if((U|0)==12){la=Ka;ma=Ja;na=1;oa=wa;pa=xa;qa=Ha;ra=ta;sa=40;break b}else if(!((U|0)==11|(U|0)==10)){sa=26;break b}U=c[61356+(Ia<<3)>>2]|0;ua=Ka;va=Ja;wa=U+wa|0;xa=U+xa|0;ya=Ha}U=c[61356+(Ia<<3)>>2]|0;fa=U+wa|0;Y=T+8|0;c[ta>>2]=fa;ha=U+xa|0;if((ha|0)>=(j|0)){za=Ka;Aa=Ja;Ba=N;Ca=ha;Da=Ha;Ea=Y;break}if((fa|0)!=0){P=Ka;Q=Ja;R=ha;S=Ha;T=Y;continue}P=Ka;Q=Ja;R=ha;S=Ha;T=(V|0)==0?T:Y}if((sa|0)==16){sa=0;S=c[B>>2]|0;R=(c[C>>2]&1024|0)!=0;Q=c[(R?D:E)>>2]|0;c[g>>2]=c[A>>2];c[g+4>>2]=R?25536:25544;c[g+8>>2]=Q;c[g+12>>2]=X;sc(S,25392,25600,g);la=ka;ma=ja;na=N;oa=W;pa=X;qa=ea;ra=T;sa=40}else if((sa|0)==26){sa=0;S=c[B>>2]|0;Q=(c[C>>2]&1024|0)!=0;R=c[(Q?D:E)>>2]|0;c[g>>2]=c[A>>2];c[g+4>>2]=Q?25536:25544;c[g+8>>2]=R;c[g+12>>2]=xa;sc(S,25392,25600,g);la=Ka;ma=Ja;na=N;oa=wa;pa=xa;qa=Ha;ra=ta;sa=40}if((sa|0)==40){sa=0;if((oa|0)==0){za=la;Aa=ma;Ba=na;Ca=pa;Da=qa;Ea=ra}else{c[ra>>2]=oa;za=la;Aa=ma;Ba=na;Ca=pa;Da=qa;Ea=ra+4|0}}do{if((Ca|0)==(j|0)){La=Ea}else{S=c[A>>2]|0;R=c[B>>2]|0;Q=(c[C>>2]&1024|0)!=0;P=c[(Q?D:E)>>2]|0;c[g>>2]=Ca>>>0<j>>>0?25496:25512;c[g+4>>2]=S;c[g+8>>2]=Q?25536:25544;c[g+12>>2]=P;c[g+16>>2]=Ca;c[g+20>>2]=j;ue(R,25392,25448,g);R=(Ca|0)>(j|0);if(R&Ea>>>0>z>>>0){P=Ca;Q=Ea;while(1){S=Q+ -4|0;Y=P-(c[S>>2]|0)|0;ha=(Y|0)>(j|0);if(ha&S>>>0>z>>>0){P=Y;Q=S}else{Ma=ha;Na=Y;Oa=S;break}}}else{Ma=R;Na=Ca;Oa=Ea}if((Na|0)>=(j|0)){if(!Ma){La=Oa;break}c[Oa>>2]=j;c[Oa+4>>2]=0;La=Oa+8|0;break}if((Oa-I&4|0)==0){Pa=Oa}else{c[Oa>>2]=0;Pa=Oa+4|0}c[Pa>>2]=j-((Na|0)<0?0:Na);La=Pa+4|0}}while(0);ob[c[F>>2]&3](J,z,La,j);if(G){if(!H){T=Aa&-16;Q=za>>>(Aa-T|0);if((T|0)==0){Qa=Q;Ra=0;Sa=(Da&1|0)==0?Da:Da+1|0}else{Qa=Q;Ra=T;Sa=Da}}else{Qa=za;Ra=Aa;Sa=Da}}else{T=Aa&-8;Qa=za>>>(Aa-T|0);Ra=T;Sa=Da}T=c[m>>2]|0;Q=K-T|0;c[A>>2]=(c[A>>2]|0)+1;if((Q|0)>0){J=J+T|0;K=Q;L=Qa;M=Ra;N=Ba;O=Sa}else{sa=58;break}}if((sa|0)==58){Ta=c[u>>2]|0;Ua=c[w>>2]|0;Va=Qa;Wa=Ra;Xa=Ba;Ya=Sa;break}O=c[B>>2]|0;M=(c[C>>2]&1024|0)!=0;L=c[(M?D:E)>>2]|0;c[g>>2]=c[A>>2];c[g+4>>2]=M?25536:25544;c[g+8>>2]=L;c[g+12>>2]=$;ue(O,25392,25552,g);if((_|0)==0){Za=ba}else{c[ba>>2]=_;Za=ba+4|0}do{if(($|0)==(j|0)){_a=Za}else{O=c[A>>2]|0;L=c[B>>2]|0;M=(c[C>>2]&1024|0)!=0;K=c[(M?D:E)>>2]|0;c[g>>2]=$>>>0<j>>>0?25496:25512;c[g+4>>2]=O;c[g+8>>2]=M?25536:25544;c[g+12>>2]=K;c[g+16>>2]=$;c[g+20>>2]=j;ue(L,25392,25448,g);L=($|0)>(j|0);if(L&Za>>>0>z>>>0){K=$;M=Za;while(1){O=M+ -4|0;H=K-(c[O>>2]|0)|0;G=(H|0)>(j|0);if(G&O>>>0>z>>>0){K=H;M=O}else{$a=G;ab=H;bb=O;break}}}else{$a=L;ab=$;bb=Za}if((ab|0)>=(j|0)){if(!$a){_a=bb;break}c[bb>>2]=j;c[bb+4>>2]=0;_a=bb+8|0;break}if((bb-I&4|0)==0){cb=bb}else{c[bb>>2]=0;cb=bb+4|0}c[cb>>2]=j-((ab|0)<0?0:ab);_a=cb+4|0}}while(0);ob[c[F>>2]&3](J,z,_a,j);c[q>>2]=0;c[o>>2]=Z;c[s>>2]=N;c[w>>2]=(c[u>>2]|0)-aa+(c[w>>2]|0);c[u>>2]=aa;n=-1;i=f;return n|0}else{Ta=v;Ua=x;Va=p;Wa=r;Xa=t;Ya=v}}while(0);c[q>>2]=Wa;c[o>>2]=Va;c[s>>2]=Xa;c[w>>2]=Ta-Ya+Ua;c[u>>2]=Ya;n=1;i=f;return n|0}function tf(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;i=i+16|0;d=b;if((mf(a)|0)==0){e=0;i=b;return e|0}c[a+532>>2]=18;c[a+540>>2]=18;c[a+548>>2]=18;c[d>>2]=11;e=Ib(a,65536,d)|0;i=b;return e|0}function uf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;g=c[b+576>>2]|0;h=g+52|0;j=c[h>>2]|0;k=g+48|0;g=c[k>>2]|0;if(!(j>>>0<e>>>0)){if(e>>>0<9){l=e;m=j;n=g}else{za(25648,25128,608,25664)}}else{o=b+608|0;p=b+592|0;q=b+604|0;r=e;e=c[o>>2]|0;s=j;j=g;while(1){g=r-s|0;if((e|0)>=(c[p>>2]|0)){we(b)|0}t=c[q>>2]|0;c[q>>2]=t+1;a[t]=d>>>g|j;t=(c[o>>2]|0)+1|0;c[o>>2]=t;if(g>>>0>8){r=g;e=t;s=8;j=0}else{l=g;m=8;n=0;break}}}j=m-l|0;s=(c[25680+(l<<2)>>2]&d)<<j|n;if((m|0)!=(l|0)){u=j;v=s;c[k>>2]=v;c[h>>2]=u;i=f;return}j=b+608|0;if((c[j>>2]|0)>=(c[b+592>>2]|0)){we(b)|0}l=b+604|0;b=c[l>>2]|0;c[l>>2]=b+1;a[b]=s;c[j>>2]=(c[j>>2]|0)+1;u=8;v=0;c[k>>2]=v;c[h>>2]=u;i=f;return}function vf(b,f,g,h){b=b|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0;j=i;k=a[f]|0;l=(h|0)>0;a:do{if(k<<24>>24>-1&l){if((h|0)>63){b:do{if((f&3|0)==0){m=f;n=h;o=0}else{p=f;q=k;r=h;s=0;while(1){if(!(q<<24>>24==0)){break}t=s+8|0;u=r+ -8|0;v=p+1|0;if((v&3|0)==0){m=v;n=u;o=t;break b}p=v;q=a[v]|0;r=u;s=t}w=(d[26120+(q&255)|0]|0)+s|0;break a}}while(0);c:do{if((n|0)>31){r=n;p=m;t=o;while(1){if((c[p>>2]|0)!=0){x=r;y=p;z=t;break c}u=t+32|0;v=r+ -32|0;A=p+4|0;if((v|0)>31){r=v;p=A;t=u}else{x=v;y=A;z=u;break}}}else{x=n;y=m;z=o}}while(0);B=y;C=x;D=z}else{B=f;C=h;D=0}d:do{if((C|0)>7){t=B;p=C;r=D;while(1){E=a[t]|0;if(!(E<<24>>24==0)){break}s=r+8|0;q=p+ -8|0;u=t+1|0;if((q|0)>7){t=u;p=q;r=s}else{F=u;G=q;H=s;break d}}w=(d[26120+(E&255)|0]|0)+r|0;break a}else{F=B;G=C;H=D}}while(0);if((G|0)>0){p=d[26120+(d[F]|0)|0]|0;w=((p|0)>(G|0)?G:p)+H|0}else{w=H}}else{w=0}}while(0);H=a[g]|0;e:do{if(H<<24>>24>-1&l){if((h|0)>63){f:do{if((g&3|0)==0){I=g;J=h;K=0}else{G=g;F=H;D=h;C=0;while(1){if(!(F<<24>>24==0)){break}B=C+8|0;E=D+ -8|0;z=G+1|0;if((z&3|0)==0){I=z;J=E;K=B;break f}G=z;F=a[z]|0;D=E;C=B}L=0;M=w;N=(d[26120+(F&255)|0]|0)+C|0;break e}}while(0);g:do{if((J|0)>31){D=J;G=I;r=K;while(1){if((c[G>>2]|0)!=0){O=D;P=G;Q=r;break g}B=r+32|0;E=D+ -32|0;z=G+4|0;if((E|0)>31){D=E;G=z;r=B}else{O=E;P=z;Q=B;break}}}else{O=J;P=I;Q=K}}while(0);R=P;S=O;T=Q}else{R=g;S=h;T=0}h:do{if((S|0)>7){r=R;G=S;D=T;while(1){U=a[r]|0;if(!(U<<24>>24==0)){break}C=D+8|0;F=G+ -8|0;B=r+1|0;if((F|0)>7){r=B;G=F;D=C}else{V=B;W=F;X=C;break h}}L=0;M=w;N=(d[26120+(U&255)|0]|0)+D|0;break e}else{V=R;W=S;X=T}}while(0);if((W|0)>0){G=d[26120+(d[V]|0)|0]|0;L=0;M=w;N=((G|0)>(W|0)?W:G)+X|0}else{L=0;M=w;N=X}}else{L=0;M=w;N=0}}while(0);while(1){if(N>>>0<h>>>0){if(((d[g+(N>>>3)|0]|0)&1<<(N&7^7)|0)==0){Y=wf(g,N,h)|0}else{Y=xf(g,N,h)|0}Z=Y+N|0}else{Z=h}do{if(Z>>>0<M>>>0){uf(b,1,4);_=Z}else{w=N-M+3|0;if(w>>>0<7){uf(b,e[25778+(w*6|0)>>1]|0,e[25776+(w*6|0)>>1]|0);_=M;break}if(M>>>0<h>>>0){if(((d[f+(M>>>3)|0]|0)&1<<(M&7^7)|0)==0){$=wf(f,M,h)|0}else{$=xf(f,M,h)|0}aa=$+M|0}else{aa=h}uf(b,1,3);if((L|0)!=(0-M|0)?((d[f+(L>>>3)|0]|0)&1<<(L&7^7)|0)!=0:0){yf(b,M-L|0,24440);yf(b,aa-M|0,23784);_=aa;break}yf(b,M-L|0,23784);yf(b,aa-M|0,24440);_=aa}}while(0);if(!(_>>>0<h>>>0)){break}if(((d[f+(_>>>3)|0]|0)&1<<(_&7^7)|0)==0){w=wf(f,_,h)|0;X=(xf(g,_,h)|0)+_|0;ba=w;ca=wf(g,X,h)|0;da=X}else{X=xf(f,_,h)|0;w=(wf(g,_,h)|0)+_|0;ba=X;ca=xf(g,w,h)|0;da=w}L=_;M=ba+_|0;N=ca+da|0}i=j;return}function wf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;g=i;h=f-e|0;f=e>>3;j=b+f|0;if((h|0)<=0){k=0;i=g;return k|0}l=e&7;do{if((l|0)!=0){e=d[26120+((d[j]|0)<<l&255)|0]|0;m=8-l|0;n=e>>>0>m>>>0?m:e;e=(n|0)>(h|0)?h:n;if((e+l|0)<8){k=e;i=g;return k|0}else{o=b+(f+1)|0;p=h-e|0;q=e;break}}else{o=j;p=h;q=0}}while(0);if((p|0)>63){a:do{if((o&3|0)==0){r=o;s=p;t=q}else{h=o;j=p;f=q;while(1){u=a[h]|0;if(!(u<<24>>24==0)){break}b=f+8|0;l=j+ -8|0;e=h+1|0;if((e&3|0)==0){r=e;s=l;t=b;break a}else{h=e;j=l;f=b}}k=(d[26120+(u&255)|0]|0)+f|0;i=g;return k|0}}while(0);b:do{if((s|0)>31){u=s;j=r;h=t;while(1){if((c[j>>2]|0)!=0){v=u;w=j;x=h;break b}b=h+32|0;l=u+ -32|0;e=j+4|0;if((l|0)>31){u=l;j=e;h=b}else{v=l;w=e;x=b;break}}}else{v=s;w=r;x=t}}while(0);y=w;z=v;A=x}else{y=o;z=p;A=q}c:do{if((z|0)>7){q=y;p=z;o=A;while(1){B=a[q]|0;if(!(B<<24>>24==0)){break}x=o+8|0;v=p+ -8|0;w=q+1|0;if((v|0)>7){q=w;p=v;o=x}else{C=w;D=v;E=x;break c}}k=(d[26120+(B&255)|0]|0)+o|0;i=g;return k|0}else{C=y;D=z;E=A}}while(0);if((D|0)<=0){k=E;i=g;return k|0}A=d[26120+(d[C]|0)|0]|0;k=((A|0)>(D|0)?D:A)+E|0;i=g;return k|0}function xf(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;g=i;h=f-e|0;f=e>>3;j=b+f|0;if((h|0)<=0){k=0;i=g;return k|0}l=e&7;do{if((l|0)!=0){e=d[25864+((d[j]|0)<<l&255)|0]|0;m=8-l|0;n=e>>>0>m>>>0?m:e;e=(n|0)>(h|0)?h:n;if((e+l|0)<8){k=e;i=g;return k|0}else{o=b+(f+1)|0;p=h-e|0;q=e;break}}else{o=j;p=h;q=0}}while(0);if((p|0)>63){a:do{if((o&3|0)==0){r=o;s=p;t=q}else{h=o;j=p;f=q;while(1){u=a[h]|0;if(!(u<<24>>24==-1)){break}b=f+8|0;l=j+ -8|0;e=h+1|0;if((e&3|0)==0){r=e;s=l;t=b;break a}else{h=e;j=l;f=b}}k=(d[25864+(u&255)|0]|0)+f|0;i=g;return k|0}}while(0);b:do{if((s|0)>31){u=s;j=r;h=t;while(1){if(!((c[j>>2]|0)==-1)){v=u;w=j;x=h;break b}b=h+32|0;l=u+ -32|0;e=j+4|0;if((l|0)>31){u=l;j=e;h=b}else{v=l;w=e;x=b;break}}}else{v=s;w=r;x=t}}while(0);y=w;z=v;A=x}else{y=o;z=p;A=q}c:do{if((z|0)>7){q=y;p=z;o=A;while(1){B=a[q]|0;if(!(B<<24>>24==-1)){break}x=o+8|0;v=p+ -8|0;w=q+1|0;if((v|0)>7){q=w;p=v;o=x}else{C=w;D=v;E=x;break c}}k=(d[25864+(B&255)|0]|0)+o|0;i=g;return k|0}else{C=y;D=z;E=A}}while(0);if((D|0)<=0){k=E;i=g;return k|0}A=d[25864+(d[C]|0)|0]|0;k=((A|0)>(D|0)?D:A)+E|0;i=g;return k|0}function yf(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;h=i;j=c[d+576>>2]|0;k=j+52|0;l=c[k>>2]|0;m=j+48|0;j=c[m>>2]|0;a:do{if((f|0)>2623){n=g+620|0;o=g+618|0;p=d+608|0;q=d+592|0;r=d+604|0;s=g+622|0;t=f;u=l;v=j;while(1){w=e[n>>1]|0;x=b[o>>1]|0;y=x&65535;if(!(y>>>0>u>>>0)){if((x&65535)<9){z=u;A=v;B=y}else{break}}else{x=c[p>>2]|0;C=u;D=v;E=y;while(1){y=E-C|0;if((x|0)>=(c[q>>2]|0)){we(d)|0}F=c[r>>2]|0;c[r>>2]=F+1;a[F]=w>>>y|D;F=(c[p>>2]|0)+1|0;c[p>>2]=F;if(y>>>0>8){x=F;C=8;D=0;E=y}else{z=8;A=0;B=y;break}}}E=z-B|0;D=(c[25680+(B<<2)>>2]&w)<<E|A;if((z|0)==(B|0)){if((c[p>>2]|0)>=(c[q>>2]|0)){we(d)|0}C=c[r>>2]|0;c[r>>2]=C+1;a[C]=D;c[p>>2]=(c[p>>2]|0)+1;G=8;H=0}else{G=E;H=D}D=t-(b[s>>1]|0)|0;if((D|0)>2623){t=D;u=G;v=H}else{I=D;J=G;K=H;break a}}za(25648,25128,650,25824)}else{I=f;J=l;K=j}}while(0);if((I|0)>63){j=I>>6;l=j+63|0;f=g+(l*6|0)+4|0;if((b[f>>1]|0)!=(j<<6|0)){za(25832,25128,655,25824)}j=e[g+(l*6|0)+2>>1]|0;H=b[g+(l*6|0)>>1]|0;l=H&65535;if(!(l>>>0>J>>>0)){if((H&65535)<9){L=J;M=K;N=l}else{za(25648,25128,660,25824)}}else{H=d+608|0;G=d+592|0;B=d+604|0;z=c[H>>2]|0;A=J;v=K;u=l;while(1){l=u-A|0;if((z|0)>=(c[G>>2]|0)){we(d)|0}t=c[B>>2]|0;c[B>>2]=t+1;a[t]=j>>>l|v;t=(c[H>>2]|0)+1|0;c[H>>2]=t;if(l>>>0>8){z=t;A=8;v=0;u=l}else{L=8;M=0;N=l;break}}}u=L-N|0;v=(c[25680+(N<<2)>>2]&j)<<u|M;if((L|0)==(N|0)){N=d+608|0;if((c[N>>2]|0)>=(c[d+592>>2]|0)){we(d)|0}L=d+604|0;M=c[L>>2]|0;c[L>>2]=M+1;a[M]=v;c[N>>2]=(c[N>>2]|0)+1;O=8;P=0}else{O=u;P=v}Q=I-(b[f>>1]|0)|0;R=O;S=P}else{Q=I;R=J;S=K}K=e[g+(Q*6|0)+2>>1]|0;J=b[g+(Q*6|0)>>1]|0;Q=J&65535;if(!(Q>>>0>R>>>0)){if((J&65535)<9){T=R;U=S;V=Q}else{za(25648,25128,667,25824)}}else{J=d+608|0;g=d+592|0;I=d+604|0;P=c[J>>2]|0;O=R;R=S;S=Q;while(1){Q=S-O|0;if((P|0)>=(c[g>>2]|0)){we(d)|0}f=c[I>>2]|0;c[I>>2]=f+1;a[f]=K>>>Q|R;f=(c[J>>2]|0)+1|0;c[J>>2]=f;if(Q>>>0>8){P=f;O=8;R=0;S=Q}else{T=8;U=0;V=Q;break}}}S=T-V|0;R=(c[25680+(V<<2)>>2]&K)<<S|U;if((T|0)!=(V|0)){W=S;X=R;c[m>>2]=X;c[k>>2]=W;i=h;return}S=d+608|0;if((c[S>>2]|0)>=(c[d+592>>2]|0)){we(d)|0}V=d+604|0;d=c[V>>2]|0;c[V>>2]=d+1;a[d]=R;c[S>>2]=(c[S>>2]|0)+1;W=8;X=0;c[m>>2]=X;c[k>>2]=W;i=h;return}function zf(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[a+576>>2]|0;if((g|0)==0){za(26776,25128,1198,27464)}if((d|0)==65540){h=c[g+60>>2]|0;j=c[e>>2]|0;k=c[j>>2]|0;c[e>>2]=j+4;c[k>>2]=h;l=1;i=f;return l|0}else if((d|0)==65536){h=c[g+4>>2]|0;k=c[e>>2]|0;j=c[k>>2]|0;c[e>>2]=k+4;c[j>>2]=h;l=1;i=f;return l|0}else if((d|0)==326){h=c[g+24>>2]|0;j=c[e>>2]|0;k=c[j>>2]|0;c[e>>2]=j+4;c[k>>2]=h;l=1;i=f;return l|0}else if((d|0)==293|(d|0)==292){h=c[g+28>>2]|0;k=c[e>>2]|0;j=c[k>>2]|0;c[e>>2]=k+4;c[j>>2]=h;l=1;i=f;return l|0}else if((d|0)==328){h=c[g+20>>2]|0;j=c[e>>2]|0;k=c[j>>2]|0;c[e>>2]=j+4;c[k>>2]=h;l=1;i=f;return l|0}else if((d|0)==327){h=b[g+16>>1]|0;k=c[e>>2]|0;j=c[k>>2]|0;c[e>>2]=k+4;b[j>>1]=h;l=1;i=f;return l|0}else{l=fb[c[g+32>>2]&31](a,d,e)|0;i=f;return l|0}return 0}function Af(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;h=a+576|0;j=c[h>>2]|0;if((j|0)==0){za(26776,25128,1151,27424)}k=c[j+36>>2]|0;if((k|0)==0){za(27440,25128,1152,27424)}if((d|0)==328){l=c[f>>2]|0;m=c[l>>2]|0;c[f>>2]=l+4;c[j+20>>2]=m}else if((d|0)==327){m=c[f>>2]|0;l=c[m>>2]|0;c[f>>2]=m+4;b[j+16>>1]=l}else if((d|0)==292){if((b[a+88>>1]|0)==3){l=c[f>>2]|0;m=c[l>>2]|0;c[f>>2]=l+4;c[j+28>>2]=m}}else if((d|0)==65540){m=c[f>>2]|0;l=c[m>>2]|0;c[f>>2]=m+4;c[(c[h>>2]|0)+60>>2]=l;n=1;i=g;return n|0}else if((d|0)==65536){l=c[f>>2]|0;h=c[l>>2]|0;c[f>>2]=l+4;c[j+4>>2]=h;n=1;i=g;return n|0}else if((d|0)==293){if((b[a+88>>1]|0)==4){h=c[f>>2]|0;l=c[h>>2]|0;c[f>>2]=h+4;c[j+28>>2]=l}}else if((d|0)==326){l=c[f>>2]|0;h=c[l>>2]|0;c[f>>2]=l+4;c[j+24>>2]=h}else{n=fb[k&31](a,d,f)|0;i=g;return n|0}f=_b(a,d)|0;if((f|0)==0){n=0;i=g;return n|0}d=e[f+24>>1]|0;f=a+(d>>>5<<2)+40|0;c[f>>2]=1<<(d&31)|c[f>>2];f=a+12|0;c[f>>2]=c[f>>2]|8;n=1;i=g;return n|0}function Bf(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;i=i+16|0;h=g;j=c[a+576>>2]|0;if((j|0)==0){za(26776,25128,1231,27120)}k=a+48|0;l=c[k>>2]|0;if((l&512|0)==0){m=l}else{if((b[a+88>>1]|0)==4){Za(27144,18,1,d|0)|0;if((c[j+28>>2]&2|0)!=0){c[h>>2]=27136;$a(d|0,27168,h|0)|0}}else{Za(27192,18,1,d|0)|0;l=j+28|0;n=c[l>>2]|0;if((n&1|0)==0){o=n;p=27136}else{c[h>>2]=27136;$a(d|0,27216,h|0)|0;o=c[l>>2]|0;p=27232}if((o&4|0)==0){q=o;r=p}else{c[h>>2]=p;$a(d|0,27240,h|0)|0;q=c[l>>2]|0;r=27232}if((q&2|0)!=0){c[h>>2]=r;$a(d|0,27168,h|0)|0}}r=c[j+28>>2]|0;c[h>>2]=r;c[h+4>>2]=r;$a(d|0,27256,h|0)|0;m=c[k>>2]|0}if((m&8|0)==0){s=m}else{Za(27272,11,1,d|0)|0;m=j+16|0;r=e[m>>1]|0;if((r|0)==1){Za(27296,21,1,d|0)|0}else if((r|0)==2){Za(27320,19,1,d|0)|0}else if((r|0)==0){Za(27288,6,1,d|0)|0}r=e[m>>1]|0;c[h>>2]=r;c[h+4>>2]=r;$a(d|0,27344,h|0)|0;s=c[k>>2]|0}if((s&4|0)==0){t=s}else{c[h>>2]=c[j+24>>2];$a(d|0,27360,h|0)|0;t=c[k>>2]|0}if((t&16|0)!=0){c[h>>2]=c[j+20>>2];$a(d|0,27384,h|0)|0}h=c[j+40>>2]|0;if((h|0)==0){i=g;return}kb[h&63](a,d,f);i=g;return}function Cf(a){a=a|0;return 1}function Df(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;i=i+16|0;e=d;f=a+576|0;g=c[f>>2]|0;if((b[a+84>>1]|0)!=1){sc(c[a+628>>2]|0,26912,26928,e);h=0;i=d;return h|0}if((c[a+12>>2]&1024|0)==0){j=Md(a)|0;k=a+56|0}else{j=$d(a)|0;k=a+68|0}l=c[k>>2]|0;c[g+8>>2]=j;c[g+12>>2]=l;k=g+28|0;if((c[k>>2]&1|0)==0){m=(b[a+88>>1]|0)==4}else{m=1}n=g+64|0;c[n>>2]=0;if(l>>>0<4294967264){o=l+31&-32}else{o=0}if(m){p=(o&2147483616|0)==(o|0)?o<<1:0}else{p=o}if((p|0)!=0?(o=p<<1,q=(p&2147483647|0)==(p|0),!((o|0)==0|q^1)):0){r=Ae(a,q?o:0,4,27032)|0;c[n>>2]=r;if((r|0)==0){h=0;i=d;return h|0}Li(r|0,0,(q?p<<3:0)|0)|0;q=c[n>>2]|0;c[g+72>>2]=q;if(m){c[g+68>>2]=q+(p<<2)}else{c[g+68>>2]=0}if((b[a+88>>1]|0)==3?(c[k>>2]&1|0)!=0:0){c[a+532>>2]=19;c[a+540>>2]=19;c[a+548>>2]=19}k=c[f>>2]|0;if(!m){c[k+80>>2]=0;h=1;i=d;return h|0}m=me(j)|0;c[k+80>>2]=m;if((m|0)!=0){h=1;i=d;return h|0}sc(c[a+628>>2]|0,26912,27064,e);h=0;i=d;return h|0}m=c[a+628>>2]|0;k=c[a>>2]|0;c[e>>2]=l;sc(m,k,26984,e);h=0;i=d;return h|0}function Ef(a,d){a=a|0;d=d|0;var e=0,f=0;d=i;e=c[a+576>>2]|0;if((e|0)==0){za(26848,25128,152,26896)}c[e+52>>2]=0;c[e+48>>2]=0;c[e+56>>2]=0;c[e+44>>2]=Wd((b[a+94>>1]|0)!=2|0)|0;a=c[e+68>>2]|0;if((a|0)==0){f=e+92|0;c[f>>2]=0;i=d;return 1}c[a>>2]=c[e+12>>2];c[a+4>>2]=0;f=e+92|0;c[f>>2]=0;i=d;return 1}function Ff(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,pb=0;f=i;i=i+32|0;g=f;h=c[a+576>>2]|0;j=c[h+12>>2]|0;k=c[h+44>>2]|0;l=h+8|0;if(((e|0)%(c[l>>2]|0)|0|0)!=0){sc(c[a+628>>2]|0,26880,25408,g);m=-1;i=f;return m|0}n=h+48|0;o=c[n>>2]|0;p=h+52|0;q=c[p>>2]|0;r=h+56|0;s=c[r>>2]|0;t=a+604|0;u=c[t>>2]|0;v=a+608|0;w=c[v>>2]|0;x=u+w|0;y=c[h+72>>2]|0;a:do{if((e|0)>0){z=h+92|0;A=a+628|0;B=a+12|0;C=a+492|0;D=a+452|0;E=h+60|0;F=y;G=b;H=e;I=o;J=q;K=s;L=u;b:while(1){c:do{if((K|0)==0){M=I;N=J;O=L;while(1){do{if((N|0)<11){if(!(O>>>0<x>>>0)){if((N|0)==0){P=M;Q=0;R=O;S=67;break b}else{T=M;U=11;V=O;break}}W=O+1|0;X=(d[k+(d[O]|0)|0]|0)<<N|M;Y=N+8|0;if((Y|0)<11){if(W>>>0<x>>>0){T=(d[k+(d[W]|0)|0]|0)<<Y|X;U=N+16|0;V=O+2|0}else{T=X;U=11;V=W}}else{T=X;U=Y;V=W}}else{T=M;U=N;V=O}}while(0);if((T&2047|0)==0){Z=T;_=U;$=V;break c}M=T>>>1;N=U+ -1|0;O=V}}else{Z=I;_=J;$=L}}while(0);while(1){do{if((_|0)<8){if(!($>>>0<x>>>0)){if((_|0)==0){P=Z;Q=K;R=$;S=67;break b}else{aa=Z;ba=8;ca=$;break}}else{aa=(d[k+(d[$]|0)|0]|0)<<_|Z;ba=_+8|0;ca=$+1|0;break}}else{aa=Z;ba=_;ca=$}}while(0);if((aa&255|0)!=0){da=aa;ea=ba;break}Z=aa>>>8;_=ba+ -8|0;$=ca}while(1){O=ea+ -1|0;N=da>>>1;if((da&1|0)==0){da=N;ea=O}else{fa=N;ga=O;ha=0;ia=ca;ja=y;break}}d:while(1){O=fa;N=ga;ka=0;la=ha;M=ia;while(1){do{if((N|0)<12){if(!(M>>>0<x>>>0)){if((N|0)==0){ma=O;na=ka;oa=la;pa=M;qa=ja;S=44;break b}else{ra=O;sa=12;ta=M;break}}W=M+1|0;Y=(d[k+(d[M]|0)|0]|0)<<N|O;X=N+8|0;if((X|0)<12){if(W>>>0<x>>>0){ra=(d[k+(d[W]|0)|0]|0)<<X|Y;sa=N+16|0;ta=M+2|0}else{ra=Y;sa=12;ta=W}}else{ra=Y;sa=X;ta=W}}else{ra=O;sa=N;ta=M}}while(0);ua=ra&4095;W=d[28585+(ua<<3)|0]|0;va=sa-W|0;wa=ra>>>W;W=d[28584+(ua<<3)|0]|0;if((W|0)==12){xa=wa;ya=va;za=1;Aa=ka;Ba=la;Ca=ta;Da=ja;S=55;break d}else if((W|0)==7){break}else if(!((W|0)==11|(W|0)==9)){S=31;break d}W=c[28588+(ua<<3)>>2]|0;O=wa;N=va;ka=W+ka|0;la=W+la|0;M=ta}M=c[28588+(ua<<3)>>2]|0;N=M+ka|0;Ea=ja+4|0;c[ja>>2]=N;O=M+la|0;if((O|0)<(j|0)){Fa=wa;Ga=va;Ha=0;Ia=O;Ja=ta}else{Ka=wa;La=va;Ma=0;Na=O;Oa=ta;Pa=Ea;break}while(1){do{if((Ga|0)<13){if(!(Ja>>>0<x>>>0)){if((Ga|0)==0){ma=Fa;na=Ha;oa=Ia;pa=Ja;qa=Ea;S=44;break b}else{Qa=Fa;Ra=13;Sa=Ja;break}}O=Ja+1|0;M=(d[k+(d[Ja]|0)|0]|0)<<Ga|Fa;W=Ga+8|0;if((W|0)<13){if(O>>>0<x>>>0){Qa=(d[k+(d[O]|0)|0]|0)<<W|M;Ra=Ga+16|0;Sa=Ja+2|0}else{Qa=M;Ra=13;Sa=O}}else{Qa=M;Ra=W;Sa=O}}else{Qa=Fa;Ra=Ga;Sa=Ja}}while(0);Ta=Qa&8191;O=d[61353+(Ta<<3)|0]|0;Ua=Ra-O|0;Va=Qa>>>O;O=d[61352+(Ta<<3)|0]|0;if((O|0)==12){xa=Va;ya=Ua;za=1;Aa=Ha;Ba=Ia;Ca=Sa;Da=Ea;S=55;break d}else if((O|0)==8){break}else if(!((O|0)==11|(O|0)==10)){S=41;break d}O=c[61356+(Ta<<3)>>2]|0;Fa=Va;Ga=Ua;Ha=O+Ha|0;Ia=O+Ia|0;Ja=Sa}O=c[61356+(Ta<<3)>>2]|0;W=O+Ha|0;M=ja+8|0;c[Ea>>2]=W;X=O+Ia|0;if((X|0)>=(j|0)){Ka=Va;La=Ua;Ma=0;Na=X;Oa=Sa;Pa=M;break}if((W|0)!=0){fa=Va;ga=Ua;ha=X;ia=Sa;ja=M;continue}fa=Va;ga=Ua;ha=X;ia=Sa;ja=(N|0)==0?ja:M}if((S|0)==31){S=0;M=c[A>>2]|0;X=(c[B>>2]&1024|0)!=0;W=c[(X?C:D)>>2]|0;c[g>>2]=c[z>>2];c[g+4>>2]=X?25536:25544;c[g+8>>2]=W;c[g+12>>2]=la;sc(M,26880,25600,g);xa=wa;ya=va;za=0;Aa=ka;Ba=la;Ca=ta;Da=ja;S=55}else if((S|0)==41){S=0;M=c[A>>2]|0;W=(c[B>>2]&1024|0)!=0;X=c[(W?C:D)>>2]|0;c[g>>2]=c[z>>2];c[g+4>>2]=W?25536:25544;c[g+8>>2]=X;c[g+12>>2]=Ia;sc(M,26880,25600,g);xa=Va;ya=Ua;za=0;Aa=Ha;Ba=Ia;Ca=Sa;Da=Ea;S=55}if((S|0)==55){S=0;if((Aa|0)==0){Ka=xa;La=ya;Ma=za;Na=Ba;Oa=Ca;Pa=Da}else{c[Da>>2]=Aa;Ka=xa;La=ya;Ma=za;Na=Ba;Oa=Ca;Pa=Da+4|0}}do{if((Na|0)==(j|0)){Wa=Pa}else{M=c[z>>2]|0;X=c[A>>2]|0;W=(c[B>>2]&1024|0)!=0;O=c[(W?C:D)>>2]|0;c[g>>2]=Na>>>0<j>>>0?25496:25512;c[g+4>>2]=M;c[g+8>>2]=W?25536:25544;c[g+12>>2]=O;c[g+16>>2]=Na;c[g+20>>2]=j;ue(X,26880,25448,g);X=(Na|0)>(j|0);if(X&Pa>>>0>y>>>0){O=Na;W=Pa;while(1){M=W+ -4|0;Y=O-(c[M>>2]|0)|0;Xa=(Y|0)>(j|0);if(Xa&M>>>0>y>>>0){O=Y;W=M}else{Ya=Xa;Za=Y;_a=M;break}}}else{Ya=X;Za=Na;_a=Pa}if((Za|0)>=(j|0)){if(!Ya){Wa=_a;break}c[_a>>2]=j;c[_a+4>>2]=0;Wa=_a+8|0;break}if((_a-F&4|0)==0){$a=_a}else{c[_a>>2]=0;$a=_a+4|0}c[$a>>2]=j-((Za|0)<0?0:Za);Wa=$a+4|0}}while(0);ob[c[E>>2]&3](G,y,Wa,j);W=c[l>>2]|0;O=H-W|0;c[z>>2]=(c[z>>2]|0)+1;if((O|0)>0){G=G+W|0;H=O;I=Ka;J=La;K=Ma;L=Oa}else{S=71;break}}do{if((S|0)==44){L=c[A>>2]|0;K=(c[B>>2]&1024|0)!=0;J=c[(K?C:D)>>2]|0;c[g>>2]=c[z>>2];c[g+4>>2]=K?25536:25544;c[g+8>>2]=J;c[g+12>>2]=oa;ue(L,26880,25552,g);if((na|0)==0){ab=qa}else{c[qa>>2]=na;ab=qa+4|0}if((oa|0)==(j|0)){bb=ma;cb=0;db=pa;eb=ab}else{L=c[z>>2]|0;J=c[A>>2]|0;K=(c[B>>2]&1024|0)!=0;I=c[(K?C:D)>>2]|0;c[g>>2]=oa>>>0<j>>>0?25496:25512;c[g+4>>2]=L;c[g+8>>2]=K?25536:25544;c[g+12>>2]=I;c[g+16>>2]=oa;c[g+20>>2]=j;ue(J,26880,25448,g);J=(oa|0)>(j|0);if(J&ab>>>0>y>>>0){I=oa;K=ab;while(1){L=K+ -4|0;H=I-(c[L>>2]|0)|0;O=(H|0)>(j|0);if(O&L>>>0>y>>>0){I=H;K=L}else{fb=O;gb=H;hb=L;break}}}else{fb=J;gb=oa;hb=ab}if((gb|0)>=(j|0)){if(!fb){bb=ma;cb=0;db=pa;eb=hb;break}c[hb>>2]=j;c[hb+4>>2]=0;bb=ma;cb=0;db=pa;eb=hb+8|0;break}if((hb-F&4|0)==0){ib=hb}else{c[hb>>2]=0;ib=hb+4|0}c[ib>>2]=j-((gb|0)<0?0:gb);bb=ma;cb=0;db=pa;eb=ib+4|0}}else if((S|0)==67){if((j|0)!=0){K=c[z>>2]|0;I=c[A>>2]|0;L=(c[B>>2]&1024|0)!=0;H=c[(L?C:D)>>2]|0;c[g>>2]=25496;c[g+4>>2]=K;c[g+8>>2]=L?25536:25544;c[g+12>>2]=H;c[g+16>>2]=0;c[g+20>>2]=j;ue(I,26880,25448,g);I=y+4|0;c[y>>2]=j;if((j|0)>0){bb=P;cb=Q;db=R;eb=I}else{c[I>>2]=0;bb=P;cb=Q;db=R;eb=y+8|0}}else{bb=P;cb=Q;db=R;eb=y}}else if((S|0)==71){jb=c[t>>2]|0;kb=c[v>>2]|0;lb=Ka;mb=La;nb=Ma;pb=Oa;break a}}while(0);ob[c[E>>2]&3](G,y,eb,j);c[p>>2]=0;c[n>>2]=bb;c[r>>2]=cb;c[v>>2]=(c[t>>2]|0)-db+(c[v>>2]|0);c[t>>2]=db;m=-1;i=f;return m|0}else{jb=u;kb=w;lb=o;mb=q;nb=s;pb=u}}while(0);c[p>>2]=mb;c[n>>2]=lb;c[r>>2]=nb;c[v>>2]=jb-pb+kb;c[t>>2]=pb;m=1;i=f;return m|0}function Gf(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0;d=i;e=c[a+576>>2]|0;if((e|0)==0){za(26848,25128,722,26864)}c[e+52>>2]=8;c[e+48>>2]=0;c[e+76>>2]=0;f=c[e+80>>2]|0;if((f|0)!=0){pe(f,0,c[e+8>>2]|0)}if((c[e+28>>2]&1|0)==0){c[e+88>>2]=0;c[e+84>>2]=0;h=e+92|0;c[h>>2]=0;i=d;return 1}j=+g[a+120>>2];if((b[a+124>>1]|0)==3){k=j*2.5399999618530273}else{k=j}a=k>150.0?4:2;c[e+88>>2]=a;c[e+84>>2]=a+ -1;h=e+92|0;c[h>>2]=0;i=d;return 1}function Hf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b+576>>2]|0;f=e+52|0;if((c[f>>2]|0)==8){i=d;return 1}g=b+608|0;if((c[g>>2]|0)>=(c[b+592>>2]|0)){we(b)|0}h=e+48|0;e=c[h>>2]&255;j=b+604|0;b=c[j>>2]|0;c[j>>2]=b+1;a[b]=e;c[g>>2]=(c[g>>2]|0)+1;c[h>>2]=0;c[f>>2]=8;i=d;return 1}function If(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;f=i;i=i+16|0;g=b+576|0;h=c[g>>2]|0;j=h+8|0;if(((e|0)%(c[j>>2]|0)|0|0)!=0){sc(c[b+628>>2]|0,26800,25736,f);k=0;i=f;return k|0}if((e|0)<=0){k=1;i=f;return k|0}l=h+4|0;m=b+608|0;n=b+592|0;o=b+604|0;p=h+28|0;q=h+12|0;r=h+76|0;s=h+84|0;t=h+88|0;u=h+80|0;h=d;d=e;a:while(1){if((c[l>>2]&2|0)==0){e=c[g>>2]|0;v=e+52|0;w=c[v>>2]|0;x=e+48|0;y=c[x>>2]|0;z=e+28|0;do{if((c[z>>2]&4|0)==0|(w|0)==4){A=w;B=y}else{C=((w|0)<4?4:-4)+w|0;if(C>>>0>w>>>0){D=c[m>>2]|0;E=w;F=y&255;G=C;while(1){G=G-E|0;if((D|0)>=(c[n>>2]|0)){we(b)|0}H=c[o>>2]|0;c[o>>2]=H+1;a[H]=F;D=(c[m>>2]|0)+1|0;c[m>>2]=D;if(!(G>>>0>8)){break}else{E=8;F=0}}if((G|0)==8){if((D|0)>=(c[n>>2]|0)){we(b)|0}F=c[o>>2]|0;c[o>>2]=F+1;a[F]=0;c[m>>2]=(c[m>>2]|0)+1;A=8;B=0;break}else{I=8;J=0;K=G}}else{if(C>>>0<9){I=w;J=y;K=C}else{L=13;break a}}A=I-K|0;B=J}}while(0);if((c[z>>2]&1|0)==0){M=1;N=12}else{M=(c[e+76>>2]|0)==0|2;N=13}if(!(N>>>0>A>>>0)){L=26;break}y=c[m>>2]|0;w=A;F=B;E=N;while(1){E=E-w|0;if((y|0)>=(c[n>>2]|0)){we(b)|0}H=c[o>>2]|0;c[o>>2]=H+1;a[H]=M>>>E|F;y=(c[m>>2]|0)+1|0;c[m>>2]=y;if(!(E>>>0>8)){break}else{w=8;F=0}}F=8-E|0;w=(c[25680+(E<<2)>>2]&M)<<F;if((E|0)==8){if((y|0)>=(c[n>>2]|0)){we(b)|0}e=c[o>>2]|0;c[o>>2]=e+1;a[e]=w;c[m>>2]=(c[m>>2]|0)+1;O=8;P=0}else{O=F;P=w}c[x>>2]=P;c[v>>2]=O}do{if((c[p>>2]&1|0)!=0){if((c[r>>2]|0)==0){Lf(b,h,c[q>>2]|0);c[r>>2]=1;Q=c[s>>2]|0}else{vf(b,h,c[u>>2]|0,c[q>>2]|0);w=(c[s>>2]|0)+ -1|0;c[s>>2]=w;Q=w}if((Q|0)==0){c[r>>2]=0;c[s>>2]=(c[t>>2]|0)+ -1;break}else{qe(c[u>>2]|0,h,c[j>>2]|0);break}}else{Lf(b,h,c[q>>2]|0)}}while(0);v=c[j>>2]|0;x=d-v|0;if((x|0)>0){h=h+v|0;d=x}else{k=1;L=41;break}}if((L|0)==13){za(26816,25128,701,26832)}else if((L|0)==26){za(25648,25128,707,26832)}else if((L|0)==41){i=f;return k|0}return 0}function Jf(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b+576>>2]|0;if((c[e+4>>2]&1|0)!=0){i=d;return}if((c[e+28>>2]&1|0)==0){f=1;g=12}else{f=(c[e+76>>2]|0)==0|2;g=13}uf(b,f,g);uf(b,f,g);uf(b,f,g);uf(b,f,g);uf(b,f,g);uf(b,f,g);g=b+608|0;if((c[g>>2]|0)>=(c[b+592>>2]|0)){we(b)|0}f=e+48|0;h=c[f>>2]&255;j=b+604|0;b=c[j>>2]|0;c[j>>2]=b+1;a[b]=h;c[g>>2]=(c[g>>2]|0)+1;c[f>>2]=0;c[e+52>>2]=8;i=d;return}function Kf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a+576|0;e=c[d>>2]|0;if((e|0)==0){za(26776,25128,1109,26784)}c[a+672>>2]=c[e+32>>2];c[a+668>>2]=c[e+36>>2];c[a+676>>2]=c[e+40>>2];f=c[e+64>>2]|0;if((f|0)!=0){ne(f)}f=c[e+80>>2]|0;if((f|0)==0){g=c[d>>2]|0;ne(g);c[d>>2]=0;Re(a);i=b;return}ne(f);g=c[d>>2]|0;ne(g);c[d>>2]=0;Re(a);i=b;return}function Lf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=c[b+576>>2]|0;h=0;do{j=wf(d,h,e)|0;yf(b,j,23784);k=j+h|0;if(!(k>>>0<e>>>0)){break}j=xf(d,k,e)|0;yf(b,j,24440);h=j+k|0}while(h>>>0<e>>>0);e=g+4|0;h=c[e>>2]|0;if((h&12|0)==0){i=f;return}d=g+52|0;if((c[d>>2]|0)==8){l=h}else{h=b+608|0;if((c[h>>2]|0)>=(c[b+592>>2]|0)){we(b)|0}k=g+48|0;j=c[k>>2]&255;m=b+604|0;n=c[m>>2]|0;c[m>>2]=n+1;a[n]=j;c[h>>2]=(c[h>>2]|0)+1;c[k>>2]=0;c[d>>2]=8;l=c[e>>2]|0}if((l&8|0)==0){i=f;return}l=b+604|0;e=c[l>>2]|0;if((e&1|0)==0){i=f;return}k=b+608|0;if((c[k>>2]|0)<(c[b+592>>2]|0)){o=e}else{we(b)|0;o=c[l>>2]|0}b=g+48|0;g=c[b>>2]&255;c[l>>2]=o+1;a[o]=g;c[k>>2]=(c[k>>2]|0)+1;c[b>>2]=0;c[d>>2]=8;i=f;return}function Mf(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0,Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=0,Qd=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,ke=0,le=0,me=0,ne=0,oe=0,pe=0,qe=0,re=0,se=0,te=0,ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=0,Ce=0,De=0,Ee=0,Fe=0,Ge=0,He=0,Ie=0,Je=0,Ke=0,Le=0,Me=0,Ne=0;f=i;i=i+32|0;g=f;h=c[a+576>>2]|0;j=c[h+12>>2]|0;k=c[h+44>>2]|0;l=h+8|0;if(((e|0)%(c[l>>2]|0)|0|0)!=0){sc(c[a+628>>2]|0,27104,25408,g);m=-1;i=f;return m|0}n=h+48|0;o=c[n>>2]|0;p=h+52|0;q=c[p>>2]|0;r=h+56|0;s=c[r>>2]|0;t=a+604|0;u=c[t>>2]|0;v=a+608|0;w=c[v>>2]|0;x=u+w|0;a:do{if((e|0)>0){y=h+72|0;z=h+68|0;A=(j|0)>0;B=h+92|0;C=a+628|0;D=a+12|0;E=a+492|0;F=a+452|0;G=h+60|0;H=b;I=e;J=c[y>>2]|0;K=o;L=q;M=s;N=u;b:while(1){c:do{if((M|0)==0){O=K;P=L;Q=N;while(1){do{if((P|0)<11){if(!(Q>>>0<x>>>0)){if((P|0)==0){R=O;S=0;T=Q;U=186;break b}else{V=O;W=11;X=Q;break}}Y=Q+1|0;Z=(d[k+(d[Q]|0)|0]|0)<<P|O;_=P+8|0;if((_|0)<11){if(Y>>>0<x>>>0){V=(d[k+(d[Y]|0)|0]|0)<<_|Z;W=P+16|0;X=Q+2|0}else{V=Z;W=11;X=Y}}else{V=Z;W=_;X=Y}}else{V=O;W=P;X=Q}}while(0);if((V&2047|0)==0){$=V;aa=W;ba=X;break c}O=V>>>1;P=W+ -1|0;Q=X}}else{$=K;aa=L;ba=N}}while(0);while(1){do{if((aa|0)<8){if(!(ba>>>0<x>>>0)){if((aa|0)==0){R=$;S=M;T=ba;U=186;break b}else{ca=$;da=8;ea=ba;break}}else{ca=(d[k+(d[ba]|0)|0]|0)<<aa|$;da=aa+8|0;ea=ba+1|0;break}}else{ca=$;da=aa;ea=ba}}while(0);if((ca&255|0)!=0){fa=ca;ga=da;break}$=ca>>>8;aa=da+ -8|0;ba=ea}while(1){ha=ga+ -1|0;ia=fa>>>1;if((fa&1|0)==0){fa=ia;ga=ha}else{break}}do{if((ga|0)<2){if(!(ea>>>0<x>>>0)){if((ha|0)==0){R=ia;S=0;T=ea;U=186;break b}else{ja=ia;ka=1;la=ea;break}}else{ja=(d[k+(d[ea]|0)|0]|0)<<ha|ia;ka=ga+7|0;la=ea+1|0;break}}else{ja=ia;ka=ha;la=ea}}while(0);Q=ka+ -1|0;P=ja>>>1;O=c[z>>2]|0;Y=O+4|0;_=c[O>>2]|0;do{if((ja&1|0)==0){d:do{if(A){O=J;Z=P;ma=Q;na=0;oa=0;pa=_;qa=la;ra=J;sa=Y;e:while(1){ta=(ra|0)==(J|0);f:do{if(ta){ua=Z;va=ma;wa=0;xa=na;ya=oa;za=pa;Aa=qa;Ba=sa;while(1){do{if((va|0)<7){if(!(Aa>>>0<x>>>0)){if((va|0)==0){Ca=ua;Da=0;Ea=wa;Fa=ya;Ga=Aa;Ha=J;U=154;break b}else{Ia=ua;Ja=7;Ka=Aa;break}}else{Ia=(d[k+(d[Aa]|0)|0]|0)<<va|ua;Ja=va+8|0;Ka=Aa+1|0;break}}else{Ia=ua;Ja=va;Ka=Aa}}while(0);La=Ia&127;Ma=d[27561+(La<<3)|0]|0;Na=Ja-Ma|0;Oa=Ia>>>Ma;switch(d[27560+(La<<3)|0]|0|0){case 1:{break};case 3:{Pa=Na;Qa=Oa;Ra=wa;Sa=ya;Ta=xa;Ua=za;Va=Ka;Wa=Ba;U=128;break f;break};case 2:{Xa=Na;Ya=Oa;Za=wa;_a=ya;$a=za;ab=Ka;bb=Ba;U=88;break f;break};case 5:{cb=La;db=Na;eb=Oa;fb=wa;gb=ya;hb=za;ib=Ka;jb=Ba;U=136;break f;break};case 4:{kb=La;lb=Na;mb=Oa;nb=wa;pb=ya;qb=xa;rb=za;sb=Ka;tb=Ba;U=132;break f;break};case 6:{ub=Na;vb=Oa;wb=wa;xb=ya;yb=Ka;zb=J;U=143;break e;break};case 12:{Ab=Ma;Bb=Na;Cb=Oa;Db=Ja;Eb=wa;Fb=ya;Gb=Ka;Hb=J;U=144;break e;break};default:{Ib=Oa;Jb=Na;Kb=wa;Lb=ya;Mb=Ka;Nb=J;U=151;break e}}Ma=(c[Ba>>2]|0)+za|0;La=xa+wa+Ma|0;if((Ma|0)<(j|0)){ua=Oa;va=Na;wa=La;xa=0-Ma|0;ya=Ma;za=Ma+(c[Ba+4>>2]|0)|0;Aa=Ka;Ba=Ba+8|0}else{Ob=Oa;Pb=Na;Qb=La;Rb=Ma;Sb=Ka;Tb=J;U=165;break e}}}else{Ba=Z;Aa=ma;za=0;ya=na;xa=oa;wa=pa;va=qa;ua=sa;while(1){do{if((Aa|0)<7){if(!(va>>>0<x>>>0)){if((Aa|0)==0){Ca=Ba;Da=0;Ea=za;Fa=xa;Ga=va;Ha=ra;U=154;break b}else{Ub=Ba;Vb=7;Wb=va;break}}else{Ub=(d[k+(d[va]|0)|0]|0)<<Aa|Ba;Vb=Aa+8|0;Wb=va+1|0;break}}else{Ub=Ba;Vb=Aa;Wb=va}}while(0);Ma=Ub&127;La=d[27561+(Ma<<3)|0]|0;Na=Vb-La|0;Oa=Ub>>>La;switch(d[27560+(Ma<<3)|0]|0|0){case 1:{break};case 3:{Pa=Na;Qa=Oa;Ra=za;Sa=xa;Ta=ya;Ua=wa;Va=Wb;Wa=ua;U=128;break f;break};case 2:{Xa=Na;Ya=Oa;Za=za;_a=xa;$a=wa;ab=Wb;bb=ua;U=88;break f;break};case 5:{cb=Ma;db=Na;eb=Oa;fb=za;gb=xa;hb=wa;ib=Wb;jb=ua;U=136;break f;break};case 4:{kb=Ma;lb=Na;mb=Oa;nb=za;pb=xa;qb=ya;rb=wa;sb=Wb;tb=ua;U=132;break f;break};case 6:{ub=Na;vb=Oa;wb=za;xb=xa;yb=Wb;zb=ra;U=143;break e;break};case 12:{Ab=La;Bb=Na;Cb=Oa;Db=Vb;Eb=za;Fb=xa;Gb=Wb;Hb=ra;U=144;break e;break};default:{Ib=Oa;Jb=Na;Kb=za;Lb=xa;Mb=Wb;Nb=ra;U=151;break e}}if((wa|0)<=(xa|0)&(wa|0)<(j|0)){La=wa;Ma=ua;while(1){Xb=(c[Ma>>2]|0)+La+(c[Ma+4>>2]|0)|0;Yb=Ma+8|0;if((Xb|0)<=(xa|0)&(Xb|0)<(j|0)){La=Xb;Ma=Yb}else{Zb=Xb;_b=Yb;break}}}else{Zb=wa;_b=ua}Ma=(c[_b>>2]|0)+Zb|0;La=ya+za+Ma|0;if((Ma|0)<(j|0)){Ba=Oa;Aa=Na;za=La;ya=0-Ma|0;xa=Ma;wa=Ma+(c[_b+4>>2]|0)|0;va=Wb;ua=_b+8|0}else{Ob=Oa;Pb=Na;Qb=La;Rb=Ma;Sb=Wb;Tb=ra;U=165;break e}}}}while(0);if((U|0)==88){U=0;if((ra-O&4|0)==0){ua=Ya;va=Xa;wa=Za;xa=_a;ya=ab;while(1){do{if((va|0)<12){if(!(ya>>>0<x>>>0)){if((va|0)==0){Ca=ua;Da=0;Ea=wa;Fa=xa;Ga=ya;Ha=ra;U=154;break b}else{$b=ua;ac=12;bc=ya;break}}za=ya+1|0;Aa=(d[k+(d[ya]|0)|0]|0)<<va|ua;Ba=va+8|0;if((Ba|0)<12){if(za>>>0<x>>>0){$b=(d[k+(d[za]|0)|0]|0)<<Ba|Aa;ac=va+16|0;bc=ya+2|0}else{$b=Aa;ac=12;bc=za}}else{$b=Aa;ac=Ba;bc=za}}else{$b=ua;ac=va;bc=ya}}while(0);cc=$b&4095;za=d[28585+(cc<<3)|0]|0;dc=ac-za|0;ec=$b>>>za;za=d[28584+(cc<<3)|0]|0;if((za|0)==7){break}else if(!((za|0)==11|(za|0)==9)){fc=ec;gc=dc;hc=wa;ic=xa;jc=bc;kc=ra;U=153;break e}za=c[28588+(cc<<3)>>2]|0;ua=ec;va=dc;wa=za+wa|0;xa=za+xa|0;ya=bc}ya=c[28588+(cc<<3)>>2]|0;va=ra+4|0;c[ra>>2]=ya+wa;ua=ec;za=dc;Ba=0;Aa=ya+xa|0;ya=bc;while(1){do{if((za|0)<13){if(!(ya>>>0<x>>>0)){if((za|0)==0){Ca=ua;Da=0;Ea=Ba;Fa=Aa;Ga=ya;Ha=va;U=154;break b}else{lc=ua;mc=13;nc=ya;break}}Ma=ya+1|0;La=(d[k+(d[ya]|0)|0]|0)<<za|ua;Yb=za+8|0;if((Yb|0)<13){if(Ma>>>0<x>>>0){lc=(d[k+(d[Ma]|0)|0]|0)<<Yb|La;mc=za+16|0;nc=ya+2|0}else{lc=La;mc=13;nc=Ma}}else{lc=La;mc=Yb;nc=Ma}}else{lc=ua;mc=za;nc=ya}}while(0);oc=lc&8191;Ma=d[61353+(oc<<3)|0]|0;pc=mc-Ma|0;qc=lc>>>Ma;Ma=d[61352+(oc<<3)|0]|0;if((Ma|0)==8){break}else if(!((Ma|0)==11|(Ma|0)==10)){rc=qc;tc=pc;uc=Ba;vc=Aa;wc=nc;xc=va;U=152;break e}Ma=c[61356+(oc<<3)>>2]|0;ua=qc;za=pc;Ba=Ma+Ba|0;Aa=Ma+Aa|0;ya=nc}ya=c[61356+(oc<<3)>>2]|0;c[va>>2]=ya+Ba;yc=qc;zc=pc;Ac=ya+Aa|0;Bc=nc}else{ya=Ya;za=Xa;ua=Za;xa=_a;wa=ab;while(1){do{if((za|0)<13){if(!(wa>>>0<x>>>0)){if((za|0)==0){Ca=ya;Da=0;Ea=ua;Fa=xa;Ga=wa;Ha=ra;U=154;break b}else{Cc=ya;Dc=13;Ec=wa;break}}Ma=wa+1|0;Yb=(d[k+(d[wa]|0)|0]|0)<<za|ya;La=za+8|0;if((La|0)<13){if(Ma>>>0<x>>>0){Cc=(d[k+(d[Ma]|0)|0]|0)<<La|Yb;Dc=za+16|0;Ec=wa+2|0}else{Cc=Yb;Dc=13;Ec=Ma}}else{Cc=Yb;Dc=La;Ec=Ma}}else{Cc=ya;Dc=za;Ec=wa}}while(0);Fc=Cc&8191;Ma=d[61353+(Fc<<3)|0]|0;Gc=Dc-Ma|0;Hc=Cc>>>Ma;Ma=d[61352+(Fc<<3)|0]|0;if((Ma|0)==8){break}else if(!((Ma|0)==11|(Ma|0)==10)){rc=Hc;tc=Gc;uc=ua;vc=xa;wc=Ec;xc=ra;U=152;break e}Ma=c[61356+(Fc<<3)>>2]|0;ya=Hc;za=Gc;ua=Ma+ua|0;xa=Ma+xa|0;wa=Ec}wa=c[61356+(Fc<<3)>>2]|0;za=ra+4|0;c[ra>>2]=wa+ua;ya=Hc;Aa=Gc;Ba=0;va=wa+xa|0;wa=Ec;while(1){do{if((Aa|0)<12){if(!(wa>>>0<x>>>0)){if((Aa|0)==0){Ca=ya;Da=0;Ea=Ba;Fa=va;Ga=wa;Ha=za;U=154;break b}else{Ic=ya;Jc=12;Kc=wa;break}}Ma=wa+1|0;La=(d[k+(d[wa]|0)|0]|0)<<Aa|ya;Yb=Aa+8|0;if((Yb|0)<12){if(Ma>>>0<x>>>0){Ic=(d[k+(d[Ma]|0)|0]|0)<<Yb|La;Jc=Aa+16|0;Kc=wa+2|0}else{Ic=La;Jc=12;Kc=Ma}}else{Ic=La;Jc=Yb;Kc=Ma}}else{Ic=ya;Jc=Aa;Kc=wa}}while(0);Lc=Ic&4095;Ma=d[28585+(Lc<<3)|0]|0;Mc=Jc-Ma|0;Nc=Ic>>>Ma;Ma=d[28584+(Lc<<3)|0]|0;if((Ma|0)==7){break}else if(!((Ma|0)==11|(Ma|0)==9)){fc=Nc;gc=Mc;hc=Ba;ic=va;jc=Kc;kc=za;U=153;break e}Ma=c[28588+(Lc<<3)>>2]|0;ya=Nc;Aa=Mc;Ba=Ma+Ba|0;va=Ma+va|0;wa=Kc}wa=c[28588+(Lc<<3)>>2]|0;c[za>>2]=wa+Ba;yc=Nc;zc=Mc;Ac=wa+va|0;Bc=Kc}wa=ra+8|0;if((wa|0)!=(J|0)){if(($a|0)<=(Ac|0)&($a|0)<(j|0)){Aa=$a;ya=bb;while(1){xa=(c[ya>>2]|0)+Aa+(c[ya+4>>2]|0)|0;ua=ya+8|0;if((xa|0)<=(Ac|0)&(xa|0)<(j|0)){Aa=xa;ya=ua}else{Oc=yc;Pc=zc;Qc=Ac;Rc=xa;Sc=Bc;Tc=wa;Uc=ua;break}}}else{Oc=yc;Pc=zc;Qc=Ac;Rc=$a;Sc=Bc;Tc=wa;Uc=bb}}else{Oc=yc;Pc=zc;Qc=Ac;Rc=$a;Sc=Bc;Tc=J;Uc=bb}}else if((U|0)==128){U=0;if(!ta?(Ua|0)<=(Sa|0)&(Ua|0)<(j|0):0){ya=Ua;Aa=Wa;while(1){va=(c[Aa>>2]|0)+ya+(c[Aa+4>>2]|0)|0;Ba=Aa+8|0;if((va|0)<=(Sa|0)&(va|0)<(j|0)){ya=va;Aa=Ba}else{Vc=va;Wc=Ba;break}}}else{Vc=Ua;Wc=Wa}c[ra>>2]=Ta+Ra+Vc;Oc=Qa;Pc=Pa;Qc=Vc;Rc=(c[Wc>>2]|0)+Vc|0;Sc=Va;Tc=ra+4|0;Uc=Wc+4|0}else if((U|0)==132){U=0;if(!ta?(rb|0)<=(pb|0)&(rb|0)<(j|0):0){Aa=rb;ya=tb;while(1){wa=(c[ya>>2]|0)+Aa+(c[ya+4>>2]|0)|0;Ba=ya+8|0;if((wa|0)<=(pb|0)&(wa|0)<(j|0)){Aa=wa;ya=Ba}else{Xc=wa;Yc=Ba;break}}}else{Xc=rb;Yc=tb}ya=c[27564+(kb<<3)>>2]|0;c[ra>>2]=qb+nb+Xc+ya;Oc=mb;Pc=lb;Qc=ya+Xc|0;Rc=(c[Yc>>2]|0)+Xc|0;Sc=sb;Tc=ra+4|0;Uc=Yc+4|0}else if((U|0)==136){U=0;ya=(ra|0)!=(J|0);if(ya?(hb|0)<=(gb|0)&(hb|0)<(j|0):0){Aa=hb;ta=jb;while(1){Ba=(c[ta>>2]|0)+Aa+(c[ta+4>>2]|0)|0;wa=ta+8|0;if((Ba|0)<=(gb|0)&(Ba|0)<(j|0)){Aa=Ba;ta=wa}else{Zc=Ba;_c=wa;break}}}else{Zc=hb;_c=jb}ta=c[27564+(cb<<3)>>2]|0;Aa=ta+gb|0;if((Zc|0)<=(Aa|0)&((Zc|0)<(Aa|0)|ya)){U=140;break}c[ra>>2]=Zc-gb+fb-ta;Aa=_c+ -4|0;Oc=eb;Pc=db;Qc=Zc-ta|0;Rc=Zc-(c[Aa>>2]|0)|0;Sc=ib;Tc=ra+4|0;Uc=Aa}if((Qc|0)<(j|0)){Z=Oc;ma=Pc;na=0-Qc|0;oa=Qc;pa=Rc;qa=Sc;ra=Tc;sa=Uc}else{$c=Oc;ad=Pc;bd=0;cd=Qc;dd=Sc;ed=Tc;break d}}do{if((U|0)==140){U=0;sa=c[C>>2]|0;qa=(c[D>>2]&1024|0)!=0;pa=c[(qa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=qa?25536:25544;c[g+8>>2]=pa;c[g+12>>2]=gb;sc(sa,27104,25600,g);fd=eb;gd=db;hd=0;id=fb;jd=gb;kd=ib;ld=ra}else if((U|0)==143){U=0;c[zb>>2]=j-xb;sa=c[C>>2]|0;pa=(c[D>>2]&1024|0)!=0;qa=c[(pa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=pa?25536:25544;c[g+8>>2]=qa;c[g+12>>2]=xb;sc(sa,27104,26392,g);fd=vb;gd=ub;hd=0;id=wb;jd=xb;kd=yb;ld=zb+4|0}else if((U|0)==144){U=0;sa=Hb+4|0;c[Hb>>2]=j-Fb;do{if((Bb|0)<4){if(!(Gb>>>0<x>>>0)){if((Db|0)==(Ab|0)){Ca=Cb;Da=Bb;Ea=Eb;Fa=Fb;Ga=Gb;Ha=sa;U=154;break b}else{md=Cb;nd=4;od=Gb;break}}else{md=(d[k+(d[Gb]|0)|0]|0)<<Bb|Cb;nd=Bb+8|0;od=Gb+1|0;break}}else{md=Cb;nd=Bb;od=Gb}}while(0);if((md&15|0)!=0){ya=c[C>>2]|0;qa=(c[D>>2]&1024|0)!=0;pa=c[(qa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=qa?25536:25544;c[g+8>>2]=pa;c[g+12>>2]=Fb;sc(ya,27104,25600,g)}fd=md>>>4;gd=nd+ -4|0;hd=1;id=Eb;jd=Fb;kd=od;ld=sa}else if((U|0)==152){U=0;ya=c[C>>2]|0;pa=(c[D>>2]&1024|0)!=0;qa=c[(pa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=pa?25536:25544;c[g+8>>2]=qa;c[g+12>>2]=vc;sc(ya,27104,25600,g);fd=rc;gd=tc;hd=0;id=uc;jd=vc;kd=wc;ld=xc}else if((U|0)==153){U=0;ya=c[C>>2]|0;qa=(c[D>>2]&1024|0)!=0;pa=c[(qa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=qa?25536:25544;c[g+8>>2]=pa;c[g+12>>2]=ic;sc(ya,27104,25600,g);fd=fc;gd=gc;hd=0;id=hc;jd=ic;kd=jc;ld=kc}else if((U|0)==165){U=0;if((Qb|0)==0){$c=Ob;ad=Pb;bd=0;cd=Rb;dd=Sb;ed=Tb;break d}if((Rb+Qb|0)<(j|0)){do{if((Pb|0)<1){if(!(Sb>>>0<x>>>0)){if((Pb|0)==0){Ca=Ob;Da=0;Ea=Qb;Fa=Rb;Ga=Sb;Ha=Tb;U=154;break b}else{pd=Ob;qd=1;rd=Sb;break}}else{pd=(d[k+(d[Sb]|0)|0]|0)<<Pb|Ob;qd=Pb+8|0;rd=Sb+1|0;break}}else{pd=Ob;qd=Pb;rd=Sb}}while(0);if((pd&1|0)==0){Ib=pd;Jb=qd;Kb=Qb;Lb=Rb;Mb=rd;Nb=Tb;U=151;break}sd=pd>>>1;td=qd+ -1|0;ud=rd}else{sd=Ob;td=Pb;ud=Sb}c[Tb>>2]=Qb;$c=sd;ad=td;bd=0;cd=Rb;dd=ud;ed=Tb+4|0;break d}}while(0);if((U|0)==151){U=0;ra=c[C>>2]|0;sa=(c[D>>2]&1024|0)!=0;ya=c[(sa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=sa?25536:25544;c[g+8>>2]=ya;c[g+12>>2]=Lb;sc(ra,27104,25600,g);fd=Ib;gd=Jb;hd=0;id=Kb;jd=Lb;kd=Mb;ld=Nb}if((id|0)==0){$c=fd;ad=gd;bd=hd;cd=jd;dd=kd;ed=ld}else{c[ld>>2]=id;$c=fd;ad=gd;bd=hd;cd=jd;dd=kd;ed=ld+4|0}}else{$c=P;ad=Q;bd=0;cd=0;dd=la;ed=J}}while(0);if((cd|0)==(j|0)){vd=$c;wd=ad;xd=bd;yd=dd;zd=ed}else{ra=c[B>>2]|0;ya=c[C>>2]|0;sa=(c[D>>2]&1024|0)!=0;pa=c[(sa?E:F)>>2]|0;c[g>>2]=cd>>>0<j>>>0?25496:25512;c[g+4>>2]=ra;c[g+8>>2]=sa?25536:25544;c[g+12>>2]=pa;c[g+16>>2]=cd;c[g+20>>2]=j;ue(ya,27104,25448,g);ya=(cd|0)>(j|0);if(ya&ed>>>0>J>>>0){pa=cd;sa=ed;while(1){ra=sa+ -4|0;qa=pa-(c[ra>>2]|0)|0;oa=(qa|0)>(j|0);if(oa&ra>>>0>J>>>0){pa=qa;sa=ra}else{Ad=oa;Bd=qa;Cd=ra;break}}}else{Ad=ya;Bd=cd;Cd=ed}if((Bd|0)>=(j|0)){if(!Ad){vd=$c;wd=ad;xd=bd;yd=dd;zd=Cd;break}c[Cd>>2]=j;c[Cd+4>>2]=0;vd=$c;wd=ad;xd=bd;yd=dd;zd=Cd+8|0;break}if((Cd-J&4|0)==0){Dd=Cd}else{c[Cd>>2]=0;Dd=Cd+4|0}c[Dd>>2]=j-((Bd|0)<0?0:Bd);vd=$c;wd=ad;xd=bd;yd=dd;zd=Dd+4|0}}else{sa=P;pa=Q;ra=0;qa=la;oa=J;g:while(1){na=sa;ma=pa;Ed=0;Fd=ra;Z=qa;while(1){do{if((ma|0)<12){if(!(Z>>>0<x>>>0)){if((ma|0)==0){Gd=na;Hd=Ed;Id=Fd;Jd=Z;Kd=oa;U=51;break b}else{Ld=na;Md=12;Nd=Z;break}}O=Z+1|0;Aa=(d[k+(d[Z]|0)|0]|0)<<ma|na;ta=ma+8|0;if((ta|0)<12){if(O>>>0<x>>>0){Ld=(d[k+(d[O]|0)|0]|0)<<ta|Aa;Md=ma+16|0;Nd=Z+2|0}else{Ld=Aa;Md=12;Nd=O}}else{Ld=Aa;Md=ta;Nd=O}}else{Ld=na;Md=ma;Nd=Z}}while(0);Od=Ld&4095;O=d[28585+(Od<<3)|0]|0;Pd=Md-O|0;Qd=Ld>>>O;O=d[28584+(Od<<3)|0]|0;if((O|0)==7){break}else if((O|0)==12){Rd=Qd;Sd=Pd;Td=1;Ud=Ed;Vd=Fd;Wd=Nd;Xd=oa;U=62;break g}else if(!((O|0)==11|(O|0)==9)){U=38;break g}O=c[28588+(Od<<3)>>2]|0;na=Qd;ma=Pd;Ed=O+Ed|0;Fd=O+Fd|0;Z=Nd}Z=c[28588+(Od<<3)>>2]|0;ma=Z+Ed|0;Yd=oa+4|0;c[oa>>2]=ma;na=Z+Fd|0;if((na|0)<(j|0)){Zd=Qd;_d=Pd;$d=0;ae=na;be=Nd}else{ce=Qd;de=Pd;ee=0;fe=na;ge=Nd;he=Yd;break}while(1){do{if((_d|0)<13){if(!(be>>>0<x>>>0)){if((_d|0)==0){Gd=Zd;Hd=$d;Id=ae;Jd=be;Kd=Yd;U=51;break b}else{ie=Zd;je=13;ke=be;break}}na=be+1|0;Z=(d[k+(d[be]|0)|0]|0)<<_d|Zd;O=_d+8|0;if((O|0)<13){if(na>>>0<x>>>0){ie=(d[k+(d[na]|0)|0]|0)<<O|Z;je=_d+16|0;ke=be+2|0}else{ie=Z;je=13;ke=na}}else{ie=Z;je=O;ke=na}}else{ie=Zd;je=_d;ke=be}}while(0);le=ie&8191;na=d[61353+(le<<3)|0]|0;me=je-na|0;ne=ie>>>na;na=d[61352+(le<<3)|0]|0;if((na|0)==12){Rd=ne;Sd=me;Td=1;Ud=$d;Vd=ae;Wd=ke;Xd=Yd;U=62;break g}else if((na|0)==8){break}else if(!((na|0)==11|(na|0)==10)){U=48;break g}na=c[61356+(le<<3)>>2]|0;Zd=ne;_d=me;$d=na+$d|0;ae=na+ae|0;be=ke}na=c[61356+(le<<3)>>2]|0;O=na+$d|0;Z=oa+8|0;c[Yd>>2]=O;ta=na+ae|0;if((ta|0)>=(j|0)){ce=ne;de=me;ee=0;fe=ta;ge=ke;he=Z;break}if((O|0)!=0){sa=ne;pa=me;ra=ta;qa=ke;oa=Z;continue}sa=ne;pa=me;ra=ta;qa=ke;oa=(ma|0)==0?oa:Z}if((U|0)==38){U=0;qa=c[C>>2]|0;ra=(c[D>>2]&1024|0)!=0;pa=c[(ra?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=ra?25536:25544;c[g+8>>2]=pa;c[g+12>>2]=Fd;sc(qa,27104,25600,g);Rd=Qd;Sd=Pd;Td=0;Ud=Ed;Vd=Fd;Wd=Nd;Xd=oa;U=62}else if((U|0)==48){U=0;qa=c[C>>2]|0;pa=(c[D>>2]&1024|0)!=0;ra=c[(pa?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=pa?25536:25544;c[g+8>>2]=ra;c[g+12>>2]=ae;sc(qa,27104,25600,g);Rd=ne;Sd=me;Td=0;Ud=$d;Vd=ae;Wd=ke;Xd=Yd;U=62}if((U|0)==62){U=0;if((Ud|0)==0){ce=Rd;de=Sd;ee=Td;fe=Vd;ge=Wd;he=Xd}else{c[Xd>>2]=Ud;ce=Rd;de=Sd;ee=Td;fe=Vd;ge=Wd;he=Xd+4|0}}if((fe|0)==(j|0)){vd=ce;wd=de;xd=ee;yd=ge;zd=he}else{qa=c[B>>2]|0;ra=c[C>>2]|0;pa=(c[D>>2]&1024|0)!=0;sa=c[(pa?E:F)>>2]|0;c[g>>2]=fe>>>0<j>>>0?25496:25512;c[g+4>>2]=qa;c[g+8>>2]=pa?25536:25544;c[g+12>>2]=sa;c[g+16>>2]=fe;c[g+20>>2]=j;ue(ra,27104,25448,g);ra=(fe|0)>(j|0);if(ra&he>>>0>J>>>0){sa=fe;pa=he;while(1){qa=pa+ -4|0;ya=sa-(c[qa>>2]|0)|0;Z=(ya|0)>(j|0);if(Z&qa>>>0>J>>>0){sa=ya;pa=qa}else{oe=Z;pe=ya;qe=qa;break}}}else{oe=ra;pe=fe;qe=he}if((pe|0)>=(j|0)){if(!oe){vd=ce;wd=de;xd=ee;yd=ge;zd=qe;break}c[qe>>2]=j;c[qe+4>>2]=0;vd=ce;wd=de;xd=ee;yd=ge;zd=qe+8|0;break}if((qe-J&4|0)==0){re=qe}else{c[qe>>2]=0;re=qe+4|0}c[re>>2]=j-((pe|0)<0?0:pe);vd=ce;wd=de;xd=ee;yd=ge;zd=re+4|0}}}while(0);ob[c[G>>2]&3](H,J,zd,j);c[zd>>2]=0;Q=c[y>>2]|0;P=c[z>>2]|0;c[y>>2]=P;c[z>>2]=Q;Q=c[l>>2]|0;Y=I-Q|0;c[B>>2]=(c[B>>2]|0)+1;if((Y|0)>0){H=H+Q|0;I=Y;J=P;K=vd;L=wd;M=xd;N=yd}else{U=190;break}}do{if((U|0)==51){N=c[C>>2]|0;M=(c[D>>2]&1024|0)!=0;L=c[(M?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=M?25536:25544;c[g+8>>2]=L;c[g+12>>2]=Id;ue(N,27104,25552,g);if((Hd|0)==0){se=Kd}else{c[Kd>>2]=Hd;se=Kd+4|0}if((Id|0)==(j|0)){te=Gd;ve=0;we=0;xe=Jd;ye=se}else{N=c[B>>2]|0;L=c[C>>2]|0;M=(c[D>>2]&1024|0)!=0;K=c[(M?E:F)>>2]|0;c[g>>2]=Id>>>0<j>>>0?25496:25512;c[g+4>>2]=N;c[g+8>>2]=M?25536:25544;c[g+12>>2]=K;c[g+16>>2]=Id;c[g+20>>2]=j;ue(L,27104,25448,g);L=(Id|0)>(j|0);if(L&se>>>0>J>>>0){K=Id;M=se;while(1){N=M+ -4|0;I=K-(c[N>>2]|0)|0;z=(I|0)>(j|0);if(z&N>>>0>J>>>0){K=I;M=N}else{ze=z;Ae=I;Be=N;break}}}else{ze=L;Ae=Id;Be=se}if((Ae|0)>=(j|0)){if(!ze){te=Gd;ve=0;we=0;xe=Jd;ye=Be;break}c[Be>>2]=j;c[Be+4>>2]=0;te=Gd;ve=0;we=0;xe=Jd;ye=Be+8|0;break}if((Be-J&4|0)==0){Ce=Be}else{c[Be>>2]=0;Ce=Be+4|0}c[Ce>>2]=j-((Ae|0)<0?0:Ae);te=Gd;ve=0;we=0;xe=Jd;ye=Ce+4|0}}else if((U|0)==154){M=c[C>>2]|0;K=(c[D>>2]&1024|0)!=0;N=c[(K?E:F)>>2]|0;c[g>>2]=c[B>>2];c[g+4>>2]=K?25536:25544;c[g+8>>2]=N;c[g+12>>2]=Fa;ue(M,27104,25552,g);if((Ea|0)==0){De=Ha}else{c[Ha>>2]=Ea;De=Ha+4|0}if((Fa|0)==(j|0)){te=Ca;ve=Da;we=0;xe=Ga;ye=De}else{M=c[B>>2]|0;N=c[C>>2]|0;K=(c[D>>2]&1024|0)!=0;I=c[(K?E:F)>>2]|0;c[g>>2]=Fa>>>0<j>>>0?25496:25512;c[g+4>>2]=M;c[g+8>>2]=K?25536:25544;c[g+12>>2]=I;c[g+16>>2]=Fa;c[g+20>>2]=j;ue(N,27104,25448,g);N=(Fa|0)>(j|0);if(N&De>>>0>J>>>0){I=Fa;K=De;while(1){M=K+ -4|0;z=I-(c[M>>2]|0)|0;y=(z|0)>(j|0);if(y&M>>>0>J>>>0){I=z;K=M}else{Ee=y;Fe=z;Ge=M;break}}}else{Ee=N;Fe=Fa;Ge=De}if((Fe|0)>=(j|0)){if(!Ee){te=Ca;ve=Da;we=0;xe=Ga;ye=Ge;break}c[Ge>>2]=j;c[Ge+4>>2]=0;te=Ca;ve=Da;we=0;xe=Ga;ye=Ge+8|0;break}if((Ge-J&4|0)==0){He=Ge}else{c[Ge>>2]=0;He=Ge+4|0}c[He>>2]=j-((Fe|0)<0?0:Fe);te=Ca;ve=Da;we=0;xe=Ga;ye=He+4|0}}else if((U|0)==186){if((j|0)!=0){K=c[B>>2]|0;I=c[C>>2]|0;L=(c[D>>2]&1024|0)!=0;M=c[(L?E:F)>>2]|0;c[g>>2]=25496;c[g+4>>2]=K;c[g+8>>2]=L?25536:25544;c[g+12>>2]=M;c[g+16>>2]=0;c[g+20>>2]=j;ue(I,27104,25448,g);I=J+4|0;c[J>>2]=j;if(A){te=R;ve=0;we=S;xe=T;ye=I}else{c[I>>2]=0;te=R;ve=0;we=S;xe=T;ye=J+8|0}}else{te=R;ve=0;we=S;xe=T;ye=J}}else if((U|0)==190){Ie=c[t>>2]|0;Je=c[v>>2]|0;Ke=vd;Le=wd;Me=xd;Ne=yd;break a}}while(0);ob[c[G>>2]&3](H,J,ye,j);c[p>>2]=ve;c[n>>2]=te;c[r>>2]=we;c[v>>2]=(c[t>>2]|0)-xe+(c[v>>2]|0);c[t>>2]=xe;m=-1;i=f;return m|0}else{Ie=u;Je=w;Ke=o;Le=q;Me=s;Ne=u}}while(0);c[p>>2]=Le;c[n>>2]=Ke;c[r>>2]=Me;c[v>>2]=Ie-Ne+Je;c[t>>2]=Ne;m=1;i=f;return m|0}function Nf(a,b){a=+a;b=b|0;var c=0,d=0,e=0.0,f=0.0,g=0.0;c=i;if(a>=18371976.0e12){d=32767;i=c;return d|0}if(a<=-18371976.0e12){d=65535;i=c;return d|0}if(a>5.4136769e-20){e=(+$(+a)*1.4426950408889634+64.0)*256.0;if((b|0)==0){f=e}else{f=e+ +(Ki()|0)*4.656612875245797e-10+-.5}d=~~f;i=c;return d|0}if(!(a<-5.4136769e-20)){d=0;i=c;return d|0}f=(+$(+-a)*1.4426950408889634+64.0)*256.0;if((b|0)==0){g=f}else{g=f+ +(Ki()|0)*4.656612875245797e-10+-.5}d=~~g|-32768;i=c;return d|0}function Of(a,c,d){a=+a;c=+c;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0;e=i;if(c<.016939999535679817){f=Pf(a,c)|0;i=e;return f|0}h=(d|0)==0;j=(c+-.016939999535679817)*285.7142768952314;if(h){k=j}else{k=j+ +(Ki()|0)*4.656612875245797e-10+-.5}d=~~k;if((d|0)>162){f=Pf(a,c)|0;i=e;return f|0}k=+g[126888+(d<<3)>>2];if(k>a){f=Pf(a,c)|0;i=e;return f|0}j=(a-k)*285.7142768952314;if(h){l=j}else{l=j+ +(Ki()|0)*4.656612875245797e-10+-.5}h=~~l;if((h|0)<(b[126892+(d<<3)>>1]|0)){f=(b[126894+(d<<3)>>1]|0)+h|0;i=e;return f|0}else{f=Pf(a,c)|0;i=e;return f|0}return 0}function Pf(a,d){a=+a;d=+d;var e=0,f=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0,C=0,D=0,E=0,F=0,G=0;e=i;i=i+800|0;f=e;if((c[32470]|0)!=0){j=d+-.473684211;k=a+-.210526316;l=+Z(+j,+k);m=l*15.915494277358546;n=m+50.0;o=~~n;p=129480+(o<<2)|0;q=c[p>>2]|0;i=e;return q|0}r=99;while(1){h[f+(r<<3)>>3]=2.0;if((r|0)==0){s=162;t=163;break}else{r=r+ -1|0}}while(1){r=126892+(s<<3)|0;if((t|0)==1|(t|0)==163){u=1}else{u=(b[r>>1]|0)+ -1|0}v=+g[126888+(s<<3)>>2];w=(+(s|0)+.5)*.0035000001080334187+.016939999535679817+-.473684211;x=126894+(s<<3)|0;y=(b[r>>1]|0)+ -1|0;do{z=+Z(+w,+((+(y|0)+.5)*.0035000001080334187+v+-.210526316))*15.915494277358546+50.0;r=~~z;A=+Q(+(z-(+(r|0)+.5)));B=f+(r<<3)|0;if(A<+h[B>>3]){c[129480+(r<<2)>>2]=(b[x>>1]|0)+y;h[B>>3]=A}y=y-u|0}while((y|0)>-1);if((s|0)==0){C=99;D=100;break}else{y=s;s=s+ -1|0;t=y}}while(1){do{if(+h[f+(C<<3)>>3]>1.5){t=1;while(1){s=t+1|0;if(+h[f+(((t+C|0)%100|0)<<3)>>3]<1.5){E=t;break}if((s|0)<50){t=s}else{E=s;break}}t=D+99|0;s=-1;u=1;while(1){y=u+1|0;if(+h[f+(((t+s|0)%100|0)<<3)>>3]<1.5){F=u;G=s;break}x=~u;if((y|0)<50){s=x;u=y}else{F=y;G=x;break}}if((E|0)<(F|0)){c[129480+(C<<2)>>2]=c[129480+(((E+C|0)%100|0)<<2)>>2];break}else{c[129480+(C<<2)>>2]=c[129480+(((t+G|0)%100|0)<<2)>>2];break}}}while(0);if((C|0)==0){break}else{u=C;C=C+ -1|0;D=u}}c[32470]=1;j=d+-.473684211;k=a+-.210526316;l=+Z(+j,+k);m=l*15.915494277358546;n=m+50.0;o=~~n;p=129480+(o<<2)|0;q=c[p>>2]|0;i=e;return q|0}function Qf(a,c){a=a|0;c=c|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0;d=i;e=a>>>14&1023;if((e|0)!=0?(f=+_(+((+(e|0)+.5)*.010830424696249145+-8.317766166719343)),!(f<=0.0)):0){e=a&16383;if(e>>>0>16288){h=.210526316;j=.473684211}else{a=0;k=163;a:while(1){l=a;while(1){if((k-l|0)<=1){m=9;break a}n=l+k>>1;o=b[126894+(n<<3)>>1]|0;p=e-(o<<16>>16)|0;if((p|0)>0){l=n}else{break}}if((p|0)<0){a=l;k=n}else{q=o;r=n;break}}if((m|0)==9){q=b[126894+(l<<3)>>1]|0;r=l}h=+g[126888+(r<<3)>>2]+(+(e-(q<<16>>16)|0)+.5)*.0035000001080334187;j=(+(r|0)+.5)*.0035000001080334187+.016939999535679817}s=1.0/(h*6.0-j*16.0+12.0);t=h*9.0*s;h=j*4.0*s;g[c>>2]=f*(t/h);g[c+4>>2]=f;g[c+8>>2]=f*((1.0-t-h)/h);i=d;return}g[c+8>>2]=0.0;g[c+4>>2]=0.0;g[c>>2]=0.0;i=d;return}function Rf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0;c=i;d=a+4|0;e=+g[d>>2];f=e;if(!(f>=15.742)){if(!(f<=24283.0e-8)){h=(+$(+f)*1.4426950408889634+12.0)*64.0;if((b|0)==0){j=e;k=h}else{f=h+ +(Ki()|0)*4.656612875245797e-10+-.5;j=+g[d>>2];k=f}l=~~k;m=j}else{l=0;m=e}}else{l=1023;m=e}e=+g[a>>2];j=m;m=e+j*15.0+ +g[a+8>>2]*3.0;if((l|0)!=0&!(m<=0.0)){n=e*4.0/m;o=j*9.0/m}else{n=.210526316;o=.473684211}a=Of(n,o,b)|0;if((a|0)>=0){p=a;q=l<<14;r=p|q;i=c;return r|0}p=Of(.210526316,.473684211,0)|0;q=l<<14;r=p|q;i=c;return r|0}function Sf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;c=i;d=a>>16;e=d&32767;if((e|0)!=0){f=+_(+((+(e|0)+.5)*.0027076061740622863+-44.3614195558365));if((d&32768|0)==0){h=f}else{h=-f}if(!(h<=0.0)){f=(+((a>>>8&255)>>>0)+.5)*.0024390243902439024;j=(+((a&255)>>>0)+.5)*.0024390243902439024;k=1.0/(f*6.0-j*16.0+12.0);l=f*9.0*k;f=j*4.0*k;g[b>>2]=h*(l/f);g[b+4>>2]=h;g[b+8>>2]=h*((1.0-l-f)/f);i=c;return}}g[b+8>>2]=0.0;g[b+4>>2]=0.0;g[b>>2]=0.0;i=c;return}function Tf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0;c=i;d=a+4|0;e=Nf(+g[d>>2],b)|0;f=+g[a>>2];h=+g[d>>2];j=f+h*15.0+ +g[a+8>>2]*3.0;if((e|0)!=0&!(j<=0.0)){k=f*4.0/j;f=h*9.0/j;if(!(k<=0.0)){l=k;m=f;n=3}else{o=0;p=f}}else{l=.210526316;m=.473684211;n=3}if((n|0)==3){f=l*410.0;if((b|0)==0){q=f}else{q=f+ +(Ki()|0)*4.656612875245797e-10+-.5}o=~~q;p=m}n=o>>>0>255;if(p<=0.0){r=0;s=r>>>0>255;t=s?255:r;u=e<<16;v=o<<8;w=n?65280:v;x=w|u;y=x|t;i=c;return y|0}m=p*410.0;if((b|0)==0){z=m}else{z=m+ +(Ki()|0)*4.656612875245797e-10+-.5}r=~~z;s=r>>>0>255;t=s?255:r;u=e<<16;v=o<<8;w=n?65280:v;x=w|u;y=x|t;i=c;return y|0}function Uf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+16|0;e=d;if((b&-2|0)!=34676){za(128192,128256,1620,128272)}if((Vb(a,128288,2)|0)==0){sc(c[a+628>>2]|0,128272,128360,e);f=0;i=d;return f|0}g=me(32)|0;c[a+576>>2]=g;if((g|0)==0){h=c[a+628>>2]|0;c[e>>2]=c[a>>2];sc(h,128272,128408,e);f=0;i=d;return f|0}else{pe(g,0,32);c[g>>2]=-1;c[g+4>>2]=(b|0)==34677;c[g+20>>2]=10;c[a+504>>2]=11;c[a+508>>2]=12;c[a+540>>2]=20;c[a+548>>2]=21;c[a+516>>2]=13;c[a+544>>2]=22;c[a+552>>2]=23;c[a+556>>2]=4;c[a+564>>2]=5;b=a+672|0;c[g+24>>2]=c[b>>2];c[b>>2]=9;b=a+668|0;c[g+28>>2]=c[b>>2];c[b>>2]=10;f=1;i=d;return f|0}return 0}function Vf(a,b,c){a=a|0;b=b|0;c=c|0;return}function Wf(a){a=a|0;return 1}function Xf(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;c[a+652>>2]=3;h=e[a+90>>1]|0;do{if((h|0)==32844){if((mg(a)|0)!=0){c[a+532>>2]=26;j=c[g>>2]|0;if((j|0)==0){c[g+20>>2]=17;k=1;break}else if((j|0)==3){c[g+20>>2]=18;k=1;break}else{k=1;break}}else{k=0}}else if((h|0)==32845){if((fg(a)|0)!=0){j=a+532|0;if((b[a+88>>1]|0)==-30859){c[j>>2]=24;l=c[g>>2]|0;if((l|0)==1){c[g+20>>2]=12;k=1;break}else if((l|0)==0){c[g+20>>2]=11;k=1;break}else if((l|0)==3){c[g+20>>2]=13;k=1;break}else{k=1;break}}else{c[j>>2]=25;j=c[g>>2]|0;if((j|0)==3){c[g+20>>2]=16;k=1;break}else if((j|0)==0){c[g+20>>2]=14;k=1;break}else if((j|0)==1){c[g+20>>2]=15;k=1;break}else{k=1;break}}}else{k=0}}else{j=c[a+628>>2]|0;c[f>>2]=h;c[f+4>>2]=128744;sc(j,129328,128672,f);k=0}}while(0);i=d;return k|0}function Yf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=Md(a)|0;if(((d|0)%(g|0)|0|0)!=0){za(128584,128256,382,129304)}h=a+532|0;if((d|0)==0){j=1;i=f;return j|0}else{k=d;l=b}while(1){if((mb[c[h>>2]&63](a,l,g,e)|0)==0){j=0;m=6;break}if((k|0)==(g|0)){j=1;m=6;break}else{k=k-g|0;l=l+g|0}}if((m|0)==6){i=f;return j|0}return 0}function Zf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=$d(a)|0;if(((d|0)%(g|0)|0|0)!=0){za(128584,128256,398,129280)}h=a+532|0;if((d|0)==0){j=1;i=f;return j|0}else{k=d;l=b}while(1){if((mb[c[h>>2]&63](a,l,g,e)|0)==0){j=0;m=6;break}if((k|0)==(g|0)){j=1;m=6;break}else{k=k-g|0;l=l+g|0}}if((m|0)==6){i=f;return j|0}return 0}function _f(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;h=a+90|0;j=e[h>>1]|0;do{if((j|0)==32845){if((fg(a)|0)!=0){k=a+536|0;if((b[a+88>>1]|0)==-30859){c[k>>2]=27;l=c[g>>2]|0;if((l|0)==0){c[g+20>>2]=19;m=1;break}else if((l|0)==1){c[g+20>>2]=20;m=1;break}else if((l|0)==2){m=1;break}else{n=14;break}}else{c[k>>2]=28;k=c[g>>2]|0;if((k|0)==0){c[g+20>>2]=21;m=1;break}else if((k|0)==2){m=1;break}else if((k|0)==1){c[g+20>>2]=22;m=1;break}else{n=14;break}}}else{m=1}}else if((j|0)==32844){if((mg(a)|0)==0){m=1}else{c[a+536>>2]=29;k=c[g>>2]|0;if((k|0)==1){m=1;break}else if((k|0)!=0){n=14;break}c[g+20>>2]=23;m=1}}else{k=c[a+628>>2]|0;c[f>>2]=j;c[f+4>>2]=128744;sc(k,128648,128672,f);m=1}}while(0);if((n|0)==14){n=c[a+628>>2]|0;c[f>>2]=(b[h>>1]|0)==-32692?128832:128840;sc(n,128648,128776,f);m=0}i=d;return m|0}function $f(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=Md(a)|0;if(((d|0)%(g|0)|0|0)!=0){za(128584,128256,647,128624)}h=a+536|0;if((d|0)==0){j=1;i=f;return j|0}else{k=d;l=b}while(1){if((mb[c[h>>2]&63](a,l,g,e)|0)!=1){j=0;m=6;break}if((k|0)==(g|0)){j=1;m=6;break}else{k=k-g|0;l=l+g|0}}if((m|0)==6){i=f;return j|0}return 0}function ag(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=$d(a)|0;if(((d|0)%(g|0)|0|0)!=0){za(128584,128256,662,128600)}h=a+536|0;if((d|0)==0){j=1;i=f;return j|0}else{k=d;l=b}while(1){if((mb[c[h>>2]&63](a,l,g,e)|0)!=1){j=0;m=6;break}if((k|0)==(g|0)){j=1;m=6;break}else{k=k-g|0;l=l+g|0}}if((m|0)==6){i=f;return j|0}return 0}function bg(a){a=a|0;b[a+98>>1]=(b[a+90>>1]|0)==-32692?1:3;b[a+84>>1]=16;b[a+86>>1]=2;return}function cg(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+576|0;e=c[d>>2]|0;if((e|0)==0){za(128560,128256,1523,128568)}c[a+672>>2]=c[e+24>>2];c[a+668>>2]=c[e+28>>2];f=c[e+12>>2]|0;if((f|0)==0){ne(e);c[d>>2]=0;Re(a);i=b;return}ne(f);ne(e);c[d>>2]=0;Re(a);i=b;return}function dg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[a+576>>2]|0;if((b|0)==65560){g=c[f>>2]|0;h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[j>>2]=g;k=1;i=e;return k|0}else{k=fb[c[f+24>>2]&31](a,b,d)|0;i=e;return k|0}return 0}function eg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((b|0)==65561){h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[g+4>>2]=j;if(j>>>0<2){k=1;i=e;return k|0}h=c[a+628>>2]|0;c[f>>2]=j;sc(h,128448,128512,f);k=0;i=e;return k|0}else if((b|0)==65560){h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[g>>2]=j;if((j|0)==2){c[f>>2]=1;Ib(a,277,f)|0;l=32;m=1}else if((j|0)==1){l=16;m=2}else if((j|0)==3){l=8;m=1}else if((j|0)==0){l=32;m=3}else{h=c[a+628>>2]|0;n=c[a>>2]|0;c[f>>2]=j;sc(h,n,128464,f);k=0;i=e;return k|0}c[f>>2]=l;Ib(a,258,f)|0;c[f>>2]=m;Ib(a,339,f)|0;if((c[a+12>>2]&1024|0)==0){o=-1}else{o=ce(a)|0}c[a+496>>2]=o;c[a+580>>2]=Md(a)|0;k=1;i=e;return k|0}else{k=fb[c[g+28>>2]&31](a,b,d)|0;i=e;return k|0}return 0}function fg(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;if((g|0)==0){za(128880,128256,1321,129104)}if(!((b[a+90>>1]|0)==-32691)){za(129120,128256,1322,129104)}if((b[a+126>>1]|0)!=1){sc(c[a+628>>2]|0,129104,129168,f);h=0;i=d;return h|0}j=c[g>>2]|0;if((j|0)==-1){switch(e[a+84>>1]<<3|e[a+86>>1]|0){case 65:case 68:{k=3;break};case 259:{k=0;break};case 258:case 257:case 260:{k=2;break};case 129:case 130:case 132:{k=1;break};default:{k=-1}}l=e[a+98>>1]|0;if((l|0)==3){m=(k|0)==2?-1:k}else if((l|0)==1){m=(k|0)==2?2:-1}else{m=-1}c[g>>2]=m;n=m}else{n=j}if((n|0)==2){c[g+8>>2]=4}else if((n|0)==3){c[g+8>>2]=3}else if((n|0)==0){c[g+8>>2]=12}else if((n|0)==1){c[g+8>>2]=6}else{sc(c[a+628>>2]|0,129104,129224,f);h=0;i=d;return h|0}if((c[a+12>>2]&1024|0)==0){n=ba(c[a+100>>2]|0,c[a+56>>2]|0)|0;c[g+16>>2]=n;o=n}else{n=ba(c[a+72>>2]|0,c[a+68>>2]|0)|0;c[g+16>>2]=n;o=n}if((o|0)!=0?(n=me(o<<2)|0,c[g+12>>2]=n,(n|0)!=0):0){h=1;i=d;return h|0}sc(c[a+628>>2]|0,129104,129032,f);h=0;i=d;return h|0}function gg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;g=i;h=c[b+576>>2]|0;if(!(f<<16>>16==0)){za(128856,128256,510,129088)}if((h|0)==0){za(128880,128256,511,129088)}f=(e|0)/(c[h+8>>2]|0)|0;do{if((c[h>>2]|0)!=2){if((c[h+16>>2]|0)<(f|0)){za(128896,128256,518,129088)}else{e=c[h+12>>2]|0;kb[c[h+20>>2]&63](h,d,f);j=e;break}}else{j=d}}while(0);d=b+604|0;h=c[d>>2]|0;e=b+592|0;k=c[e>>2]|0;l=b+608|0;m=k-(c[l>>2]|0)|0;do{if((f|0)!=0){n=f;o=m;p=h;q=j;while(1){r=n+ -1|0;if((o|0)<3){c[d>>2]=p;c[l>>2]=(c[e>>2]|0)-o;if((we(b)|0)==0){s=-1;t=17;break}u=(c[e>>2]|0)-(c[l>>2]|0)|0;v=c[d>>2]|0}else{u=o;v=p}a[v]=(c[q>>2]|0)>>>16;a[v+1|0]=(c[q>>2]|0)>>>8;w=v+3|0;a[v+2|0]=c[q>>2];x=u+ -3|0;if((r|0)==0){t=15;break}else{n=r;o=x;p=w;q=q+4|0}}if((t|0)==15){y=c[e>>2]|0;z=x;A=w;break}else if((t|0)==17){i=g;return s|0}}else{y=k;z=m;A=h}}while(0);c[d>>2]=A;c[l>>2]=y-z;s=1;i=g;return s|0}function hg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;if((d|0)<=0){i=e;return}f=a+4|0;g=d;d=c[a+12>>2]|0;a=b;while(1){g=g+ -1|0;c[d>>2]=Rf(a,c[f>>2]|0)|0;if((g|0)<=0){break}else{d=d+4|0;a=a+12|0}}i=e;return}function ig(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;if((e|0)<=0){i=f;return}g=a+4|0;h=e;e=c[a+12>>2]|0;a=d;while(1){h=h+ -1|0;d=b[a>>1]|0;j=d<<16>>16;do{if(!(d<<16>>16<1)){if(!(d<<16>>16>7409)){if((c[g>>2]|0)==0){k=j+ -3314>>2;break}else{k=~~((+(d<<16>>16)+-3314.0)*.25+ +(Ki()|0)*4.656612875245797e-10+-.5);break}}else{k=1023}}else{k=0}}while(0);d=Of((+(b[a+2>>1]|0)+.5)*30517578125.0e-15,(+(b[a+4>>1]|0)+.5)*30517578125.0e-15,c[g>>2]|0)|0;if((d|0)<0){l=Of(.210526316,.473684211,0)|0}else{l=d}c[e>>2]=l|k<<14;if((h|0)<=0){break}else{e=e+4|0;a=a+6|0}}i=f;return}function jg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0;g=i;h=c[b+576>>2]|0;if(!(f<<16>>16==0)){za(128856,128256,562,129072)}if((h|0)==0){za(128880,128256,563,129072)}f=(e|0)/(c[h+8>>2]|0)|0;do{if((c[h>>2]|0)!=2){if((c[h+16>>2]|0)<(f|0)){za(128896,128256,571,129072)}else{e=c[h+12>>2]|0;kb[c[h+20>>2]&63](h,d,f);j=e;break}}else{j=d}}while(0);d=b+604|0;h=b+592|0;e=b+608|0;k=(f|0)>0;l=24;m=(c[h>>2]|0)-(c[e>>2]|0)|0;n=c[d>>2]|0;o=0;a:while(1){if(k){p=255<<l;q=0;r=0;s=m;t=n;u=o;while(1){if((s|0)<4){c[d>>2]=t;c[e>>2]=(c[h>>2]|0)-s;if((we(b)|0)==0){v=-1;w=41;break a}x=(c[h>>2]|0)-(c[e>>2]|0)|0;y=c[d>>2]|0}else{x=s;y=t}b:do{if((r|0)<(f|0)){z=r;while(1){A=c[j+(z<<2)>>2]|0;B=1;while(1){C=B+z|0;D=(C|0)<(f|0);if(!D){break}E=B+1|0;if(((c[j+(C<<2)>>2]^A)&p|0)!=0){break}if((E|0)<129){B=E}else{F=z;G=E;break b}}A=(B|0)>3;if(A|D^1){F=A?z:C;G=B;break}else{z=C}}}else{F=r;G=u}}while(0);c:do{if((q+ -2+F|0)>>>0<2){z=c[j+(r<<2)>>2]&p;A=r+1|0;while(1){E=A+1|0;if((c[j+(A<<2)>>2]&p|0)!=(z|0)){w=27;break c}if((E|0)==(F|0)){break}else{A=E}}a[y]=q+127+A;a[y+1|0]=z>>>l;H=F;I=x+ -2|0;J=y+2|0}else{w=27}}while(0);if((w|0)==27){w=0;if((r|0)<(F|0)){E=~F;K=r;L=x;M=y;while(1){N=F-K|0;O=(N|0)>127?127:N;if((L|0)<(O+3|0)){c[d>>2]=M;c[e>>2]=(c[h>>2]|0)-L;if((we(b)|0)==0){v=-1;w=41;break a}P=(c[h>>2]|0)-(c[e>>2]|0)|0;Q=c[d>>2]|0}else{P=L;Q=M}a[Q]=O;N=Q+1|0;if((O|0)==0){R=K;S=N;T=-1}else{U=K+E|0;V=(U|0)>-128?U:-128;U=Q+(0-V)|0;W=K+ -1|0;X=K;Y=O;O=N;while(1){Y=Y+ -1|0;a[O]=(c[j+(X<<2)>>2]|0)>>>l;if((Y|0)==0){break}else{X=X+1|0;O=O+1|0}}R=W-V|0;S=U;T=V}O=P+T|0;if((R|0)<(F|0)){K=R;L=O;M=S}else{H=R;I=O;J=S;break}}}else{H=r;I=x;J=y}}if((G|0)>3){a[J]=G+126;a[J+1|0]=(c[j+(F<<2)>>2]|0)>>>l;Z=I+ -2|0;_=J+2|0;$=G}else{Z=I;_=J;$=0}M=$+H|0;if((M|0)<(f|0)){q=0-M|0;r=M;s=Z;t=_;u=$}else{aa=Z;ba=_;ca=$;break}}}else{aa=m;ba=n;ca=o}u=l+ -8|0;if((u|0)>-1){l=u;m=aa;n=ba;o=ca}else{w=40;break}}if((w|0)==40){c[d>>2]=ba;c[e>>2]=(c[h>>2]|0)-aa;v=1;i=g;return v|0}else if((w|0)==41){i=g;return v|0}return 0}function kg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;if((d|0)<=0){i=e;return}f=a+4|0;g=d;d=c[a+12>>2]|0;a=b;while(1){g=g+ -1|0;c[d>>2]=Tf(a,c[f>>2]|0)|0;if((g|0)<=0){break}else{d=d+4|0;a=a+12|0}}i=e;return}function lg(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0.0,w=0.0;g=i;h=c[a+12>>2]|0;j=a+4|0;a=c[j>>2]|0;k=(f|0)>0;if((a|0)==0){if(k){l=f;m=h;n=d}else{i=g;return}while(1){l=l+ -1|0;c[m>>2]=((b[n+2>>1]|0)*410|0)>>>7&65280|e[n>>1]<<16|((b[n+4>>1]|0)*410|0)>>>15&255;if((l|0)<=0){break}else{m=m+4|0;n=n+6|0}}i=g;return}if(k){o=f;p=a;q=h;r=d}else{i=g;return}while(1){d=o+ -1|0;h=e[r>>1]<<16;s=+(b[r+2>>1]|0)*.01251220703125;if((p|0)==0){t=s;u=1}else{v=s+ +(Ki()|0)*4.656612875245797e-10+-.5;t=v;u=(c[j>>2]|0)==0}v=+(b[r+4>>1]|0)*.01251220703125;if(u){w=v}else{w=v+ +(Ki()|0)*4.656612875245797e-10+-.5}c[q>>2]=~~t<<8&65280|h|~~w&255;if((d|0)<=0){break}o=d;p=c[j>>2]|0;q=q+4|0;r=r+6|0}i=g;return}function mg(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;if((g|0)==0){za(128880,128256,1229,128920)}if(!((b[a+90>>1]|0)==-32692)){za(128936,128256,1230,128920)}h=c[g>>2]|0;if((h|0)==-1){switch(e[a+86>>1]|e[a+84>>1]<<6|e[a+98>>1]<<3|0){case 2059:{j=0;break};case 521:case 524:{j=3;break};case 1033:case 1034:case 1036:{j=1;break};default:{j=-1}}c[g>>2]=j;k=j}else{k=h}if((k|0)==0){c[g+8>>2]=4}else if((k|0)==3){c[g+8>>2]=1}else if((k|0)==1){c[g+8>>2]=2}else{sc(c[a+628>>2]|0,128920,128976,f);l=0;i=d;return l|0}if((c[a+12>>2]&1024|0)==0){k=ba(c[a+100>>2]|0,c[a+56>>2]|0)|0;c[g+16>>2]=k;m=k}else{k=ba(c[a+72>>2]|0,c[a+68>>2]|0)|0;c[g+16>>2]=k;m=k}if((m|0)!=0?(k=me(m<<1)|0,c[g+12>>2]=k,(k|0)!=0):0){l=1;i=d;return l|0}sc(c[a+628>>2]|0,128920,129032,f);l=0;i=d;return l|0}function ng(d,f,g,h){d=d|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0;j=i;k=c[d+576>>2]|0;if(!(h<<16>>16==0)){za(128856,128256,422,128864)}if((k|0)==0){za(128880,128256,423,128864)}h=(g|0)/(c[k+8>>2]|0)|0;do{if((c[k>>2]|0)!=1){if((c[k+16>>2]|0)<(h|0)){za(128896,128256,430,128864)}else{g=c[k+12>>2]|0;kb[c[k+20>>2]&63](k,f,h);l=g;break}}else{l=f}}while(0);f=d+604|0;k=d+592|0;g=d+608|0;m=(h|0)>0;n=8;o=(c[k>>2]|0)-(c[g>>2]|0)|0;p=c[f>>2]|0;q=0;a:while(1){if(m){r=255<<n;s=0;t=0;u=o;v=p;w=q;while(1){if((u|0)<4){c[f>>2]=v;c[g>>2]=(c[k>>2]|0)-u;if((we(d)|0)==0){x=-1;y=41;break a}z=(c[k>>2]|0)-(c[g>>2]|0)|0;A=c[f>>2]|0}else{z=u;A=v}b:do{if((t|0)<(h|0)){B=t;while(1){C=(e[l+(B<<1)>>1]&r)<<16>>16;D=1;while(1){E=D+B|0;F=(E|0)<(h|0);if(!F){break}G=D+1|0;if((b[l+(E<<1)>>1]&r|0)!=(C|0)){break}if((G|0)<129){D=G}else{H=B;I=G;break b}}C=(D|0)>3;if(C|F^1){H=C?B:E;I=D;break}else{B=E}}}else{H=t;I=w}}while(0);c:do{if((s+ -2+H|0)>>>0<2){B=(e[l+(t<<1)>>1]&r)<<16>>16;C=t+1|0;while(1){G=C+1|0;if((b[l+(C<<1)>>1]&r|0)!=(B|0)){y=27;break c}if((G|0)==(H|0)){break}else{C=G}}a[A]=s+127+C;a[A+1|0]=B>>n;J=H;K=z+ -2|0;L=A+2|0}else{y=27}}while(0);if((y|0)==27){y=0;if((t|0)<(H|0)){G=~H;M=t;N=z;O=A;while(1){P=H-M|0;Q=(P|0)>127?127:P;if((N|0)<(Q+3|0)){c[f>>2]=O;c[g>>2]=(c[k>>2]|0)-N;if((we(d)|0)==0){x=-1;y=41;break a}R=(c[k>>2]|0)-(c[g>>2]|0)|0;S=c[f>>2]|0}else{R=N;S=O}a[S]=Q;P=S+1|0;if((Q|0)==0){T=M;U=P;V=-1}else{W=M+G|0;X=(W|0)>-128?W:-128;W=S+(0-X)|0;Y=M+ -1|0;Z=M;_=Q;Q=P;while(1){_=_+ -1|0;a[Q]=b[l+(Z<<1)>>1]>>n;if((_|0)==0){break}else{Z=Z+1|0;Q=Q+1|0}}T=Y-X|0;U=W;V=X}Q=R+V|0;if((T|0)<(H|0)){M=T;N=Q;O=U}else{J=T;K=Q;L=U;break}}}else{J=t;K=z;L=A}}if((I|0)>3){a[L]=I+126;a[L+1|0]=b[l+(H<<1)>>1]>>n;$=K+ -2|0;aa=L+2|0;ba=I}else{$=K;aa=L;ba=0}O=ba+J|0;if((O|0)<(h|0)){s=0-O|0;t=O;u=$;v=aa;w=ba}else{ca=$;da=aa;ea=ba;break}}}else{ca=o;da=p;ea=q}w=n+ -8|0;if((w|0)>-1){n=w;o=ca;p=da;q=ea}else{y=40;break}}if((y|0)==40){c[f>>2]=da;c[g>>2]=(c[k>>2]|0)-ca;x=1;i=j;return x|0}else if((y|0)==41){i=j;return x|0}return 0}function og(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0;f=i;if((e|0)<=0){i=f;return}h=a+4|0;j=e;e=c[a+12>>2]|0;a=d;while(1){j=j+ -1|0;b[e>>1]=Nf(+g[a>>2],c[h>>2]|0)|0;if((j|0)<=0){break}else{e=e+2|0;a=a+4|0}}i=f;return}function pg(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;g=i;i=i+16|0;h=g;j=c[a+576>>2]|0;if(!(f<<16>>16==0)){za(128856,128256,263,129432)}if((j|0)==0){za(128880,128256,264,129432)}f=(e|0)/(c[j+8>>2]|0)|0;do{if((c[j>>2]|0)!=2){if((c[j+16>>2]|0)<(f|0)){za(128896,128256,271,129432)}else{k=c[j+12>>2]|0;break}}else{k=b}}while(0);e=a+604|0;l=c[e>>2]|0;m=a+608|0;n=c[m>>2]|0;if((f|0)>0&(n|0)>0){o=l;p=n;q=0;while(1){c[k+(q<<2)>>2]=(d[o+1|0]|0)<<8|(d[o]|0)<<16|(d[o+2|0]|0);r=o+3|0;s=p+ -3|0;t=q+1|0;if((t|0)<(f|0)&(s|0)>0){o=r;p=s;q=t}else{u=r;v=s;w=t;break}}}else{u=l;v=n;w=0}c[e>>2]=u;c[m>>2]=v;if((w|0)==(f|0)){kb[c[j+20>>2]&63](j,b,f);x=1;i=g;return x|0}else{b=c[a+628>>2]|0;j=f-w|0;c[h>>2]=c[a+444>>2];a=h+4|0;c[a>>2]=j;c[a+4>>2]=((j|0)<0)<<31>>31;sc(b,129432,129368,h);x=0;i=g;return x|0}return 0}function qg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((d|0)<=0){i=e;return}f=d;d=c[a+12>>2]|0;a=b;while(1){f=f+ -1|0;Qf(c[d>>2]|0,a);if((f|0)<=0){break}else{d=d+4|0;a=a+12|0}}i=e;return}function rg(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;if((e|0)<=0){i=f;return}h=e;e=c[a+12>>2]|0;a=d;while(1){h=h+ -1|0;d=c[e>>2]|0;j=a+2|0;b[a>>1]=(d>>>12&4093)+13314;k=d&16383;if(k>>>0>16288){l=6898;m=15521}else{d=0;n=163;a:while(1){o=d;while(1){if((n-o|0)<=1){p=8;break a}q=o+n>>1;r=b[126894+(q<<3)>>1]|0;s=k-(r<<16>>16)|0;if((s|0)>0){o=q}else{break}}if((s|0)<0){d=o;n=q}else{t=r;u=q;break}}if((p|0)==8){p=0;t=b[126894+(o<<3)>>1]|0;u=o}l=~~((+g[126888+(u<<3)>>2]+(+(k-(t<<16>>16)|0)+.5)*.0035000001080334187)*32768.0);m=~~(((+(u|0)+.5)*.0035000001080334187+.016939999535679817)*32768.0)}b[j>>1]=l;b[a+4>>1]=m;if((h|0)<=0){break}else{e=e+4|0;a=a+6|0}}i=f;return}function sg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0;f=i;i=i+16|0;h=f;if((e|0)<=0){i=f;return}j=h+4|0;k=h+8|0;l=e;e=c[b+12>>2]|0;b=d;while(1){d=l+ -1|0;m=e+4|0;Qf(c[e>>2]|0,h);n=+g[h>>2];o=+g[j>>2];p=+g[k>>2];q=n*2.69+o*-1.276+p*-.414;r=n*-1.022+o*1.978+p*.044;s=n*.061+o*-.224+p*1.163;if(!(q<=0.0)){if(!(q>=1.0)){t=~~(+R(+q)*256.0)&255}else{t=-1}}else{t=0}a[b]=t;if(!(r<=0.0)){if(!(r>=1.0)){u=~~(+R(+r)*256.0)&255}else{u=-1}}else{u=0}a[b+1|0]=u;if(!(s<=0.0)){if(!(s>=1.0)){v=~~(+R(+s)*256.0)&255}else{v=-1}}else{v=0}a[b+2|0]=v;if((d|0)>0){l=d;e=m;b=b+3|0}else{break}}i=f;return}function tg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;h=i;i=i+16|0;j=h;if(!(g<<16>>16==0)){za(128856,128256,319,129416)}g=c[b+576>>2]|0;if((g|0)==0){za(128880,128256,321,129416)}k=(f|0)/(c[g+8>>2]|0)|0;do{if((c[g>>2]|0)!=2){if((c[g+16>>2]|0)<(k|0)){za(128896,128256,328,129416)}else{l=c[g+12>>2]|0;break}}else{l=e}}while(0);pe(l,0,k<<2);f=b+604|0;m=c[f>>2]|0;n=b+608|0;o=c[n>>2]|0;a:do{if((k|0)>0){p=m;q=o;r=32;while(1){s=r+ -8|0;if(!((s|0)>-1)){t=p;u=q;v=24;break a}b:do{if((q|0)>0){w=p;x=q;y=0;while(1){z=a[w]|0;A=z&255;B=w+1|0;c:do{if(z<<24>>24<0){C=w+2|0;D=(d[B]|0)<<s;E=x+ -2|0;if((y|0)<(k|0)){F=y-k|0;G=126-A|0;H=y-(F>>>0>G>>>0?F:G)|0;G=y;while(1){F=G+1|0;I=l+(G<<2)|0;c[I>>2]=c[I>>2]|D;if((F|0)==(H|0)){J=C;K=E;L=H;break}else{G=F}}}else{J=C;K=E;L=y}}else{G=x+ -1|0;if((G|0)==0){M=B;N=0;O=y;break b}else{P=G;Q=B;R=y;S=A}while(1){if(!((S|0)!=0&(R|0)<(k|0))){J=Q;K=P;L=R;break c}G=Q+1|0;H=R+1|0;D=l+(R<<2)|0;c[D>>2]=(d[Q]|0)<<s|c[D>>2];D=P+ -1|0;if((D|0)==0){M=G;N=0;O=H;break b}else{P=D;Q=G;R=H;S=S+ -1|0}}}}while(0);if((L|0)<(k|0)&(K|0)>0){w=J;x=K;y=L}else{M=J;N=K;O=L;break}}}else{M=p;N=q;O=0}}while(0);if((O|0)==(k|0)){p=M;q=N;r=s}else{T=M;U=N;V=O;v=23;break}}}else{r=32;while(1){q=r+ -8|0;if(!((q|0)>-1)){t=m;u=o;v=24;break a}if((k|0)==0){r=q}else{T=m;U=o;V=0;v=23;break}}}}while(0);if((v|0)==23){o=c[b+628>>2]|0;m=k-V|0;c[j>>2]=c[b+444>>2];b=j+4|0;c[b>>2]=m;c[b+4>>2]=((m|0)<0)<<31>>31;sc(o,129416,129368,j);W=0;X=U;Y=T;c[f>>2]=Y;c[n>>2]=X;i=h;return W|0}else if((v|0)==24){kb[c[g+20>>2]&63](g,e,k);W=1;X=u;Y=t;c[f>>2]=Y;c[n>>2]=X;i=h;return W|0}return 0}function ug(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((d|0)<=0){i=e;return}f=d;d=c[a+12>>2]|0;a=b;while(1){f=f+ -1|0;Sf(c[d>>2]|0,a);if((f|0)<=0){break}else{d=d+4|0;a=a+12|0}}i=e;return}function vg(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0;f=i;if((e|0)<=0){i=f;return}g=e;e=c[a+12>>2]|0;a=d;while(1){g=g+ -1|0;d=c[e>>2]|0;b[a>>1]=d>>>16;b[a+2>>1]=~~((+((d>>>8&255)>>>0)+.5)*.0024390243902439024*32768.0);b[a+4>>1]=~~((+((d&255)>>>0)+.5)*.0024390243902439024*32768.0);if((g|0)<=0){break}else{e=e+4|0;a=a+6|0}}i=f;return}function wg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0;f=i;i=i+16|0;h=f;if((e|0)<=0){i=f;return}j=h+4|0;k=h+8|0;l=e;e=c[b+12>>2]|0;b=d;while(1){d=l+ -1|0;m=e+4|0;Sf(c[e>>2]|0,h);n=+g[h>>2];o=+g[j>>2];p=+g[k>>2];q=n*2.69+o*-1.276+p*-.414;r=n*-1.022+o*1.978+p*.044;s=n*.061+o*-.224+p*1.163;if(!(q<=0.0)){if(!(q>=1.0)){t=~~(+R(+q)*256.0)&255}else{t=-1}}else{t=0}a[b]=t;if(!(r<=0.0)){if(!(r>=1.0)){u=~~(+R(+r)*256.0)&255}else{u=-1}}else{u=0}a[b+1|0]=u;if(!(s<=0.0)){if(!(s>=1.0)){v=~~(+R(+s)*256.0)&255}else{v=-1}}else{v=0}a[b+2|0]=v;if((d|0)>0){l=d;e=m;b=b+3|0}else{break}}i=f;return}function xg(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;k=i;i=i+16|0;l=k;m=c[f+576>>2]|0;if(!(j<<16>>16==0)){za(128856,128256,197,129352)}if((m|0)==0){za(128880,128256,198,129352)}j=(h|0)/(c[m+8>>2]|0)|0;do{if((c[m>>2]|0)!=1){if((c[m+16>>2]|0)<(j|0)){za(128896,128256,205,129352)}else{n=c[m+12>>2]|0;break}}else{n=g}}while(0);pe(n,0,j<<1);h=f+604|0;o=f+608|0;p=(j|0)>0;q=c[h>>2]|0;r=c[o>>2]|0;s=16;while(1){t=s+ -8|0;if(!((t|0)>-1)){u=22;break}a:do{if(p&(r|0)>0){v=q;w=r;x=0;while(1){y=a[v]|0;z=y&255;A=v+1|0;b:do{if(y<<24>>24<0){B=v+2|0;C=(d[A]|0)<<t;D=w+ -2|0;if((x|0)<(j|0)){E=x-j|0;F=126-z|0;G=x-(E>>>0>F>>>0?E:F)|0;F=x;while(1){E=F+1|0;H=n+(F<<1)|0;b[H>>1]=e[H>>1]|0|C;if((E|0)==(G|0)){I=B;J=D;K=G;break}else{F=E}}}else{I=B;J=D;K=x}}else{F=w+ -1|0;if((F|0)==0){L=A;M=0;N=x;break a}else{O=F;P=A;Q=x;R=z}while(1){if(!((R|0)!=0&(Q|0)<(j|0))){I=P;J=O;K=Q;break b}F=P+1|0;G=Q+1|0;C=n+(Q<<1)|0;b[C>>1]=e[C>>1]|0|(d[P]|0)<<t;C=O+ -1|0;if((C|0)==0){L=F;M=0;N=G;break a}else{O=C;P=F;Q=G;R=R+ -1|0}}}}while(0);if((K|0)<(j|0)&(J|0)>0){v=I;w=J;x=K}else{L=I;M=J;N=K;break}}}else{L=q;M=r;N=0}}while(0);if((N|0)==(j|0)){q=L;r=M;s=t}else{u=21;break}}if((u|0)==21){s=c[f+628>>2]|0;K=j-N|0;c[l>>2]=c[f+444>>2];f=l+4|0;c[f>>2]=K;c[f+4>>2]=((K|0)<0)<<31>>31;sc(s,129352,129368,l);S=0;T=M;U=L;c[h>>2]=U;c[o>>2]=T;i=k;return S|0}else if((u|0)==22){kb[c[m+20>>2]&63](m,g,j);S=1;T=r;U=q;c[h>>2]=U;c[o>>2]=T;i=k;return S|0}return 0}function yg(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0;f=i;if((e|0)<=0){i=f;return}h=e;e=c[a+12>>2]|0;a=d;while(1){d=h+ -1|0;j=e+2|0;k=b[e>>1]|0;l=k&32767;if((l|0)!=0){m=+_(+((+(l|0)+.5)*.0027076061740622863+-44.3614195558365));if((k&32768|0)==0){n=m}else{n=-m}}else{n=0.0}g[a>>2]=n;if((d|0)>0){h=d;e=j;a=a+4|0}else{break}}i=f;return}function zg(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0;g=i;if((f|0)<=0){i=g;return}h=f;f=e;e=c[d+12>>2]|0;while(1){d=h+ -1|0;j=e+2|0;k=b[e>>1]|0;l=k&32767;if((l|0)!=0){m=+_(+((+(l|0)+.5)*.0027076061740622863+-44.3614195558365));if((k&32768|0)==0){n=m}else{n=-m}if(!(n<=0.0)){if(!(n>=1.0)){o=~~(+R(+n)*256.0)&255}else{o=-1}}else{o=0}}else{o=0}a[f]=o;if((d|0)>0){h=d;f=f+1|0;e=j}else{break}}i=g;return}function Ag(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+16|0;if((b|0)!=5){za(129888,129920,1099,129936)}b=me(160)|0;e=a+576|0;c[e>>2]=b;if((b|0)==0){sc(c[a+628>>2]|0,129936,129952,d);f=0;i=d;return f|0}else{c[b+124>>2]=0;c[(c[e>>2]|0)+104>>2]=0;c[(c[e>>2]|0)+152>>2]=0;c[(c[e>>2]|0)+80>>2]=c[a+8>>2];c[a+504>>2]=14;c[a+508>>2]=15;c[a+512>>2]=24;c[a+532>>2]=30;c[a+540>>2]=30;c[a+548>>2]=30;c[a+516>>2]=16;c[a+524>>2]=25;c[a+528>>2]=17;c[a+536>>2]=31;c[a+544>>2]=31;c[a+552>>2]=31;c[a+564>>2]=6;eh(a)|0;f=1;i=d;return f|0}return 0}function Bg(a){a=a|0;return 1}function Cg(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+16|0;f=e;g=d+576|0;h=c[g>>2]|0;do{if((h|0)==0){j=me(160)|0;c[g>>2]=j;if((j|0)==0){sc(c[d+628>>2]|0,130608,129952,f);k=0;i=e;return k|0}else{c[j+124>>2]=0;c[(c[g>>2]|0)+104>>2]=0;eh(d)|0;j=c[g>>2]|0;if((j|0)!=0){l=j;break}za(130088,129920,229,130608)}}else{l=h}}while(0);h=l+124|0;if((c[h>>2]|0)!=0){k=1;i=e;return k|0}l=me(40952)|0;c[h>>2]=l;if((l|0)==0){sc(c[d+628>>2]|0,130608,130624,f);k=0;i=e;return k|0}else{m=l;n=255}while(1){l=n&255;a[m+(n<<3)+6|0]=l;a[(c[h>>2]|0)+(n<<3)+7|0]=l;l=c[h>>2]|0;b[l+(n<<3)+4>>1]=1;c[l+(n<<3)>>2]=0;if((n|0)==0){break}m=c[h>>2]|0;n=n+ -1|0}pe((c[h>>2]|0)+2048|0,0,16);k=1;i=e;return k|0}function Dg(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;g=c[d+576>>2]|0;if((g|0)==0){za(130088,129920,267,130536)}h=g+124|0;if((c[h>>2]|0)==0){jb[c[d+508>>2]&31](d)|0}j=c[d+588>>2]|0;if((a[j]|0)==0?!((a[j+1|0]&1)==0):0){j=g+104|0;if((c[j>>2]|0)==0){ue(c[d+628>>2]|0,130536,130552,f);c[d+532>>2]=32;c[d+540>>2]=32;c[d+548>>2]=32;jb[c[d+508>>2]&31](d)|0;c[j>>2]=32}b[g+66>>1]=511}else{b[g+66>>1]=510;c[g+104>>2]=30}b[g+64>>1]=9;c[g+76>>2]=0;c[g+72>>2]=0;c[g+88>>2]=0;j=g+84|0;c[j>>2]=511;f=c[d+608>>2]|0;d=Mi(f|0,((f|0)<0)<<31>>31|0,3)|0;f=g+96|0;c[f>>2]=d;c[f+4>>2]=F;f=(c[h>>2]|0)+2064|0;c[g+116>>2]=f;pe(f,0,38888);f=c[h>>2]|0;c[g+112>>2]=f+ -8;c[g+120>>2]=f+((c[j>>2]|0)+ -1<<3);i=e;return 1}function Eg(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0;j=i;i=i+16|0;k=j;l=c[f+576>>2]|0;if((l|0)==0){za(130088,129920,372,130168)}m=l+124|0;if((c[m>>2]|0)==0){za(130184,129920,373,130168)}n=l+88|0;o=c[n>>2]|0;do{if((o|0)==0){p=h;q=g}else{r=c[l+108>>2]|0;s=(e[r+4>>1]|0)-o|0;if((s|0)<=(h|0)){t=g+s|0;u=r;v=s;w=t;while(1){x=w+ -1|0;y=c[u>>2]|0;a[x]=a[u+6|0]|0;z=v+ -1|0;if((z|0)==0|(y|0)==0){break}else{u=y;v=z;w=x}}c[n>>2]=0;p=h-s|0;q=t;break}c[n>>2]=o+h;w=r;v=s;do{w=c[w>>2]|0;v=v+ -1|0;A=(w|0)==0}while(!((v|0)<=(h|0)|A));if(A){B=1;i=j;return B|0}v=w;s=h;r=g+h|0;while(1){t=r+ -1|0;a[t]=a[v+6|0]|0;u=c[v>>2]|0;x=s+ -1|0;if((x|0)==0|(u|0)==0){B=1;break}else{v=u;s=x;r=t}}i=j;return B|0}}while(0);h=f+604|0;g=c[h>>2]|0;A=l+64|0;o=e[A>>1]|0;r=l+72|0;s=c[r>>2]|0;v=l+76|0;w=c[v>>2]|0;t=l+84|0;x=c[t>>2]|0;u=l+112|0;z=c[u>>2]|0;y=l+116|0;C=c[y>>2]|0;D=l+120|0;E=c[D>>2]|0;a:do{if((p|0)>0){G=l+96|0;H=z;I=g;J=C;K=E;L=o;M=x;N=w;O=s;P=p;Q=q;b:while(1){R=G;S=c[R>>2]|0;T=c[R+4>>2]|0;R=((L|0)<0)<<31>>31;if(T>>>0<R>>>0|(T|0)==(R|0)&S>>>0<L>>>0){U=18;break}V=I+1|0;W=d[I]|0|O<<8;X=N+8|0;if((X|0)<(L|0)){Y=I+2|0;Z=N+16|0;_=d[V]|0|W<<8}else{Y=V;Z=X;_=W}$=Z-L|0;W=_>>$&M;X=W&65535;V=Ii(S|0,T|0,L|0,R|0)|0;R=G;c[R>>2]=V;c[R+4>>2]=F;R=W&65535;if(X<<16>>16==257){aa=Y;ba=J;ca=K;da=L;ea=M;fa=$;ga=_;ha=P;ia=H;break a}V=c[m>>2]|0;do{if(X<<16>>16==256){ja=V+2064|0;pe(ja,0,38888);ka=(c[m>>2]|0)+4080|0;T=G;S=c[T>>2]|0;la=c[T+4>>2]|0;if(la>>>0<0|(la|0)==0&S>>>0<9){U=24;break b}T=Y+1|0;ma=d[Y]|0|_<<8;na=$+8|0;if((na|0)<9){oa=Y+2|0;pa=$+16|0;qa=d[T]|0|ma<<8}else{oa=T;pa=na;qa=ma}ma=pa+ -9|0;na=qa>>ma;T=na&511;ra=T&65535;sa=Oi(S|0,la|0,-9,-1)|0;la=G;c[la>>2]=sa;c[la+4>>2]=F;if(ra<<16>>16==257){aa=oa;ba=ja;ca=ka;da=9;ea=511;fa=ma;ga=qa;ha=P;ia=H;break a}if((ra&65535)>255){U=29;break b}a[Q]=na;ta=oa;ua=ja;va=ka;wa=9;xa=511;ya=ma;Aa=qa;Ba=P+ -1|0;Ca=(c[m>>2]|0)+(T<<3)|0;Da=Q+1|0}else{Ea=V+(R<<3)|0;if(!(J>>>0>=V>>>0&J>>>0<(V+40952|0)>>>0)){U=33;break b}c[J>>2]=H;T=c[m>>2]|0;if(!(H>>>0>=T>>>0&H>>>0<(T+40952|0)>>>0)){U=35;break b}T=a[H+7|0]|0;a[J+7|0]=T;b[J+4>>1]=(e[H+4>>1]|0)+1;if(Ea>>>0<J>>>0){Fa=a[V+(R<<3)+7|0]|0}else{Fa=T}a[J+6|0]=Fa;Ga=J+8|0;if(Ga>>>0>K>>>0){T=L+1|0;ma=(T|0)>12?12:T;T=1<<ma;Ha=(c[m>>2]|0)+(T+ -2<<3)|0;Ia=ma;Ja=T+ -1|0}else{Ha=K;Ia=L;Ja=M}if(!((X&65535)>255)){a[Q]=W;ta=Y;ua=Ga;va=Ha;wa=Ia;xa=Ja;ya=$;Aa=_;Ba=P+ -1|0;Ca=Ea;Da=Q+1|0;break}T=b[V+(R<<3)+4>>1]|0;ma=T&65535;if(T<<16>>16==0){U=42;break b}if((ma|0)>(P|0)){U=44;break b}T=Q+ma|0;na=Ea;ra=T;while(1){la=ra+ -1|0;sa=c[na>>2]|0;a[la]=a[na+6|0]|0;Ka=(sa|0)!=0;if(Ka&la>>>0>Q>>>0){na=sa;ra=la}else{break}}if(Ka){U=54;break b}ta=Y;ua=Ga;va=Ha;wa=Ia;xa=Ja;ya=$;Aa=_;Ba=P-ma|0;Ca=Ea;Da=T}}while(0);if((Ba|0)>0){H=Ca;I=ta;J=ua;K=va;L=wa;M=xa;N=ya;O=Aa;P=Ba;Q=Da}else{aa=ta;ba=ua;ca=va;da=wa;ea=xa;fa=ya;ga=Aa;ha=Ba;ia=Ca;break a}}if((U|0)==18){G=c[f+628>>2]|0;c[k>>2]=c[f+452>>2];ue(G,130168,130208,k);aa=I;ba=J;ca=K;da=L;ea=M;fa=N;ga=O;ha=P;ia=H;break}else if((U|0)==24){G=c[f+628>>2]|0;c[k>>2]=c[f+452>>2];ue(G,130168,130208,k);aa=Y;ba=ja;ca=ka;da=9;ea=511;fa=$;ga=_;ha=P;ia=H;break}else if((U|0)==29){G=c[f+628>>2]|0;R=c[f>>2]|0;c[k>>2]=c[f+444>>2];sc(G,R,130264,k);B=0;i=j;return B|0}else if((U|0)==33){R=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(R,130168,130312,k);B=0;i=j;return B|0}else if((U|0)==35){R=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(R,130168,130312,k);B=0;i=j;return B|0}else if((U|0)==42){R=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(R,130168,130352,k);B=0;i=j;return B|0}else if((U|0)==44){c[l+108>>2]=Ea;R=Ea;do{R=c[R>>2]|0;if((R|0)==0){aa=Y;ba=Ga;ca=Ha;da=Ia;ea=Ja;fa=$;ga=_;ha=P;ia=Ea;break a}}while((e[R+4>>1]|0|0)>(P|0));c[n>>2]=P;H=R;O=P;N=Q+P|0;do{N=N+ -1|0;a[N]=a[H+6|0]|0;H=c[H>>2]|0;O=O+ -1|0;La=(H|0)==0}while(!((O|0)==0|La));if(La){aa=Y;ba=Ga;ca=Ha;da=Ia;ea=Ja;fa=$;ga=_;ha=O;ia=Ea;break}H=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(H,130168,130480,k);aa=Y;ba=Ga;ca=Ha;da=Ia;ea=Ja;fa=$;ga=_;ha=O;ia=Ea;break}else if((U|0)==54){H=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(H,130168,130480,k);aa=Y;ba=Ga;ca=Ha;da=Ia;ea=Ja;fa=$;ga=_;ha=P;ia=Ea;break}}else{aa=g;ba=C;ca=E;da=o;ea=x;fa=w;ga=s;ha=p;ia=z}}while(0);c[h>>2]=aa;b[A>>1]=da;c[r>>2]=ga;c[v>>2]=fa;c[t>>2]=ea;c[u>>2]=ia;c[y>>2]=ba;c[D>>2]=ca;if((ha|0)<=0){B=1;i=j;return B|0}ca=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];f=k+4|0;c[f>>2]=ha;c[f+4>>2]=((ha|0)<0)<<31>>31;sc(ca,130168,130424,k);B=0;i=j;return B|0}function Fg(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=c[a+576>>2]|0;if((d|0)==0){za(130088,129920,781,130120)}e=me(72008)|0;c[d+152>>2]=e;if((e|0)!=0){f=1;i=b;return f|0}sc(c[a+628>>2]|0,130120,130136,b);f=0;i=b;return f|0}function Gg(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0;d=i;e=c[a+576>>2]|0;if((e|0)==0){za(130088,129920,800,130104)}f=e+152|0;g=c[f>>2]|0;if((g|0)==0){jb[c[a+516>>2]&31](a)|0;h=c[f>>2]|0}else{h=g}b[e+64>>1]=9;b[e+66>>1]=511;b[e+68>>1]=258;c[e+76>>2]=0;c[e+72>>2]=0;c[e+132>>2]=1e4;c[e+136>>2]=0;c[e+140>>2]=0;c[e+144>>2]=0;c[e+148>>2]=(c[a+588>>2]|0)+((c[a+592>>2]|0)+ -5);a=h+72e3|0;g=8993;while(1){g=g+ -8|0;c[a+ -56>>2]=-1;c[a+ -48>>2]=-1;c[a+ -40>>2]=-1;c[a+ -32>>2]=-1;c[a+ -24>>2]=-1;c[a+ -16>>2]=-1;c[a+ -8>>2]=-1;c[a>>2]=-1;if(!((g|0)>-1)){break}else{a=a+ -64|0}}c[h>>2]=-1;c[e+128>>2]=65535;i=d;return 1}function Hg(b){b=b|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;d=i;f=c[b+576>>2]|0;g=c[b+604>>2]|0;h=c[f+76>>2]|0;j=c[f+72>>2]|0;k=e[f+64>>1]|0;if(g>>>0>(c[f+148>>2]|0)>>>0){l=b+588|0;c[b+608>>2]=g-(c[l>>2]|0);we(b)|0;m=c[l>>2]|0}else{m=g}g=f+128|0;f=c[g>>2]|0;if((f|0)==65535){n=h;o=j;p=m}else{l=f|j<<k;j=k+h|0;h=j+ -8|0;f=m+1|0;a[m]=l>>h;if((h|0)>7){q=j+ -16|0;a[f]=l>>q;r=q;s=m+2|0}else{r=h;s=f}c[g>>2]=65535;n=r;o=l;p=s}s=o<<k|257;o=n+k|0;k=o+ -8|0;n=p+1|0;a[p]=s>>k;if((k|0)>7){l=o+ -16|0;a[n]=s>>l;t=l;u=p+2|0}else{t=k;u=n}if((t|0)<=0){v=u;w=b+588|0;x=c[w>>2]|0;y=v;z=x;A=y-z|0;B=b+608|0;c[B>>2]=A;i=d;return 1}a[u]=s<<8-t;v=u+1|0;w=b+588|0;x=c[w>>2]|0;y=v;z=x;A=y-z|0;B=b+608|0;c[B>>2]=A;i=d;return 1}function Ig(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0;j=i;k=c[f+576>>2]|0;if((k|0)==0){l=0;i=j;return l|0}m=k+152|0;if((c[m>>2]|0)==0){za(130024,129920,878,130048)}n=k+140|0;o=c[n>>2]|0;p=k+144|0;q=c[p>>2]|0;r=k+132|0;s=c[r>>2]|0;t=k+72|0;u=c[t>>2]|0;v=k+76|0;w=c[v>>2]|0;x=k+68|0;y=e[x>>1]|0;z=k+66|0;A=e[z>>1]|0;B=k+64|0;C=e[B>>1]|0;D=f+604|0;E=c[D>>2]|0;F=c[k+148>>2]|0;G=k+128|0;H=c[G>>2]|0;I=H&65535;if((H&65535|0)==65535&(h|0)>0){H=u<<C|256;J=C+w|0;K=J+ -8|0;L=E+1|0;a[E]=H>>K;if((K|0)>7){M=J+ -16|0;a[L]=H>>M;N=M;O=E+2|0}else{N=K;O=L}P=g+1|0;Q=h+ -1|0;R=d[g]|0;S=o+1|0;T=N;U=H;V=O;W=C+q|0}else{P=g;Q=h;R=I;S=o;T=w;U=u;V=E;W=q}a:do{if((Q|0)>0){q=f+588|0;E=f+608|0;u=k+136|0;w=P;o=Q;I=s;h=R;g=y;O=S;H=A;N=C;L=T;K=U;M=V;J=W;b:while(1){X=w+1|0;Y=a[w]|0;Z=Y&255;_=o+ -1|0;$=O+1|0;aa=h&65535;ba=(Z<<12)+aa|0;ca=Z<<5;Z=ca^aa;da=c[m>>2]|0;ea=da+(Z<<3)|0;fa=c[ea>>2]|0;c:do{if((fa|0)!=(ba|0)){d:do{if((fa|0)>-1){ga=(ca|0)==(aa|0)?1:9001-Z|0;ha=Z;while(1){ia=ha-ga|0;ja=(ia|0)<0?ia+9001|0:ia;ia=da+(ja<<3)|0;ka=c[ia>>2]|0;if((ka|0)==(ba|0)){break}if((ka|0)>-1){ha=ja}else{la=ia;break d}}ma=I;na=b[da+(ja<<3)+4>>1]|0;oa=g;pa=$;qa=H;ra=N;sa=L;ta=K;ua=M;va=J;break c}else{la=ea}}while(0);if(M>>>0>F>>>0){c[E>>2]=M-(c[q>>2]|0);we(f)|0;wa=c[q>>2]|0}else{wa=M}ha=K<<N|aa;ga=N+L|0;ia=ga+ -8|0;ka=wa+1|0;a[wa]=ha>>ia;if((ia|0)>7){xa=ga+ -16|0;a[ka]=ha>>xa;ya=xa;Aa=wa+2|0}else{ya=ia;Aa=ka}ka=N+J|0;ia=Y&255;xa=g+1|0;b[la+4>>1]=g;c[la>>2]=ba;if((xa|0)==4094){ga=c[m>>2]|0;Ba=ga+72e3|0;Ca=8993;while(1){Ca=Ca+ -8|0;c[Ba+ -56>>2]=-1;c[Ba+ -48>>2]=-1;c[Ba+ -40>>2]=-1;c[Ba+ -32>>2]=-1;c[Ba+ -24>>2]=-1;c[Ba+ -16>>2]=-1;c[Ba+ -8>>2]=-1;c[Ba>>2]=-1;if(!((Ca|0)>-1)){break}else{Ba=Ba+ -64|0}}c[ga>>2]=-1;c[u>>2]=0;Ba=ha<<N|256;Ca=ya+N|0;Da=Ca+ -8|0;Ea=Aa+1|0;a[Aa]=Ba>>Da;if((Da|0)<=7){ma=I;na=ia;oa=258;pa=0;qa=511;ra=9;sa=Da;ta=Ba;ua=Ea;va=N;break}Da=Ca+ -16|0;a[Ea]=Ba>>Da;ma=I;na=ia;oa=258;pa=0;qa=511;ra=9;sa=Da;ta=Ba;ua=Aa+2|0;va=N;break}if((g|0)>=(H|0)){Ba=N+1|0;if((Ba|0)>=13){break b}ma=I;na=ia;oa=xa;pa=$;qa=(1<<Ba)+ -1|0;ra=Ba;sa=ya;ta=ha;ua=Aa;va=ka;break}if(($|0)>=(I|0)){Ba=O+10001|0;if((O|0)>8388606){Da=ka>>8;if((Da|0)==0){Fa=2147483647}else{Fa=($|0)/(Da|0)|0}}else{Fa=($<<8|0)/(ka|0)|0}if((Fa|0)>(c[u>>2]|0)){c[u>>2]=Fa;ma=Ba;na=ia;oa=xa;pa=$;qa=H;ra=N;sa=ya;ta=ha;ua=Aa;va=ka;break}Da=c[m>>2]|0;Ea=Da+72e3|0;Ca=8993;while(1){Ca=Ca+ -8|0;c[Ea+ -56>>2]=-1;c[Ea+ -48>>2]=-1;c[Ea+ -40>>2]=-1;c[Ea+ -32>>2]=-1;c[Ea+ -24>>2]=-1;c[Ea+ -16>>2]=-1;c[Ea+ -8>>2]=-1;c[Ea>>2]=-1;if(!((Ca|0)>-1)){break}else{Ea=Ea+ -64|0}}c[Da>>2]=-1;c[u>>2]=0;Ea=ha<<N|256;Ca=ya+N|0;ga=Ca+ -8|0;Ga=Aa+1|0;a[Aa]=Ea>>ga;if((ga|0)>7){Ha=Ca+ -16|0;a[Ga]=Ea>>Ha;ma=Ba;na=ia;oa=258;pa=0;qa=511;ra=9;sa=Ha;ta=Ea;ua=Aa+2|0;va=N}else{ma=Ba;na=ia;oa=258;pa=0;qa=511;ra=9;sa=ga;ta=Ea;ua=Ga;va=N}}else{ma=I;na=ia;oa=xa;pa=$;qa=H;ra=N;sa=ya;ta=ha;ua=Aa;va=ka}}else{ma=I;na=b[da+(Z<<3)+4>>1]|0;oa=g;pa=$;qa=H;ra=N;sa=L;ta=K;ua=M;va=J}}while(0);if((_|0)>0){w=X;o=_;I=ma;h=na;g=oa;O=pa;H=qa;N=ra;L=sa;K=ta;M=ua;J=va}else{Ia=ma;Ja=na;Ka=oa;La=pa;Ma=qa;Na=ra;Oa=sa;Pa=ta;Qa=ua;Ra=va;break a}}za(130064,129920,976,130048)}else{Ia=s;Ja=R;Ka=y;La=S;Ma=A;Na=C;Oa=T;Pa=U;Qa=V;Ra=W}}while(0);c[n>>2]=La;c[p>>2]=Ra;c[r>>2]=Ia;c[G>>2]=Ja&65535;c[t>>2]=Pa;c[v>>2]=Oa;b[x>>1]=Ka;b[z>>1]=Ma;b[B>>1]=Na;c[D>>2]=Qa;l=1;i=j;return l|0}function Jg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;kh(a)|0;d=a+576|0;e=c[d>>2]|0;if((e|0)==0){za(129984,129920,1081,130008)}f=c[e+124>>2]|0;if((f|0)==0){g=e}else{ne(f);g=c[d>>2]|0}f=c[g+152>>2]|0;if((f|0)==0){h=g}else{ne(f);h=c[d>>2]|0}ne(h);c[d>>2]=0;Re(a);i=b;return}function Kg(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0;j=i;i=i+16|0;k=j;l=c[f+576>>2]|0;if((l|0)==0){za(130088,129920,596,130592)}m=l+88|0;n=c[m>>2]|0;do{if((n|0)==0){o=h;p=g}else{q=c[l+108>>2]|0;r=(e[q+4>>1]|0)-n|0;if((r|0)<=(h|0)){s=g+r|0;t=q;u=r;v=s;while(1){v=v+ -1|0;a[v]=a[t+6|0]|0;u=u+ -1|0;if((u|0)==0){break}else{t=c[t>>2]|0}}c[m>>2]=0;o=h-r|0;p=s;break}c[m>>2]=n+h;t=q;u=r;do{t=c[t>>2]|0;u=u+ -1|0}while((u|0)>(h|0));u=t;r=h;q=g+h|0;while(1){s=q+ -1|0;a[s]=a[u+6|0]|0;v=r+ -1|0;if((v|0)==0){w=1;break}else{u=c[u>>2]|0;r=v;q=s}}i=j;return w|0}}while(0);h=f+604|0;g=c[h>>2]|0;n=l+64|0;q=e[n>>1]|0;r=l+72|0;u=c[r>>2]|0;t=l+76|0;s=c[t>>2]|0;v=l+84|0;x=c[v>>2]|0;y=l+112|0;z=c[y>>2]|0;A=l+116|0;B=c[A>>2]|0;C=l+120|0;D=c[C>>2]|0;a:do{if((o|0)>0){E=l+96|0;G=l+124|0;H=z;I=g;J=B;K=D;L=q;M=x;N=s;O=u;P=o;Q=p;b:while(1){R=E;S=c[R>>2]|0;T=c[R+4>>2]|0;R=((L|0)<0)<<31>>31;if(T>>>0<R>>>0|(T|0)==(R|0)&S>>>0<L>>>0){U=16;break}V=I+1|0;W=(d[I]|0)<<N|O;X=N+8|0;if((X|0)<(L|0)){Y=I+2|0;Z=N+16|0;_=(d[V]|0)<<X|W}else{Y=V;Z=X;_=W}W=_&M;X=W&65535;$=_>>L;aa=Z-L|0;V=Ii(S|0,T|0,L|0,R|0)|0;R=E;c[R>>2]=V;c[R+4>>2]=F;if((X|0)==257){ba=Y;ca=J;da=K;ea=L;fa=M;ga=aa;ha=$;ia=P;ja=H;break a}R=c[G>>2]|0;do{if((X|0)==256){ka=R+2064|0;pe(ka,0,38888);la=(c[G>>2]|0)+4088|0;V=E;T=c[V>>2]|0;S=c[V+4>>2]|0;if(S>>>0<0|(S|0)==0&T>>>0<9){U=22;break b}V=Y+1|0;ma=(d[Y]|0)<<aa|$;na=aa+8|0;if((na|0)<9){oa=Y+2|0;pa=aa+16|0;qa=(d[V]|0)<<na|ma}else{oa=V;pa=na;qa=ma}ma=qa&511;na=qa>>9;V=pa+ -9|0;ra=Oi(T|0,S|0,-9,-1)|0;S=E;c[S>>2]=ra;c[S+4>>2]=F;if((ma|0)==257){ba=oa;ca=ka;da=la;ea=9;fa=511;ga=V;ha=na;ia=P;ja=H;break a}if(ma>>>0>255){U=27;break b}a[Q]=qa;sa=oa;ta=ka;ua=la;va=9;wa=511;xa=V;ya=na;Aa=P+ -1|0;Ba=(c[G>>2]|0)+(ma<<3)|0;Ca=Q+1|0}else{Da=R+(X<<3)|0;if(!(J>>>0>=R>>>0&J>>>0<(R+40952|0)>>>0)){U=31;break b}c[J>>2]=H;ma=c[G>>2]|0;if(!(H>>>0>=ma>>>0&H>>>0<(ma+40952|0)>>>0)){U=33;break b}ma=a[H+7|0]|0;a[J+7|0]=ma;b[J+4>>1]=(e[H+4>>1]|0)+1;if(Da>>>0<J>>>0){Ea=a[R+(X<<3)+7|0]|0}else{Ea=ma}a[J+6|0]=Ea;Fa=J+8|0;if(Fa>>>0>K>>>0){ma=L+1|0;na=(ma|0)>12?12:ma;ma=(1<<na)+ -1|0;Ga=(c[G>>2]|0)+(ma<<3)|0;Ha=na;Ia=ma}else{Ga=K;Ha=L;Ia=M}if(!(X>>>0>255)){a[Q]=W;sa=Y;ta=Fa;ua=Ga;va=Ha;wa=Ia;xa=aa;ya=$;Aa=P+ -1|0;Ba=Da;Ca=Q+1|0;break}ma=b[R+(X<<3)+4>>1]|0;na=ma&65535;if(ma<<16>>16==0){U=40;break b}if((na|0)>(P|0)){U=42;break b}ma=Q+na|0;V=Da;S=ma;do{S=S+ -1|0;a[S]=a[V+6|0]|0;V=c[V>>2]|0}while((V|0)!=0);sa=Y;ta=Fa;ua=Ga;va=Ha;wa=Ia;xa=aa;ya=$;Aa=P-na|0;Ba=Da;Ca=ma}}while(0);if((Aa|0)>0){H=Ba;I=sa;J=ta;K=ua;L=va;M=wa;N=xa;O=ya;P=Aa;Q=Ca}else{ba=sa;ca=ta;da=ua;ea=va;fa=wa;ga=xa;ha=ya;ia=Aa;ja=Ba;break a}}if((U|0)==16){G=c[f+628>>2]|0;c[k>>2]=c[f+452>>2];ue(G,130592,130208,k);ba=I;ca=J;da=K;ea=L;fa=M;ga=N;ha=O;ia=P;ja=H;break}else if((U|0)==22){G=c[f+628>>2]|0;c[k>>2]=c[f+452>>2];ue(G,130592,130208,k);ba=Y;ca=ka;da=la;ea=9;fa=511;ga=aa;ha=$;ia=P;ja=H;break}else if((U|0)==27){G=c[f+628>>2]|0;E=c[f>>2]|0;c[k>>2]=c[f+444>>2];sc(G,E,130264,k);w=0;i=j;return w|0}else if((U|0)==31){E=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(E,130592,130312,k);w=0;i=j;return w|0}else if((U|0)==33){E=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(E,130592,130312,k);w=0;i=j;return w|0}else if((U|0)==40){E=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];sc(E,130592,130352,k);w=0;i=j;return w|0}else if((U|0)==42){c[l+108>>2]=Da;E=Da;do{E=c[E>>2]|0}while((e[E+4>>1]|0|0)>(P|0));c[m>>2]=P;H=E;O=P;N=Q+P|0;while(1){M=N+ -1|0;a[M]=a[H+6|0]|0;L=O+ -1|0;if((L|0)==0){ba=Y;ca=Fa;da=Ga;ea=Ha;fa=Ia;ga=aa;ha=$;ia=0;ja=Da;break}else{H=c[H>>2]|0;O=L;N=M}}}}else{ba=g;ca=B;da=D;ea=q;fa=x;ga=s;ha=u;ia=o;ja=z}}while(0);c[h>>2]=ba;b[n>>1]=ea;c[r>>2]=ha;c[t>>2]=ga;c[v>>2]=fa;c[y>>2]=ja;c[A>>2]=ca;c[C>>2]=da;if((ia|0)<=0){w=1;i=j;return w|0}da=c[f+628>>2]|0;c[k>>2]=c[f+444>>2];f=k+4|0;c[f>>2]=ia;c[f+4>>2]=((ia|0)<0)<<31>>31;sc(da,130592,130424,k);w=0;i=j;return w|0}function Lg(a,b){a=a|0;b=b|0;c[a+532>>2]=33;c[a+540>>2]=33;c[a+548>>2]=33;return 1}function Mg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;g=i;i=i+16|0;h=g;j=(f|0)>0;if(j){Li(e|0,-1,f|0)|0}k=b+604|0;l=b+608|0;m=c[b+580>>2]|0;if(((f|0)%(m|0)|0|0)!=0){sc(c[b+628>>2]|0,130656,130672,h);n=0;i=g;return n|0}o=c[l>>2]|0;p=c[k>>2]|0;a:do{if(j){q=b+56|0;r=m+1|0;s=f;t=p;u=o;v=e;b:while(1){w=t+1|0;x=d[t]|0;y=u+ -1|0;c:do{if((x|0)==0){if((u|0)<=(m|0)){break b}qe(v,w,m);z=t+r|0;A=y-m|0}else if((x|0)==64){B=(d[w]|0)<<8|(d[t+2|0]|0);C=(d[t+3|0]|0)<<8|(d[t+4|0]|0);D=C+4|0;if((u|0)<=(D|0)){break b}if((C+B|0)>(m|0)){break b}qe(v+B|0,t+5|0,C);z=t+(C+5)|0;A=y-D|0}else{D=c[q>>2]|0;C=w;B=y;E=x;F=0;G=v;while(1){H=E>>>6;I=E&63;J=F>>>0<D>>>0;d:do{if((I|0)!=0&J){K=H<<6&255;L=H<<4;M=H<<2;N=I;O=F;P=G;while(1){Q=N;R=O;while(1){S=Q+ -1|0;T=R+1|0;U=R&3;if((U|0)==3){break}else if((U|0)==0){a[P]=K}else if((U|0)==1){a[P]=d[P]|0|L}else if((U|0)==2){a[P]=d[P]|0|M}U=T>>>0<D>>>0;if((S|0)>0&U){Q=S;R=T}else{V=U;W=T;X=P;break d}}R=P+1|0;a[P]=d[P]|0|H;Q=T>>>0<D>>>0;if((S|0)>0&Q){N=S;O=T;P=R}else{V=Q;W=T;X=R;break}}}else{V=J;W=F;X=G}}while(0);if(!V){z=C;A=B;break c}if((B|0)==0){break b}J=d[C]|0;C=C+1|0;B=B+ -1|0;E=J;F=W;G=X}}}while(0);x=s-m|0;if((x|0)>0){s=x;t=z;u=A;v=v+m|0}else{Y=z;Z=A;break a}}v=c[b+628>>2]|0;c[h>>2]=c[b+444>>2];sc(v,130656,130712,h);n=0;i=g;return n|0}else{Y=p;Z=o}}while(0);c[k>>2]=Y;c[l>>2]=Z;n=1;i=g;return n|0}function Ng(a,b){a=a|0;b=b|0;c[a+532>>2]=34;c[a+540>>2]=34;c[a+548>>2]=34;c[a+524>>2]=26;c[a+528>>2]=18;c[a+536>>2]=35;c[a+544>>2]=36;c[a+552>>2]=36;return 1}function Og(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;f=i;i=i+16|0;g=f;h=b+604|0;j=b+608|0;k=b+628|0;l=d;d=e;e=c[h>>2]|0;m=c[j>>2]|0;a:while(1){if((d|0)>0){n=e;o=m}else{p=16;break}while(1){if((o|0)<=0){q=n;r=o;break a}s=n+1|0;t=a[n]|0;u=t<<24>>24;v=o+ -1|0;if(!(t<<24>>24<0)){p=10;break}if(t<<24>>24==-128){n=s;o=v}else{p=6;break}}if((p|0)==6){p=0;t=1-u|0;if((d|0)<(t|0)){w=c[k>>2]|0;c[g>>2]=t-d;ue(w,130752,130768,g);x=d}else{x=t}t=n+2|0;w=o+ -2|0;if((x|0)>0){Li(l|0,a[s]|0,x|0)|0;y=l+x|0;z=x;A=t;B=w}else{y=l;z=x;A=t;B=w}}else if((p|0)==10){p=0;if((d|0)<(u+1|0)){w=c[k>>2]|0;c[g>>2]=1-d+u;ue(w,130752,130768,g);C=d+ -1|0}else{C=u}w=C+1|0;if((o|0)<=(w|0)){p=13;break}qe(l,s,w);y=l+w|0;z=w;A=n+(C+2)|0;B=v-w|0}l=y;d=d-z|0;e=A;m=B}if((p|0)==13){ue(c[k>>2]|0,130752,130816,g);q=s;r=v}else if((p|0)==16){c[h>>2]=e;c[j>>2]=m;D=1;i=f;return D|0}c[h>>2]=q;c[j>>2]=r;r=c[k>>2]|0;c[g>>2]=c[b+444>>2];sc(r,130752,130864,g);D=0;i=f;return D|0}function Pg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;b=i;d=me(4)|0;e=a+576|0;c[e>>2]=d;if((d|0)==0){f=0;i=b;return f|0}if((c[a+12>>2]&1024|0)==0){d=Md(a)|0;c[c[e>>2]>>2]=d;f=1;i=b;return f|0}else{d=$d(a)|0;c[c[e>>2]>>2]=d;f=1;i=b;return f|0}return 0}function Qg(a){a=a|0;var b=0,d=0;b=i;d=c[a+576>>2]|0;if((d|0)!=0){ne(d)}i=b;return 1}



function Rg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;f=i;g=b+604|0;h=c[g>>2]|0;j=(c[b+588>>2]|0)+(c[b+592>>2]|0)|0;k=b+608|0;do{if((e|0)>0){l=e;m=d;n=0;o=h;p=0;a:while(1){q=a[m]|0;r=l+ -1|0;s=m+1|0;b:do{if((r|0)>0){t=r;u=s;v=1;while(1){w=v+1|0;if(!(q<<24>>24==(a[u]|0))){x=t;y=u;z=v;break b}A=t+ -1|0;B=u+1|0;if((A|0)>0){t=A;u=B;v=w}else{x=A;y=B;z=w;break}}}else{x=r;y=s;z=1}}while(0);s=n;r=z;v=o;u=p;c:while(1){do{if((r|0)==1){do{if(!((v+2|0)>>>0<j>>>0)){if((u&-3|0)!=1){c[k>>2]=v-(c[g>>2]|0)+(c[k>>2]|0);if((we(b)|0)==0){C=-1;D=46;break a}E=s;F=c[g>>2]|0;break}t=s;c[k>>2]=t-(c[g>>2]|0)+(c[k>>2]|0);if((we(b)|0)==0){C=-1;D=46;break a}w=v-t|0;t=c[g>>2]|0;if((w|0)>0){B=s;A=t;G=w;while(1){G=G+ -1|0;a[A]=a[B]|0;if((G|0)<=0){break}else{B=B+1|0;A=A+1|0}}E=c[g>>2]|0;F=t+w|0}else{E=t;F=t}}else{E=s;F=v}}while(0);if((u|0)==1){H=E;I=F;D=30;break}else if((u|0)==0){J=E;K=F;D=25;break}else if((u|0)==2){L=E;M=F;D=35;break}else if((u|0)!=3){N=E;O=F;P=u;break c}A=F+ -2|0;if(!((a[A]|0)==-1)){s=E;r=1;v=F;u=2;continue c}B=a[E]|0;if(!((B&255)<126)){s=E;r=1;v=F;u=2;continue c}G=(B&255)+2|0;a[E]=G;a[A]=a[F+ -1|0]|0;s=E;r=1;v=F;u=(G&255|0)!=127|0;continue c}else{G=s;A=v;B=u;while(1){do{if(!((A+2|0)>>>0<j>>>0)){if((B&-3|0)!=1){c[k>>2]=A-(c[g>>2]|0)+(c[k>>2]|0);if((we(b)|0)==0){C=-1;D=46;break a}Q=G;R=c[g>>2]|0;break}S=G;c[k>>2]=S-(c[g>>2]|0)+(c[k>>2]|0);if((we(b)|0)==0){C=-1;D=46;break a}T=A-S|0;S=c[g>>2]|0;if((T|0)>0){U=G;V=S;W=T;while(1){W=W+ -1|0;a[V]=a[U]|0;if((W|0)<=0){break}else{U=U+1|0;V=V+1|0}}Q=c[g>>2]|0;R=S+T|0}else{Q=S;R=S}}else{Q=G;R=A}}while(0);if((B|0)==1){H=Q;I=R;D=30;break}else if((B|0)==0){J=Q;K=R;D=25;break}else if((B|0)==2){L=Q;M=R;D=35;break}else if((B|0)==3){G=Q;A=R;B=2}else{N=Q;O=R;P=B;break c}}}}while(0);if((D|0)==25){D=0;if((r|0)<=1){D=29;break}if((r|0)<=128){D=28;break}a[K]=-127;a[K+1|0]=q;s=J;r=r+ -128|0;v=K+2|0;u=2;continue}else if((D|0)==30){D=0;if((r|0)<=1){D=34;break}if((r|0)<=128){D=33;break}a[I]=-127;a[I+1|0]=q;s=H;r=r+ -128|0;v=I+2|0;u=3;continue}else if((D|0)==35){D=0;if((r|0)<=1){D=40;break}if((r|0)<=128){D=38;break}a[M]=-127;a[M+1|0]=q;s=L;r=r+ -128|0;v=M+2|0;u=2;continue}}if((D|0)==28){D=0;a[K]=1-r;a[K+1|0]=q;N=J;O=K+2|0;P=2}else if((D|0)==29){D=0;a[K]=0;a[K+1|0]=q;N=K;O=K+2|0;P=1}else if((D|0)==33){D=0;a[I]=1-r;a[I+1|0]=q;N=H;O=I+2|0;P=3}else if((D|0)==34){D=0;u=(a[H]|0)+1<<24>>24;a[H]=u;a[I]=q;N=H;O=I+1|0;P=u<<24>>24!=127|0}else if((D|0)==38){D=0;a[M]=1-r;a[M+1|0]=q;N=L;O=M+2|0;P=2}else if((D|0)==40){D=0;a[M]=0;a[M+1|0]=q;N=M;O=M+2|0;P=1}if((x|0)>0){l=x;m=y;n=N;o=O;p=P}else{D=44;break}}if((D|0)==44){X=c[g>>2]|0;Y=O;break}else if((D|0)==46){i=f;return C|0}}else{X=h;Y=h}}while(0);c[k>>2]=Y-X+(c[k>>2]|0);c[g>>2]=Y;C=1;i=f;return C|0}function Sg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[c[a+576>>2]>>2]|0;if((d|0)>0){h=b;j=d}else{k=1;i=f;return k|0}while(1){d=(j|0)<(g|0)?j:g;if((Rg(a,h,d,e)|0)<0){k=-1;l=4;break}b=j-d|0;if((b|0)>0){h=h+d|0;j=b}else{k=1;l=4;break}}if((l|0)==4){i=f;return k|0}return 0}function Tg(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0.0,F=0,G=0;f=i;i=i+16|0;h=f;if((e|0)!=32909){za(130904,130936,1350,130952)}if((Vb(d,130976,2)|0)==0){sc(c[d+628>>2]|0,130952,131048,h);j=0;i=f;return j|0}e=me(172)|0;c[d+576>>2]=e;if((e|0)==0){sc(c[d+628>>2]|0,130952,131096,h);j=0;i=f;return j|0}pe(e,0,172);c[e+108>>2]=0;c[e+132>>2]=-1;c[d+504>>2]=19;c[d+508>>2]=20;c[d+512>>2]=27;c[d+532>>2]=37;c[d+540>>2]=37;c[d+548>>2]=37;c[d+516>>2]=21;c[d+524>>2]=28;c[d+528>>2]=22;c[d+536>>2]=38;c[d+544>>2]=38;c[d+552>>2]=38;c[d+556>>2]=7;c[d+564>>2]=8;h=d+672|0;c[e+140>>2]=c[h>>2];c[h>>2]=11;h=d+668|0;c[e+144>>2]=c[h>>2];c[h>>2]=12;c[e+136>>2]=-1;c[e+128>>2]=0;eh(d)|0;g[32784]=250.0;g[32786]=148.4131622314453;d=me(54600)|0;h=me(32768)|0;k=me(512)|0;l=me(8196)|0;m=me(4098)|0;n=me(2049)|0;o=(d|0)==0;p=(h|0)==0;q=(k|0)==0;r=(l|0)==0;s=(m|0)==0;t=(n|0)==0;if(o|p|q|r|s|t){if(!o){ne(d)}if(!p){ne(h)}if(!q){ne(k)}if(!r){ne(l)}if(!s){ne(m)}if(!t){ne(n)}t=e+148|0;c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[t+16>>2]=0;c[t+20>>2]=0;j=1;i=f;return j|0}else{u=0}while(1){t=u+1|0;g[l+(u<<2)>>2]=+(u|0)*7326255555493672.0e-20;if((t|0)==250){v=250;break}else{u=t}}while(1){u=v+1|0;g[l+(v<<2)>>2]=+_(+(+(v|0)*.004))*.006737946999085467;if((u|0)==2048){break}else{v=u}}g[l+8192>>2]=+g[l+8188>>2];v=0;while(1){w=+g[l+(v<<2)>>2];x=w*65535.0+.5;if(x>65535.0){y=-1}else{y=~~x&65535}b[m+(v<<1)>>1]=y;x=w*255.0+.5;if(x>255.0){z=-1}else{z=~~x&255}a[n+v|0]=z;u=v+1|0;if((u|0)==2049){A=0;B=0;break}else{v=u}}while(1){x=+(A|0)*7326255555493672.0e-20;v=B+1|0;z=x*x>+g[l+(B<<2)>>2]*+g[l+(v<<2)>>2]?v:B;b[d+(A<<1)>>1]=z;v=A+1|0;if((v|0)==27300){C=0;D=0;break}else{A=v;B=z}}while(1){x=+(C|0)/16383.0;w=x*x;x=+g[l+(D<<2)>>2];B=D;while(1){A=B+1|0;E=+g[l+(A<<2)>>2];if(w>x*E){x=E;B=A}else{break}}b[h+(C<<1)>>1]=B;A=C+1|0;if((A|0)==16384){F=0;G=0;break}else{C=A;D=B}}while(1){x=+(F|0)/255.0;w=x*x;x=+g[l+(G<<2)>>2];D=G;while(1){C=D+1|0;E=+g[l+(C<<2)>>2];if(w>x*E){x=E;D=C}else{break}}b[k+(F<<1)>>1]=D;F=F+1|0;if((F|0)==256){break}else{G=D}}g[32788]=13650.0;c[e+148>>2]=l;c[e+152>>2]=m;c[e+156>>2]=n;c[e+160>>2]=d;c[e+164>>2]=h;c[e+168>>2]=k;j=1;i=f;return j|0}function Ug(a){a=a|0;return 1}function Vg(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;if((g|0)==0){za(131368,130936,662,131752)}c[a+652>>2]=3;if((b[a+126>>1]|0)==1){h=b[a+98>>1]|0}else{h=1}b[g+124>>1]=h;j=h&65535;h=ba(c[a+56>>2]|0,j)|0;k=ba(h,c[a+100>>2]|0)|0;if((k|0)==0){l=0;i=d;return l|0}h=me(k+j<<1)|0;c[g+120>>2]=h;if((h|0)==0){l=0;i=d;return l|0}h=g+132|0;a:do{if((c[h>>2]|0)==-1){j=b[a+86>>1]|0;k=e[a+84>>1]|0;switch(k|0){case 8:{if(j<<16>>16==1|j<<16>>16==4){m=0;n=14}else{n=13}break};case 16:{if(j<<16>>16==1|j<<16>>16==4){m=4;n=14}else{n=13}break};case 32:{o=j<<16>>16==3;c[h>>2]=o?5:-1;if(o){break a}break};case 12:{if(j<<16>>16==2|j<<16>>16==4){m=3;n=14}else{n=13}break};case 11:{if(j<<16>>16==1|j<<16>>16==4){m=2;n=14}else{n=13}break};default:{n=13}}if((n|0)==13){c[h>>2]=-1}else if((n|0)==14){c[h>>2]=m;break}j=c[a+628>>2]|0;c[f>>2]=k;sc(j,131752,131776,f);l=0;i=d;return l|0}}while(0);if((bi(g+64|0,131496,56)|0)==0){m=g+128|0;c[m>>2]=c[m>>2]|1;l=1;i=d;return l|0}else{m=c[a+628>>2]|0;c[f>>2]=c[g+88>>2];sc(m,131752,131504,f);l=0;i=d;return l|0}return 0}function Wg(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;d=c[a+576>>2]|0;if((d|0)==0){za(131368,130936,707,131728)}else{e=d+64|0;c[e>>2]=c[a+588>>2];c[d+68>>2]=c[a+608>>2];a=($h(e)|0)==0|0;i=b;return a|0}return 0}function Xg(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0.0,Ca=0.0,Da=0.0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0.0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0;j=i;i=i+16|0;k=j;l=c[d+576>>2]|0;m=l+132|0;switch(c[m>>2]|0){case 1:case 0:{n=h;break};case 5:{n=h>>>2;break};case 2:case 3:case 4:{n=h>>>1;break};default:{h=c[d+628>>2]|0;c[k>>2]=e[d+84>>1]|0;sc(h,131512,131240,k);o=0;i=j;return o|0}}h=l+124|0;p=ba(e[h>>1]|0,c[d+56>>2]|0)|0;if((l|0)==0){za(131368,130936,756,131512)}q=l+120|0;r=l+64|0;c[l+76>>2]=c[q>>2];s=l+80|0;c[s>>2]=n<<1;t=d+628|0;u=d+444|0;v=l+88|0;do{w=ci(r,1)|0;if((w|0)==1){x=12;break}else if((w|0)==-3){y=c[t>>2]|0;z=c[v>>2]|0;c[k>>2]=c[u>>2];c[k+4>>2]=z;sc(y,131512,131528,k);if((fi(r)|0)!=0){o=0;x=136;break}}else if((w|0)!=0){x=10;break}}while((c[s>>2]|0)!=0);if((x|0)==10){r=c[t>>2]|0;c[k>>2]=c[v>>2];sc(r,131512,131184,k);o=0;i=j;return o|0}else if((x|0)==12){r=c[s>>2]|0;if((r|0)!=0){s=c[t>>2]|0;c[k>>2]=c[u>>2];c[k+4>>2]=r;sc(s,131512,131568,k);o=0;i=j;return o|0}}else if((x|0)==136){i=j;return o|0}s=c[q>>2]|0;if((c[d+12>>2]&128|0)!=0){Qd(s,n)}q=(n|0)%(p|0)|0;if((q|0)==0){A=n}else{r=c[t>>2]|0;c[k>>2]=p;c[k+4>>2]=n;ue(r,131512,131624,k);A=n-q|0}if((A|0)<=0){o=1;i=j;return o|0}q=l+148|0;n=p<<2;r=p+ -3|0;u=(r|0)>0;v=p+ -4|0;w=(v|0)>0;y=l+152|0;z=p<<1;B=l+156|0;l=f;f=0;C=s;a:while(1){switch(c[m>>2]|0){case 4:{s=e[h>>1]|0;D=c[y>>2]|0;do{if((p|0)>=(s|0)){if((s|0)==3){E=b[C>>1]&2047;b[l>>1]=b[D+(E<<1)>>1]|0;F=b[C+2>>1]&2047;b[l+2>>1]=b[D+(F<<1)>>1]|0;G=b[C+4>>1]&2047;b[l+4>>1]=b[D+(G<<1)>>1]|0;if(u){H=r;I=C;J=l;K=G;L=F;M=E}else{break}while(1){E=I+6|0;F=J+6|0;G=(e[E>>1]|0)+M|0;b[F>>1]=b[D+((G&2047)<<1)>>1]|0;N=(e[I+8>>1]|0)+L|0;b[J+8>>1]=b[D+((N&2047)<<1)>>1]|0;O=(e[I+10>>1]|0)+K|0;b[J+10>>1]=b[D+((O&2047)<<1)>>1]|0;P=H+ -3|0;if((P|0)>0){H=P;I=E;J=F;K=O;L=N;M=G}else{break}}}else if((s|0)==4){G=b[C>>1]&2047;b[l>>1]=b[D+(G<<1)>>1]|0;N=b[C+2>>1]&2047;b[l+2>>1]=b[D+(N<<1)>>1]|0;O=b[C+4>>1]&2047;b[l+4>>1]=b[D+(O<<1)>>1]|0;F=b[C+6>>1]&2047;b[l+6>>1]=b[D+(F<<1)>>1]|0;if(w){Q=v;R=C;S=l;T=F;U=O;V=N;W=G}else{break}while(1){G=R+8|0;N=S+8|0;O=(e[G>>1]|0)+W|0;b[N>>1]=b[D+((O&2047)<<1)>>1]|0;F=(e[R+10>>1]|0)+V|0;b[S+10>>1]=b[D+((F&2047)<<1)>>1]|0;E=(e[R+12>>1]|0)+U|0;b[S+12>>1]=b[D+((E&2047)<<1)>>1]|0;P=(e[R+14>>1]|0)+T|0;b[S+14>>1]=b[D+((P&2047)<<1)>>1]|0;X=Q+ -4|0;if((X|0)>0){Q=X;R=G;S=N;T=P;U=E;V=F;W=O}else{break}}}else{O=0-s|0;F=(O|0)>-1;E=s+1|0;P=C;N=l;G=s;while(1){G=G+ -1|0;b[N>>1]=b[D+((b[P>>1]&2047)<<1)>>1]|0;if((G|0)<=0){break}else{P=P+2|0;N=N+2|0}}N=E+(F?O:-1)|0;P=p-s|0;if((P|0)>0){Y=P;Z=l;_=C}else{break}do{Z=Z+(N<<1)|0;_=_+(N<<1)|0;P=_;G=Z;X=s;while(1){X=X+ -1|0;$=P+(s<<1)|0;b[$>>1]=(e[$>>1]|0)+(e[P>>1]|0);b[G>>1]=b[D+((b[P>>1]&2047)<<1)>>1]|0;if((X|0)<=0){break}else{P=P+2|0;G=G+2|0}}Y=Y-s|0}while((Y|0)>0)}}}while(0);aa=l+z|0;break};case 0:{s=e[h>>1]|0;D=c[B>>2]|0;do{if((p|0)>=(s|0)){if((s|0)==3){N=b[C>>1]&2047;a[l]=a[D+N|0]|0;O=b[C+2>>1]&2047;a[l+1|0]=a[D+O|0]|0;F=b[C+4>>1]&2047;a[l+2|0]=a[D+F|0]|0;if(u){ca=r;da=C;ea=l;fa=F;ga=O;ha=N}else{break}while(1){N=da+6|0;O=ea+3|0;F=(e[N>>1]|0)+ha|0;a[O]=a[D+(F&2047)|0]|0;E=(e[da+8>>1]|0)+ga|0;a[ea+4|0]=a[D+(E&2047)|0]|0;G=(e[da+10>>1]|0)+fa|0;a[ea+5|0]=a[D+(G&2047)|0]|0;P=ca+ -3|0;if((P|0)>0){ca=P;da=N;ea=O;fa=G;ga=E;ha=F}else{break}}}else if((s|0)==4){F=b[C>>1]&2047;a[l]=a[D+F|0]|0;E=b[C+2>>1]&2047;a[l+1|0]=a[D+E|0]|0;G=b[C+4>>1]&2047;a[l+2|0]=a[D+G|0]|0;O=b[C+6>>1]&2047;a[l+3|0]=a[D+O|0]|0;if(w){ia=v;ja=C;ka=l;la=O;ma=G;na=E;oa=F}else{break}while(1){F=ja+8|0;E=ka+4|0;G=(e[F>>1]|0)+oa|0;a[E]=a[D+(G&2047)|0]|0;O=(e[ja+10>>1]|0)+na|0;a[ka+5|0]=a[D+(O&2047)|0]|0;N=(e[ja+12>>1]|0)+ma|0;a[ka+6|0]=a[D+(N&2047)|0]|0;P=(e[ja+14>>1]|0)+la|0;a[ka+7|0]=a[D+(P&2047)|0]|0;X=ia+ -4|0;if((X|0)>0){ia=X;ja=F;ka=E;la=P;ma=N;na=O;oa=G}else{break}}}else{G=0-s|0;O=(G|0)>-1;N=s+1|0;P=C;E=l;F=s;while(1){F=F+ -1|0;a[E]=a[D+(b[P>>1]&2047)|0]|0;if((F|0)<=0){break}else{P=P+2|0;E=E+1|0}}E=N+(O?G:-1)|0;P=p-s|0;if((P|0)>0){pa=P;qa=l;ra=C}else{break}do{qa=qa+E|0;ra=ra+(E<<1)|0;P=ra;F=qa;X=s;while(1){X=X+ -1|0;$=P+(s<<1)|0;b[$>>1]=(e[$>>1]|0)+(e[P>>1]|0);a[F]=a[D+(b[P>>1]&2047)|0]|0;if((X|0)<=0){break}else{P=P+2|0;F=F+1|0}}pa=pa-s|0}while((pa|0)>0)}}}while(0);aa=l+p|0;break};case 2:{s=e[h>>1]|0;do{if((p|0)>=(s|0)){if((s|0)==4){D=b[C>>1]|0;b[l>>1]=D;E=b[C+2>>1]|0;b[l+2>>1]=E;G=b[C+4>>1]|0;b[l+4>>1]=G;O=b[C+6>>1]|0;b[l+6>>1]=O;if(!w){break}N=l;F=C;P=v;X=O&65535;O=G&65535;G=E&65535;E=D&65535;while(1){D=F+8|0;$=N+8|0;sa=(e[D>>1]|0)+E|0;b[$>>1]=sa&2047;ta=(e[F+10>>1]|0)+G|0;b[N+10>>1]=ta&2047;ua=(e[F+12>>1]|0)+O|0;b[N+12>>1]=ua&2047;va=(e[F+14>>1]|0)+X|0;b[N+14>>1]=va&2047;wa=P+ -4|0;if((wa|0)>0){N=$;F=D;P=wa;X=va;O=ua;G=ta;E=sa}else{break}}}else if((s|0)==3){E=b[C>>1]|0;b[l>>1]=E;G=b[C+2>>1]|0;b[l+2>>1]=G;O=b[C+4>>1]|0;b[l+4>>1]=O;if(!u){break}X=l;P=C;F=r;N=O&65535;O=G&65535;G=E&65535;while(1){E=P+6|0;sa=X+6|0;ta=(e[E>>1]|0)+G|0;b[sa>>1]=ta&2047;ua=(e[P+8>>1]|0)+O|0;b[X+8>>1]=ua&2047;va=(e[P+10>>1]|0)+N|0;b[X+10>>1]=va&2047;wa=F+ -3|0;if((wa|0)>0){X=sa;P=E;F=wa;N=va;O=ua;G=ta}else{break}}}else{G=0-s|0;O=(G|0)>-1;N=s+1|0;F=C;P=l;X=s;while(1){X=X+ -1|0;b[P>>1]=b[F>>1]&2047;if((X|0)<=0){break}else{F=F+2|0;P=P+2|0}}P=N+(O?G:-1)|0;F=p-s|0;if((F|0)>0){xa=F;ya=l;Aa=C}else{break}do{ya=ya+(P<<1)|0;Aa=Aa+(P<<1)|0;F=Aa;X=ya;ta=s;while(1){ta=ta+ -1|0;ua=F+(s<<1)|0;b[ua>>1]=(e[ua>>1]|0)+(e[F>>1]|0);b[X>>1]=b[F>>1]&2047;if((ta|0)<=0){break}else{F=F+2|0;X=X+2|0}}xa=xa-s|0}while((xa|0)>0)}}}while(0);aa=l+z|0;break};case 3:{s=e[h>>1]|0;P=c[q>>2]|0;do{if((p|0)>=(s|0)){if((s|0)==3){G=b[C>>1]&2047;Ba=+g[P+(G<<2)>>2]*2048.0;O=b[C+2>>1]&2047;Ca=+g[P+(O<<2)>>2]*2048.0;N=b[C+4>>1]&2047;Da=+g[P+(N<<2)>>2]*2048.0;if(Ba<3071.0){Ea=~~Ba&65535}else{Ea=3071}b[l>>1]=Ea;if(Ca<3071.0){Fa=~~Ca&65535}else{Fa=3071}b[l+2>>1]=Fa;if(Da<3071.0){Ga=~~Da&65535}else{Ga=3071}b[l+4>>1]=Ga;if(u){Ha=r;Ia=C;Ja=l;Ka=N;La=O;Ma=G}else{break}while(1){G=Ia+6|0;O=Ja+6|0;N=(e[G>>1]|0)+Ma|0;Da=+g[P+((N&2047)<<2)>>2]*2048.0;X=(e[Ia+8>>1]|0)+La|0;Ca=+g[P+((X&2047)<<2)>>2]*2048.0;F=(e[Ia+10>>1]|0)+Ka|0;Ba=+g[P+((F&2047)<<2)>>2]*2048.0;if(Da<3071.0){Na=~~Da&65535}else{Na=3071}b[O>>1]=Na;if(Ca<3071.0){Oa=~~Ca&65535}else{Oa=3071}b[Ja+8>>1]=Oa;if(Ba<3071.0){Pa=~~Ba&65535}else{Pa=3071}b[Ja+10>>1]=Pa;ta=Ha+ -3|0;if((ta|0)>0){Ha=ta;Ia=G;Ja=O;Ka=F;La=X;Ma=N}else{break}}}else if((s|0)==4){N=b[C>>1]&2047;Ba=+g[P+(N<<2)>>2]*2048.0;X=b[C+2>>1]&2047;Ca=+g[P+(X<<2)>>2]*2048.0;F=b[C+4>>1]&2047;Da=+g[P+(F<<2)>>2]*2048.0;O=b[C+6>>1]&2047;Qa=+g[P+(O<<2)>>2]*2048.0;if(Ba<3071.0){Ra=~~Ba&65535}else{Ra=3071}b[l>>1]=Ra;if(Ca<3071.0){Sa=~~Ca&65535}else{Sa=3071}b[l+2>>1]=Sa;if(Da<3071.0){Ta=~~Da&65535}else{Ta=3071}b[l+4>>1]=Ta;if(Qa<3071.0){Ua=~~Qa&65535}else{Ua=3071}b[l+6>>1]=Ua;if(w){Va=v;Wa=C;Xa=l;Ya=O;Za=F;_a=X;$a=N}else{break}while(1){N=Wa+8|0;X=Xa+8|0;F=(e[N>>1]|0)+$a|0;Qa=+g[P+((F&2047)<<2)>>2]*2048.0;O=(e[Wa+10>>1]|0)+_a|0;Da=+g[P+((O&2047)<<2)>>2]*2048.0;G=(e[Wa+12>>1]|0)+Za|0;Ca=+g[P+((G&2047)<<2)>>2]*2048.0;ta=(e[Wa+14>>1]|0)+Ya|0;Ba=+g[P+((ta&2047)<<2)>>2]*2048.0;if(Qa<3071.0){ab=~~Qa&65535}else{ab=3071}b[X>>1]=ab;if(Da<3071.0){bb=~~Da&65535}else{bb=3071}b[Xa+10>>1]=bb;if(Ca<3071.0){cb=~~Ca&65535}else{cb=3071}b[Xa+12>>1]=cb;if(Ba<3071.0){db=~~Ba&65535}else{db=3071}b[Xa+14>>1]=db;ua=Va+ -4|0;if((ua|0)>0){Va=ua;Wa=N;Xa=X;Ya=ta;Za=G;_a=O;$a=F}else{break}}}else{F=0-s|0;O=(F|0)>-1;G=s+1|0;ta=C;X=l;N=s;while(1){N=N+ -1|0;Ba=+g[P+((b[ta>>1]&2047)<<2)>>2]*2048.0;if(Ba<3071.0){eb=~~Ba&65535}else{eb=3071}b[X>>1]=eb;if((N|0)<=0){break}else{ta=ta+2|0;X=X+2|0}}X=G+(O?F:-1)|0;ta=p-s|0;if((ta|0)>0){fb=ta;gb=l;hb=C}else{break}do{gb=gb+(X<<1)|0;hb=hb+(X<<1)|0;ta=hb;N=gb;ua=s;while(1){ua=ua+ -1|0;va=ta+(s<<1)|0;wa=(e[va>>1]|0)+(e[ta>>1]|0)|0;b[va>>1]=wa;Ba=+g[P+((wa&2047)<<2)>>2]*2048.0;if(Ba<3071.0){ib=~~Ba&65535}else{ib=3071}b[N>>1]=ib;if((ua|0)<=0){break}else{ta=ta+2|0;N=N+2|0}}fb=fb-s|0}while((fb|0)>0)}}}while(0);aa=l+z|0;break};case 5:{s=e[h>>1]|0;P=c[q>>2]|0;do{if((p|0)>=(s|0)){if((s|0)==3){X=b[C>>1]&2047;F=b[C+2>>1]&2047;Ba=+g[P+(F<<2)>>2];O=b[C+4>>1]&2047;Ca=+g[P+(O<<2)>>2];g[l>>2]=+g[P+(X<<2)>>2];g[l+4>>2]=Ba;g[l+8>>2]=Ca;if(u){jb=r;kb=C;lb=l;mb=O;nb=F;ob=X}else{break}while(1){X=kb+6|0;F=lb+12|0;O=(e[X>>1]|0)+ob|0;G=(e[kb+8>>1]|0)+nb|0;Ca=+g[P+((G&2047)<<2)>>2];N=(e[kb+10>>1]|0)+mb|0;Ba=+g[P+((N&2047)<<2)>>2];g[F>>2]=+g[P+((O&2047)<<2)>>2];g[lb+16>>2]=Ca;g[lb+20>>2]=Ba;ta=jb+ -3|0;if((ta|0)>0){jb=ta;kb=X;lb=F;mb=N;nb=G;ob=O}else{break}}}else if((s|0)==4){O=b[C>>1]&2047;G=b[C+2>>1]&2047;Ba=+g[P+(G<<2)>>2];N=b[C+4>>1]&2047;Ca=+g[P+(N<<2)>>2];F=b[C+6>>1]&2047;Da=+g[P+(F<<2)>>2];g[l>>2]=+g[P+(O<<2)>>2];g[l+4>>2]=Ba;g[l+8>>2]=Ca;g[l+12>>2]=Da;if(w){pb=v;qb=C;rb=l;sb=F;tb=N;ub=G;vb=O}else{break}while(1){O=qb+8|0;G=rb+16|0;N=(e[O>>1]|0)+vb|0;F=(e[qb+10>>1]|0)+ub|0;Da=+g[P+((F&2047)<<2)>>2];X=(e[qb+12>>1]|0)+tb|0;Ca=+g[P+((X&2047)<<2)>>2];ta=(e[qb+14>>1]|0)+sb|0;Ba=+g[P+((ta&2047)<<2)>>2];g[G>>2]=+g[P+((N&2047)<<2)>>2];g[rb+20>>2]=Da;g[rb+24>>2]=Ca;g[rb+28>>2]=Ba;ua=pb+ -4|0;if((ua|0)>0){pb=ua;qb=O;rb=G;sb=ta;tb=X;ub=F;vb=N}else{break}}}else{N=0-s|0;F=(N|0)>-1;X=s+1|0;ta=C;G=l;O=s;while(1){O=O+ -1|0;g[G>>2]=+g[P+((b[ta>>1]&2047)<<2)>>2];if((O|0)<=0){break}else{ta=ta+2|0;G=G+4|0}}G=X+(F?N:-1)|0;ta=p-s|0;if((ta|0)>0){wb=ta;xb=l;yb=C}else{break}do{xb=xb+(G<<2)|0;yb=yb+(G<<1)|0;ta=yb;O=xb;ua=s;while(1){ua=ua+ -1|0;wa=ta+(s<<1)|0;b[wa>>1]=(e[wa>>1]|0)+(e[ta>>1]|0);g[O>>2]=+g[P+((b[ta>>1]&2047)<<2)>>2];if((ua|0)<=0){break}else{ta=ta+2|0;O=O+4|0}}wb=wb-s|0}while((wb|0)>0)}}}while(0);aa=l+n|0;break};case 1:{s=e[h>>1]|0;P=c[B>>2]|0;do{if((p|0)>=(s|0)){if((s|0)==4){G=b[C+6>>1]&2047;N=b[C+4>>1]&2047;F=a[P+N|0]|0;X=b[C+2>>1]&2047;O=a[P+X|0]|0;ta=b[C>>1]&2047;ua=a[P+ta|0]|0;a[l]=a[P+G|0]|0;a[l+1|0]=F;a[l+2|0]=O;a[l+3|0]=ua;if(w){zb=v;Ab=C;Bb=l;Cb=G;Db=N;Eb=X;Fb=ta}else{break}while(1){ta=Ab+8|0;X=Bb+4|0;N=(e[Ab+14>>1]|0)+Cb|0;G=(e[Ab+12>>1]|0)+Db|0;ua=a[P+(G&2047)|0]|0;O=(e[Ab+10>>1]|0)+Eb|0;F=a[P+(O&2047)|0]|0;wa=(e[ta>>1]|0)+Fb|0;va=a[P+(wa&2047)|0]|0;a[X]=a[P+(N&2047)|0]|0;a[Bb+5|0]=ua;a[Bb+6|0]=F;a[Bb+7|0]=va;va=zb+ -4|0;if((va|0)>0){zb=va;Ab=ta;Bb=X;Cb=N;Db=G;Eb=O;Fb=wa}else{break}}}else if((s|0)==3){a[l]=0;wa=b[C+4>>1]&2047;O=b[C+2>>1]&2047;G=a[P+O|0]|0;N=b[C>>1]&2047;X=a[P+N|0]|0;a[l+1|0]=a[P+wa|0]|0;a[l+2|0]=G;a[l+3|0]=X;if(u){Gb=r;Hb=C;Ib=l;Jb=wa;Kb=O;Lb=N}else{break}while(1){N=Hb+6|0;O=Ib+4|0;a[O]=0;wa=(e[Hb+10>>1]|0)+Jb|0;X=(e[Hb+8>>1]|0)+Kb|0;G=a[P+(X&2047)|0]|0;ta=(e[N>>1]|0)+Lb|0;va=a[P+(ta&2047)|0]|0;a[Ib+5|0]=a[P+(wa&2047)|0]|0;a[Ib+6|0]=G;a[Ib+7|0]=va;va=Gb+ -3|0;if((va|0)>0){Gb=va;Hb=N;Ib=O;Jb=wa;Kb=X;Lb=ta}else{break}}}else{ta=0-s|0;X=(ta|0)>-1;wa=s+1|0;O=C;N=l;va=s;while(1){va=va+ -1|0;a[N]=a[P+(b[O>>1]&2047)|0]|0;if((va|0)<=0){break}else{O=O+2|0;N=N+1|0}}N=wa+(X?ta:-1)|0;O=p-s|0;if((O|0)>0){Mb=O;Nb=l;Ob=C}else{break}do{Nb=Nb+N|0;Ob=Ob+(N<<1)|0;O=Ob;va=Nb;G=s;while(1){G=G+ -1|0;F=O+(s<<1)|0;b[F>>1]=(e[F>>1]|0)+(e[O>>1]|0);a[va]=a[P+(b[O>>1]&2047)|0]|0;if((G|0)<=0){break}else{O=O+2|0;va=va+1|0}}Mb=Mb-s|0}while((Mb|0)>0)}}}while(0);aa=l+p|0;break};default:{break a}}s=f+p|0;if((s|0)>=(A|0)){o=1;x=136;break}l=aa;f=s;C=C+(p<<1)|0}if((x|0)==136){i=j;return o|0}x=c[t>>2]|0;c[k>>2]=e[d+84>>1]|0;sc(x,131512,131696,k);o=0;i=j;return o|0}function Yg(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;if((g|0)==0){za(131368,130936,864,131408)}if((b[a+126>>1]|0)==1){h=b[a+98>>1]|0}else{h=1}b[g+124>>1]=h;j=ba(c[a+56>>2]|0,h&65535)|0;h=ba(j,c[a+100>>2]|0)|0;if((h|0)==0){k=0;i=d;return k|0}j=me(h<<1)|0;c[g+120>>2]=j;if((j|0)==0){k=0;i=d;return k|0}j=g+132|0;a:do{if((c[j>>2]|0)==-1){h=b[a+86>>1]|0;l=e[a+84>>1]|0;switch(l|0){case 11:{if(h<<16>>16==1|h<<16>>16==4){m=2;n=14}else{n=13}break};case 16:{if(h<<16>>16==1|h<<16>>16==4){m=4;n=14}else{n=13}break};case 8:{if(h<<16>>16==1|h<<16>>16==4){m=0;n=14}else{n=13}break};case 32:{o=h<<16>>16==3;c[j>>2]=o?5:-1;if(o){break a}break};case 12:{if(h<<16>>16==2|h<<16>>16==4){m=3;n=14}else{n=13}break};default:{n=13}}if((n|0)==13){c[j>>2]=-1}else if((n|0)==14){c[j>>2]=m;break}h=c[a+628>>2]|0;c[f>>2]=l;sc(h,131408,131432,f);k=0;i=d;return k|0}}while(0);if((Ph(g+64|0,c[g+136>>2]|0,131496,56)|0)==0){m=g+128|0;c[m>>2]=c[m>>2]|1;k=1;i=d;return k|0}else{m=c[a+628>>2]|0;c[f>>2]=c[g+88>>2];sc(m,131408,131504,f);k=0;i=d;return k|0}return 0}function Zg(a,b){a=a|0;b=b|0;var d=0;b=i;d=c[a+576>>2]|0;if((d|0)==0){za(131368,130936,903,131384)}else{c[d+76>>2]=c[a+588>>2];c[d+80>>2]=c[a+592>>2];a=(Sh(d+64|0)|0)==0|0;i=b;return a|0}return 0}function _g(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;i=i+16|0;d=b;e=c[a+576>>2]|0;f=e+64|0;c[e+68>>2]=0;g=e+80|0;h=a+592|0;j=a+608|0;k=a+588|0;l=e+76|0;while(1){m=Wh(f,4)|0;if(!(m>>>0<2)){break}n=c[g>>2]|0;o=c[h>>2]|0;if((n|0)!=(o|0)){c[j>>2]=o-n;we(a)|0;c[l>>2]=c[k>>2];c[g>>2]=c[h>>2]}if((m|0)==1){p=1;q=7;break}}if((q|0)==7){i=b;return p|0}q=c[a+628>>2]|0;c[d>>2]=c[e+88>>2];sc(q,131344,131184,d);p=0;i=b;return p|0}function $g(a,f,h,j){a=a|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0,aa=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0,ka=0.0,la=0,ma=0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0.0,va=0,wa=0,xa=0.0,ya=0.0,za=0.0,Aa=0,Ba=0,Ca=0,Da=0;j=i;i=i+16|0;k=j;l=c[a+576>>2]|0;m=c[l+132>>2]|0;switch(m|0){case 2:case 3:case 4:{n=h>>>1;break};case 1:case 0:{n=h;break};case 5:{n=h>>>2;break};default:{h=c[a+628>>2]|0;c[k>>2]=e[a+84>>1]|0;sc(h,131224,131240,k);o=0;i=j;return o|0}}h=l+124|0;p=ba(e[h>>1]|0,c[a+56>>2]|0)|0;q=c[l+120>>2]|0;a:do{if((n|0)>0){r=l+160|0;s=p<<2;t=p+ -1|0;u=p+ -3|0;v=(u|0)>0;w=p+ -4|0;x=(w|0)>0;y=l+164|0;z=p<<1;A=l+168|0;B=f;C=0;D=q;while(1){if((m|0)==4){E=e[h>>1]|0;F=c[y>>2]|0;do{if((p|0)>=(E|0)){if((E|0)==4){G=b[F+((e[B>>1]|0)>>>2<<1)>>1]|0;b[D>>1]=G;H=b[F+((e[B+2>>1]|0)>>>2<<1)>>1]|0;b[D+2>>1]=H;I=b[F+((e[B+4>>1]|0)>>>2<<1)>>1]|0;b[D+4>>1]=I;J=b[F+((e[B+6>>1]|0)>>>2<<1)>>1]|0;b[D+6>>1]=J;if(!x){break}K=w;L=B;M=D;N=J&65535;J=I&65535;I=H&65535;H=G&65535;while(1){G=M+8|0;O=L+8|0;P=e[F+((e[O>>1]|0)>>>2<<1)>>1]|0;b[G>>1]=P-H&2047;Q=e[F+((e[L+10>>1]|0)>>>2<<1)>>1]|0;b[M+10>>1]=Q-I&2047;R=e[F+((e[L+12>>1]|0)>>>2<<1)>>1]|0;b[M+12>>1]=R-J&2047;S=e[F+((e[L+14>>1]|0)>>>2<<1)>>1]|0;b[M+14>>1]=S-N&2047;T=K+ -4|0;if((T|0)>0){K=T;L=O;M=G;N=S;J=R;I=Q;H=P}else{break}}}else if((E|0)==3){H=b[F+((e[B>>1]|0)>>>2<<1)>>1]|0;b[D>>1]=H;I=b[F+((e[B+2>>1]|0)>>>2<<1)>>1]|0;b[D+2>>1]=I;J=b[F+((e[B+4>>1]|0)>>>2<<1)>>1]|0;b[D+4>>1]=J;if(!v){break}N=u;M=B;L=D;K=J&65535;J=I&65535;I=H&65535;while(1){H=L+6|0;P=M+6|0;Q=e[F+((e[P>>1]|0)>>>2<<1)>>1]|0;b[H>>1]=Q-I&2047;R=e[F+((e[M+8>>1]|0)>>>2<<1)>>1]|0;b[L+8>>1]=R-J&2047;S=e[F+((e[M+10>>1]|0)>>>2<<1)>>1]|0;b[L+10>>1]=S-K&2047;G=N+ -3|0;if((G|0)>0){N=G;M=P;L=H;K=S;J=R;I=Q}else{break}}}else{I=B+(t<<1)|0;J=D+(t<<1)|0;K=p-E|0;if((K|0)>0){L=0-E|0;M=~(((L|0)>-1?L:-1)+E);L=I;N=K;K=J;while(1){Q=L;R=K;S=E;while(1){S=S+ -1|0;H=b[F+((e[Q>>1]|0)>>>2<<1)>>1]|0;b[R>>1]=H;P=R+(E<<1)|0;b[P>>1]=(e[P>>1]|0)-(H&65535)&2047;if((S|0)<=0){break}else{Q=Q+ -2|0;R=R+ -2|0}}R=L+(M<<1)|0;Q=K+(M<<1)|0;S=N-E|0;if((S|0)>0){L=R;N=S;K=Q}else{U=R;V=Q;W=E;break}}}else{U=I;V=J;W=E}while(1){W=W+ -1|0;b[V>>1]=b[F+((e[U>>1]|0)>>>2<<1)>>1]|0;if((W|0)<=0){break}else{U=U+ -2|0;V=V+ -2|0}}}}}while(0);X=B+z|0}else if((m|0)==5){F=e[h>>1]|0;E=c[r>>2]|0;Y=+g[32788];do{if((p|0)>=(F|0)){if((F|0)==4){Z=+g[B>>2];do{if(!(Z<0.0)){if(Z<2.0){_=+(e[E+(~~(Y*Z)<<1)>>1]|0|0);break}if(Z>24.200000762939453){_=2047.0}else{_=+g[32784]*+$(+(Z*+g[32786]))+.5}}else{_=0.0}}while(0);J=~~_&65535;b[D>>1]=J;I=J&65535;Z=+g[B+4>>2];do{if(!(Z<0.0)){if(Z<2.0){aa=+(e[E+(~~(Y*Z)<<1)>>1]|0|0);break}if(Z>24.200000762939453){aa=2047.0}else{aa=+g[32784]*+$(+(Z*+g[32786]))+.5}}else{aa=0.0}}while(0);J=~~aa&65535;b[D+2>>1]=J;K=J&65535;Z=+g[B+8>>2];do{if(!(Z<0.0)){if(Z<2.0){ca=+(e[E+(~~(Y*Z)<<1)>>1]|0|0);break}if(Z>24.200000762939453){ca=2047.0}else{ca=+g[32784]*+$(+(Z*+g[32786]))+.5}}else{ca=0.0}}while(0);J=~~ca&65535;b[D+4>>1]=J;N=J&65535;Z=+g[B+12>>2];do{if(!(Z<0.0)){if(Z<2.0){da=+(e[E+(~~(Y*Z)<<1)>>1]|0|0);break}if(Z>24.200000762939453){da=2047.0}else{da=+g[32784]*+$(+(Z*+g[32786]))+.5}}else{da=0.0}}while(0);J=~~da&65535;b[D+6>>1]=J;if(!x){break}Z=+g[32784];ea=+g[32786];L=w;M=B;Q=D;R=J&65535;J=N;S=K;H=I;while(1){P=Q+8|0;G=M+16|0;fa=+g[G>>2];do{if(!(fa<0.0)){if(fa<2.0){ga=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){ga=2047.0}else{ga=Z*+$(+(ea*fa))+.5}}else{ga=0.0}}while(0);O=~~ga;b[P>>1]=O-H&2047;fa=+g[M+20>>2];do{if(!(fa<0.0)){if(fa<2.0){ha=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){ha=2047.0}else{ha=Z*+$(+(ea*fa))+.5}}else{ha=0.0}}while(0);T=~~ha;b[Q+10>>1]=T-S&2047;fa=+g[M+24>>2];do{if(!(fa<0.0)){if(fa<2.0){ia=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){ia=2047.0}else{ia=Z*+$(+(ea*fa))+.5}}else{ia=0.0}}while(0);ja=~~ia;b[Q+12>>1]=ja-J&2047;fa=+g[M+28>>2];do{if(!(fa<0.0)){if(fa<2.0){ka=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){ka=2047.0}else{ka=Z*+$(+(ea*fa))+.5}}else{ka=0.0}}while(0);la=~~ka;b[Q+14>>1]=la-R&2047;ma=L+ -4|0;if((ma|0)>0){L=ma;M=G;Q=P;R=la;J=ja;S=T;H=O}else{break}}}else if((F|0)==3){ea=+g[B>>2];do{if(!(ea<0.0)){if(ea<2.0){na=+(e[E+(~~(Y*ea)<<1)>>1]|0|0);break}if(ea>24.200000762939453){na=2047.0}else{na=+g[32784]*+$(+(ea*+g[32786]))+.5}}else{na=0.0}}while(0);H=~~na&65535;b[D>>1]=H;S=H&65535;ea=+g[B+4>>2];do{if(!(ea<0.0)){if(ea<2.0){oa=+(e[E+(~~(Y*ea)<<1)>>1]|0|0);break}if(ea>24.200000762939453){oa=2047.0}else{oa=+g[32784]*+$(+(ea*+g[32786]))+.5}}else{oa=0.0}}while(0);H=~~oa&65535;b[D+2>>1]=H;J=H&65535;ea=+g[B+8>>2];do{if(!(ea<0.0)){if(ea<2.0){pa=+(e[E+(~~(Y*ea)<<1)>>1]|0|0);break}if(ea>24.200000762939453){pa=2047.0}else{pa=+g[32784]*+$(+(ea*+g[32786]))+.5}}else{pa=0.0}}while(0);H=~~pa&65535;b[D+4>>1]=H;if(!v){break}ea=+g[32784];Z=+g[32786];R=u;Q=B;M=D;L=H&65535;H=J;I=S;while(1){K=M+6|0;N=Q+12|0;fa=+g[N>>2];do{if(!(fa<0.0)){if(fa<2.0){qa=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){qa=2047.0}else{qa=ea*+$(+(Z*fa))+.5}}else{qa=0.0}}while(0);O=~~qa;b[K>>1]=O-I&2047;fa=+g[Q+16>>2];do{if(!(fa<0.0)){if(fa<2.0){ra=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){ra=2047.0}else{ra=ea*+$(+(Z*fa))+.5}}else{ra=0.0}}while(0);T=~~ra;b[M+8>>1]=T-H&2047;fa=+g[Q+20>>2];do{if(!(fa<0.0)){if(fa<2.0){sa=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){sa=2047.0}else{sa=ea*+$(+(Z*fa))+.5}}else{sa=0.0}}while(0);ja=~~sa;b[M+10>>1]=ja-L&2047;P=R+ -3|0;if((P|0)>0){R=P;Q=N;M=K;L=ja;H=T;I=O}else{break}}}else{I=B+(t<<2)|0;H=D+(t<<1)|0;L=p-F|0;Z=+g[32784];if((L|0)>0){ea=Z;fa=+g[32786];M=0-F|0;Q=~(((M|0)>-1?M:-1)+F);M=I;R=L;L=H;while(1){S=M;J=L;ja=F;while(1){ja=ja+ -1|0;ta=+g[S>>2];do{if(!(ta<0.0)){if(ta<2.0){ua=+(e[E+(~~(Y*ta)<<1)>>1]|0|0);break}if(ta>24.200000762939453){ua=2047.0}else{ua=ea*+$(+(fa*ta))+.5}}else{ua=0.0}}while(0);P=~~ua&65535;b[J>>1]=P;G=J+(F<<1)|0;b[G>>1]=(e[G>>1]|0)-(P&65535)&2047;if((ja|0)<=0){break}else{S=S+ -4|0;J=J+ -2|0}}J=M+(Q<<2)|0;S=L+(Q<<1)|0;ja=R-F|0;if((ja|0)>0){M=J;R=ja;L=S}else{va=J;wa=S;xa=ea;ya=fa;break}}}else{va=I;wa=H;xa=Z;ya=+g[32786]}L=va;R=wa;M=F;while(1){M=M+ -1|0;fa=+g[L>>2];do{if(!(fa<0.0)){if(fa<2.0){za=+(e[E+(~~(Y*fa)<<1)>>1]|0|0);break}if(fa>24.200000762939453){za=2047.0}else{za=xa*+$(+(ya*fa))+.5}}else{za=0.0}}while(0);b[R>>1]=~~za;if((M|0)<=0){break}else{L=L+ -4|0;R=R+ -2|0}}}}}while(0);X=B+s|0}else if((m|0)==0){E=e[h>>1]|0;F=c[A>>2]|0;do{if((p|0)>=(E|0)){if((E|0)==4){R=b[F+((d[B]|0)<<1)>>1]|0;b[D>>1]=R;L=b[F+((d[B+1|0]|0)<<1)>>1]|0;b[D+2>>1]=L;M=b[F+((d[B+2|0]|0)<<1)>>1]|0;b[D+4>>1]=M;H=b[F+((d[B+3|0]|0)<<1)>>1]|0;b[D+6>>1]=H;if(!x){break}I=w;Q=B;S=D;J=H&65535;H=M&65535;M=L&65535;L=R&65535;while(1){R=Q+4|0;ja=e[F+((d[R]|0)<<1)>>1]|0;O=S+8|0;b[O>>1]=ja-L&2047;T=e[F+((d[Q+5|0]|0)<<1)>>1]|0;b[S+10>>1]=T-M&2047;K=e[F+((d[Q+6|0]|0)<<1)>>1]|0;b[S+12>>1]=K-H&2047;N=e[F+((d[Q+7|0]|0)<<1)>>1]|0;b[S+14>>1]=N-J&2047;P=I+ -4|0;if((P|0)>0){I=P;Q=R;S=O;J=N;H=K;M=T;L=ja}else{break}}}else if((E|0)==3){L=b[F+((d[B]|0)<<1)>>1]|0;b[D>>1]=L;M=b[F+((d[B+1|0]|0)<<1)>>1]|0;b[D+2>>1]=M;H=b[F+((d[B+2|0]|0)<<1)>>1]|0;b[D+4>>1]=H;if(!v){break}J=u;S=B;Q=D;I=H&65535;H=M&65535;M=L&65535;while(1){L=S+3|0;ja=e[F+((d[L]|0)<<1)>>1]|0;T=Q+6|0;b[T>>1]=ja-M&2047;K=e[F+((d[S+4|0]|0)<<1)>>1]|0;b[Q+8>>1]=K-H&2047;N=e[F+((d[S+5|0]|0)<<1)>>1]|0;b[Q+10>>1]=N-I&2047;O=J+ -3|0;if((O|0)>0){J=O;S=L;Q=T;I=N;H=K;M=ja}else{break}}}else{M=t+E|0;H=D+(M<<1)|0;I=B+M|0;M=p-E|0;if((M|0)>0){Q=0-E|0;S=~(((Q|0)>-1?Q:-1)+E);Q=I;J=M;M=H;while(1){ja=Q;K=M;N=E;while(1){N=N+ -1|0;T=b[F+((d[ja]|0)<<1)>>1]|0;b[K>>1]=T;L=K+(E<<1)|0;b[L>>1]=(e[L>>1]|0)-(T&65535)&2047;if((N|0)<=0){break}else{ja=ja+ -1|0;K=K+ -2|0}}K=Q+S|0;ja=M+(S<<1)|0;N=J-E|0;if((N|0)>0){Q=K;J=N;M=ja}else{Aa=K;Ba=ja;Ca=E;break}}}else{Aa=I;Ba=H;Ca=E}while(1){Ca=Ca+ -1|0;b[Ba>>1]=b[F+((d[Aa]|0)<<1)>>1]|0;if((Ca|0)<=0){break}else{Aa=Aa+ -1|0;Ba=Ba+ -2|0}}}}}while(0);X=B+p|0}else{break}C=C+p|0;if((C|0)>=(n|0)){break a}else{B=X;D=D+(p<<1)|0}}D=c[a+628>>2]|0;c[k>>2]=e[a+84>>1]|0;sc(D,131224,131240,k);o=0;i=j;return o|0}}while(0);p=l+64|0;c[p>>2]=q;q=l+68|0;c[q>>2]=n<<1;if((n&2147483647|0)!=(n|0)){sc(c[a+628>>2]|0,131224,131280,k);o=0;i=j;return o|0}n=l+80|0;X=a+592|0;Ba=a+608|0;Aa=a+588|0;Ca=l+76|0;while(1){if((Wh(p,0)|0)!=0){break}if((c[n>>2]|0)==0){c[Ba>>2]=c[X>>2];we(a)|0;c[Ca>>2]=c[Aa>>2];c[n>>2]=c[X>>2]}if((c[q>>2]|0)==0){o=1;Da=145;break}}if((Da|0)==145){i=j;return o|0}Da=c[a+628>>2]|0;c[k>>2]=c[l+88>>2];sc(Da,131224,131320,k);o=0;i=j;return o|0}function ah(a){a=a|0;b[a+84>>1]=8;b[a+86>>1]=1;return}function bh(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+576|0;e=c[d>>2]|0;if((e|0)==0){za(131200,130936,1231,131208)}kh(a)|0;c[a+672>>2]=c[e+140>>2];c[a+668>>2]=c[e+144>>2];f=c[e+160>>2]|0;if((f|0)!=0){ne(f)}f=c[e+164>>2]|0;if((f|0)!=0){ne(f)}f=c[e+168>>2]|0;if((f|0)!=0){ne(f)}f=c[e+148>>2]|0;if((f|0)!=0){ne(f)}f=c[e+152>>2]|0;if((f|0)!=0){ne(f)}f=c[e+156>>2]|0;if((f|0)!=0){ne(f)}do{if((c[e+128>>2]&1|0)!=0){f=e+64|0;if((c[a+8>>2]|0)==0){ei(f)|0;break}else{Rh(f)|0;break}}}while(0);f=c[e+120>>2]|0;if((f|0)==0){ne(e);c[d>>2]=0;Re(a);i=b;return}ne(f);ne(e);c[d>>2]=0;Re(a);i=b;return}function ch(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[a+576>>2]|0;if((b|0)==65558){g=c[f+136>>2]|0;h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[j>>2]=g;k=1;i=e;return k|0}else if((b|0)==65549){g=c[f+132>>2]|0;j=c[d>>2]|0;h=c[j>>2]|0;c[d>>2]=j+4;c[h>>2]=g;k=1;i=e;return k|0}else{k=fb[c[f+140>>2]&31](a,b,d)|0;i=e;return k|0}return 0}function dh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((b|0)==65549){h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[g+132>>2]=j;switch(j|0){case 3:{c[f>>2]=16;Ib(a,258,f)|0;c[f>>2]=2;Ib(a,339,f)|0;break};case 5:{c[f>>2]=32;Ib(a,258,f)|0;c[f>>2]=3;Ib(a,339,f)|0;break};case 1:case 0:{c[f>>2]=8;Ib(a,258,f)|0;c[f>>2]=1;Ib(a,339,f)|0;break};case 2:{c[f>>2]=16;Ib(a,258,f)|0;c[f>>2]=1;Ib(a,339,f)|0;break};case 4:{c[f>>2]=16;Ib(a,258,f)|0;c[f>>2]=1;Ib(a,339,f)|0;break};default:{}}if((c[a+12>>2]&1024|0)==0){k=-1}else{k=ce(a)|0}c[a+496>>2]=k;c[a+580>>2]=Md(a)|0;l=1;i=e;return l|0}else if((b|0)==65558){k=c[d>>2]|0;j=c[k>>2]|0;c[d>>2]=k+4;c[g+136>>2]=j;if((c[a+8>>2]|0)==0){l=1;i=e;return l|0}if((c[g+128>>2]&1|0)==0){l=1;i=e;return l|0}if((Vh(g+64|0,j,0)|0)==0){l=1;i=e;return l|0}j=c[a+628>>2]|0;c[f>>2]=c[g+88>>2];sc(j,131160,131184,f);l=0;i=e;return l|0}else{l=fb[c[g+144>>2]&31](a,b,d)|0;i=e;return l|0}return 0}function eh(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=c[a+576>>2]|0;if((d|0)==0){za(131872,131880,705,131896)}if((Vb(a,131920,1)|0)==0){sc(c[a+628>>2]|0,131896,131960,b);e=0;i=b;return e|0}else{f=a+672|0;c[d+44>>2]=c[f>>2];c[f>>2]=13;f=a+668|0;c[d+48>>2]=c[f>>2];c[f>>2]=14;f=a+676|0;c[d+52>>2]=c[f>>2];c[f>>2]=24;f=a+508|0;c[d+56>>2]=c[f>>2];c[f>>2]=23;f=a+516|0;c[d+60>>2]=c[f>>2];c[f>>2]=24;c[d>>2]=1;c[d+24>>2]=0;c[d+40>>2]=0;e=1;i=b;return e|0}return 0}function fh(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[a+576>>2]|0;if((g|0)==0){za(132064,131880,668,132968)}h=c[g+44>>2]|0;if((h|0)==0){za(132992,131880,669,132968)}if((d|0)==317){j=c[g>>2]&65535;g=c[e>>2]|0;k=c[g>>2]|0;c[e>>2]=g+4;b[k>>1]=j;l=1;i=f;return l|0}else{l=fb[h&31](a,d,e)|0;i=f;return l|0}return 0}function gh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[a+576>>2]|0;if((f|0)==0){za(132064,131880,648,132920)}g=c[f+48>>2]|0;if((g|0)==0){za(132944,131880,649,132920)}if((b|0)==317){h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[f>>2]=j&65535;j=a+48|0;c[j>>2]=c[j>>2]|4;j=a+12|0;c[j>>2]=c[j>>2]|8;k=1;i=e;return k|0}else{k=fb[g&31](a,b,d)|0;i=e;return k|0}return 0}function hh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((c[a+48>>2]&4|0)!=0){Za(132816,13,1,b|0)|0;h=c[g>>2]|0;if((h|0)==3){Za(132872,25,1,b|0)|0}else if((h|0)==1){Za(132832,5,1,b|0)|0}else if((h|0)==2){Za(132840,24,1,b|0)|0}h=c[g>>2]|0;c[f>>2]=h;c[f+4>>2]=h;$a(b|0,132904,f|0)|0}f=c[g+52>>2]|0;if((f|0)==0){i=e;return}kb[f&63](a,b,d);i=e;return}function ih(a){a=a|0;var b=0,d=0,f=0,g=0,h=0,j=0;b=i;d=c[a+576>>2]|0;if((jb[c[d+56>>2]&31](a)|0)==0){f=0;i=b;return f|0}if((lh(a)|0)==0){f=0;i=b;return f|0}g=c[d>>2]|0;if((g|0)==3){c[d+40>>2]=30;h=a+532|0;j=c[h>>2]|0;if((j|0)!=39){c[d+28>>2]=j;c[h>>2]=39;h=a+540|0;c[d+32>>2]=c[h>>2];c[h>>2]=40;h=a+548|0;c[d+36>>2]=c[h>>2];c[h>>2]=40}if((c[a+12>>2]&128|0)==0){f=1;i=b;return f|0}c[a+652>>2]=3;f=1;i=b;return f|0}else if((g|0)==2){g=e[a+84>>1]|0;if((g|0)==32){c[d+40>>2]=27}else if((g|0)==16){c[d+40>>2]=26}else if((g|0)==8){c[d+40>>2]=25}g=a+532|0;h=c[g>>2]|0;if((h|0)!=39){c[d+28>>2]=h;c[g>>2]=39;g=a+540|0;c[d+32>>2]=c[g>>2];c[g>>2]=40;g=a+548|0;c[d+36>>2]=c[g>>2];c[g>>2]=40}if((c[a+12>>2]&128|0)==0){f=1;i=b;return f|0}g=d+40|0;d=c[g>>2]|0;if((d|0)==26){c[g>>2]=28;c[a+652>>2]=3;f=1;i=b;return f|0}if((d|0)!=27){f=1;i=b;return f|0}c[g>>2]=29;c[a+652>>2]=3;f=1;i=b;return f|0}else{f=1;i=b;return f|0}return 0}function jh(a){a=a|0;var b=0,d=0,f=0,g=0,h=0,j=0;b=i;d=c[a+576>>2]|0;if((jb[c[d+60>>2]&31](a)|0)==0){f=0;i=b;return f|0}if((lh(a)|0)==0){f=0;i=b;return f|0}g=c[d>>2]|0;if((g|0)==2){h=e[a+84>>1]|0;if((h|0)==32){c[d+24>>2]=33}else if((h|0)==16){c[d+24>>2]=32}else if((h|0)==8){c[d+24>>2]=31}h=a+536|0;j=c[h>>2]|0;if((j|0)==41){f=1;i=b;return f|0}c[d+12>>2]=j;c[h>>2]=41;h=a+544|0;c[d+16>>2]=c[h>>2];c[h>>2]=42;h=a+552|0;c[d+20>>2]=c[h>>2];c[h>>2]=42;f=1;i=b;return f|0}else if((g|0)==3){c[d+24>>2]=34;g=a+536|0;h=c[g>>2]|0;if((h|0)==41){f=1;i=b;return f|0}c[d+12>>2]=h;c[g>>2]=41;g=a+544|0;c[d+16>>2]=c[g>>2];c[g>>2]=42;g=a+552|0;c[d+20>>2]=c[g>>2];c[g>>2]=42;f=1;i=b;return f|0}else{f=1;i=b;return f|0}return 0}function kh(a){a=a|0;var b=0,d=0;b=i;d=c[a+576>>2]|0;if((d|0)==0){za(131872,131880,746,132008)}else{c[a+672>>2]=c[d+44>>2];c[a+668>>2]=c[d+48>>2];c[a+676>>2]=c[d+52>>2];c[a+508>>2]=c[d+56>>2];c[a+516>>2]=c[d+60>>2];i=b;return 1}return 0}function lh(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+16|0;f=d;g=c[a+576>>2]|0;h=c[g>>2]|0;if((h|0)==1){j=1;i=d;return j|0}else if((h|0)==3){k=b[a+86>>1]|0;if(!(k<<16>>16==3)){l=c[a+628>>2]|0;c[f>>2]=k&65535;sc(l,132400,132488,f);j=0;i=d;return j|0}}else if((h|0)==2){l=b[a+84>>1]|0;if(!(l<<16>>16==32|l<<16>>16==16|l<<16>>16==8)){k=c[a+628>>2]|0;c[f>>2]=l&65535;sc(k,132400,132416,f);j=0;i=d;return j|0}}else{k=c[a+628>>2]|0;c[f>>2]=h;sc(k,132400,132552,f);j=0;i=d;return j|0}if((b[a+126>>1]|0)==1){m=e[a+98>>1]|0}else{m=1}c[g+4>>2]=m;if((c[a+12>>2]&1024|0)==0){m=Md(a)|0;c[g+8>>2]=m;n=m}else{m=$d(a)|0;c[g+8>>2]=m;n=m}j=(n|0)!=0|0;i=d;return j|0}function mh(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;g=i;h=c[(c[b+576>>2]|0)+4>>2]|0;if(((f|0)%(h|0)|0|0)!=0){za(132368,131880,461,132384)}if((h|0)>=(f|0)){i=g;return}b=f-h|0;if((h|0)==3){f=b;j=a[e+2|0]|0;k=e;l=a[e+1|0]|0;m=a[e]|0;while(1){n=k+3|0;o=a[n]|0;a[n]=o-m;p=k+4|0;q=a[p]|0;a[p]=q-l;p=k+5|0;r=a[p]|0;a[p]=r-j;p=f+ -3|0;if((p|0)>0){f=p;j=r;k=n;l=q;m=o}else{break}}i=g;return}else if((h|0)==4){m=b;l=a[e+3|0]|0;k=a[e+2|0]|0;j=e;f=a[e+1|0]|0;o=a[e]|0;while(1){q=j+4|0;n=a[q]|0;a[q]=n-o;r=j+5|0;p=a[r]|0;a[r]=p-f;r=j+6|0;s=a[r]|0;a[r]=s-k;r=j+7|0;t=a[r]|0;a[r]=t-l;r=m+ -4|0;if((r|0)>0){m=r;l=t;k=s;j=q;f=p;o=n}else{break}}i=g;return}else{o=h+ -4|0;f=(o|0)>0;j=4-h|0;k=b;l=e+(b+ -1)|0;while(1){if((h|0)==3){u=l;v=15}else if((h|0)==2){w=l;v=16}else if((h|0)==0){x=l}else if((h|0)==1){y=l;v=17}else{if(f){b=l;e=o;while(1){m=b+h|0;a[m]=(d[m]|0)-(d[b]|0);e=e+ -1|0;if((e|0)<=0){break}else{b=b+ -1|0}}z=l+j|0}else{z=l}b=z+h|0;a[b]=(d[b]|0)-(d[z]|0);u=z+ -1|0;v=15}if((v|0)==15){v=0;b=u+h|0;a[b]=(d[b]|0)-(d[u]|0);w=u+ -1|0;v=16}if((v|0)==16){v=0;b=w+h|0;a[b]=(d[b]|0)-(d[w]|0);y=w+ -1|0;v=17}if((v|0)==17){v=0;b=y+h|0;a[b]=(d[b]|0)-(d[y]|0);x=y+ -1|0}k=k-h|0;if((k|0)<=0){break}else{l=x}}i=g;return}}function nh(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;h=c[(c[a+576>>2]|0)+4>>2]|0;a=(f|0)/2|0;if(((f|0)%(h<<1|0)|0|0)!=0){za(132328,131880,509,132352)}if((a|0)<=(h|0)){i=g;return}f=a-h|0;a=h+ -4|0;j=(a|0)>0;k=4-h|0;l=f;m=d+(f+ -1<<1)|0;while(1){switch(h|0){case 2:{n=m;o=11;break};case 1:{p=m;o=12;break};case 3:{q=m;o=10;break};case 0:{r=m;break};case 4:{s=m;o=9;break};default:{if(j){f=a;d=m;while(1){t=d+(h<<1)|0;b[t>>1]=(e[t>>1]|0)-(e[d>>1]|0);f=f+ -1|0;if((f|0)<=0){break}else{d=d+ -2|0}}s=m+(k<<1)|0;o=9}else{s=m;o=9}}}if((o|0)==9){o=0;d=s+(h<<1)|0;b[d>>1]=(e[d>>1]|0)-(e[s>>1]|0);q=s+ -2|0;o=10}if((o|0)==10){o=0;d=q+(h<<1)|0;b[d>>1]=(e[d>>1]|0)-(e[q>>1]|0);n=q+ -2|0;o=11}if((o|0)==11){o=0;d=n+(h<<1)|0;b[d>>1]=(e[d>>1]|0)-(e[n>>1]|0);p=n+ -2|0;o=12}if((o|0)==12){o=0;d=p+(h<<1)|0;b[d>>1]=(e[d>>1]|0)-(e[p>>1]|0);r=p+ -2|0}l=l-h|0;if((l|0)<=0){break}else{m=r}}i=g;return}function oh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;f=c[(c[a+576>>2]|0)+4>>2]|0;a=(d|0)/4|0;if(((d|0)%(f<<2|0)|0|0)!=0){za(132288,131880,529,132312)}if((a|0)<=(f|0)){i=e;return}d=a-f|0;a=b+(d+ -1<<2)|0;b=f+ -4|0;g=(b|0)>0;if((f|0)==4){h=d;j=a;while(1){k=j+16|0;c[k>>2]=(c[k>>2]|0)-(c[j>>2]|0);k=j+12|0;c[k>>2]=(c[k>>2]|0)-(c[j+ -4>>2]|0);k=j+8|0;c[k>>2]=(c[k>>2]|0)-(c[j+ -8>>2]|0);k=j+4|0;c[k>>2]=(c[k>>2]|0)-(c[j+ -12>>2]|0);h=h+ -4|0;if((h|0)<=0){break}else{j=j+ -16|0}}i=e;return}j=4-f|0;h=d;d=a;while(1){if((f|0)==3){l=d;m=12}else if((f|0)==1){n=d;m=14}else if((f|0)==0){o=d}else if((f|0)==2){p=d;m=13}else{if(g){a=b;k=d;while(1){q=k+(f<<2)|0;c[q>>2]=(c[q>>2]|0)-(c[k>>2]|0);a=a+ -1|0;if((a|0)<=0){break}else{k=k+ -4|0}}r=d+(j<<2)|0}else{r=d}k=r+(f<<2)|0;c[k>>2]=(c[k>>2]|0)-(c[r>>2]|0);l=r+ -4|0;m=12}if((m|0)==12){m=0;k=l+(f<<2)|0;c[k>>2]=(c[k>>2]|0)-(c[l>>2]|0);p=l+ -4|0;m=13}if((m|0)==13){m=0;k=p+(f<<2)|0;c[k>>2]=(c[k>>2]|0)-(c[p>>2]|0);n=p+ -4|0;m=14}if((m|0)==14){m=0;k=n+(f<<2)|0;c[k>>2]=(c[k>>2]|0)-(c[n>>2]|0);o=n+ -4|0}h=h-f|0;if((h|0)<=0){break}else{d=o}}i=e;return}function ph(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;g=c[a+576>>2]|0;if((g|0)==0){za(132064,131880,584,132240)}h=c[g+24>>2]|0;if((h|0)==0){za(132104,131880,585,132240)}j=g+12|0;if((c[j>>2]|0)==0){za(132264,131880,586,132240)}else{kb[h&63](a,b,d);h=mb[c[j>>2]&63](a,b,d,e)|0;i=f;return h|0}return 0}function qh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;i=i+16|0;g=f;h=c[a+576>>2]|0;if((h|0)==0){za(132064,131880,603,132080)}j=h+24|0;if((c[j>>2]|0)==0){za(132104,131880,604,132080)}k=h+20|0;if((c[k>>2]|0)==0){za(132128,131880,605,132080)}l=me(d)|0;if((l|0)==0){m=c[a+628>>2]|0;c[g>>2]=d;sc(m,132080,132152,g);n=0;i=f;return n|0}Qi(l|0,b|0,d|0)|0;b=c[h+8>>2]|0;if((b|0)<=0){za(132200,131880,623,132080)}if(((d|0)%(b|0)|0|0)!=0){za(132216,131880,624,132080)}if((d|0)>0){h=l;g=d;while(1){kb[c[j>>2]&63](a,h,b);g=g-b|0;if((g|0)<=0){break}else{h=h+b|0}}}b=mb[c[k>>2]&63](a,l,d,e)|0;ne(l);n=b;i=f;return n|0}function rh(b,f,g){b=b|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;h=i;j=c[(c[b+576>>2]|0)+4>>2]|0;k=(e[b+84>>1]|0)>>>3;b=(g>>>0)/(k>>>0)|0;l=me(g)|0;if(((g>>>0)%((ba(k,j)|0)>>>0)|0|0)!=0){za(132032,131880,554,132056)}if((l|0)==0){i=h;return}qe(l,f,g);if((b|0)>0){m=(k|0)==0;n=k+ -1|0;o=0;do{if(!m){p=ba(o,k)|0;q=0;do{a[f+((ba(n-q|0,b)|0)+o)|0]=a[l+(q+p)|0]|0;q=q+1|0}while(q>>>0<k>>>0)}o=o+1|0}while((o|0)<(b|0))}ne(l);if((j|0)>=(g|0)){i=h;return}l=j+ -4|0;b=(l|0)>0;o=4-j|0;k=g;n=f+(g+ -1-j)|0;while(1){switch(j|0){case 2:{r=n;s=18;break};case 4:{t=n;s=16;break};case 0:{u=n;break};case 1:{v=n;s=19;break};case 3:{w=n;s=17;break};default:{if(b){g=n;f=l;while(1){m=g+j|0;a[m]=(d[m]|0)-(d[g]|0);f=f+ -1|0;if((f|0)<=0){break}else{g=g+ -1|0}}t=n+o|0;s=16}else{t=n;s=16}}}if((s|0)==16){s=0;g=t+j|0;a[g]=(d[g]|0)-(d[t]|0);w=t+ -1|0;s=17}if((s|0)==17){s=0;g=w+j|0;a[g]=(d[g]|0)-(d[w]|0);r=w+ -1|0;s=18}if((s|0)==18){s=0;g=r+j|0;a[g]=(d[g]|0)-(d[r]|0);v=r+ -1|0;s=19}if((s|0)==19){s=0;g=v+j|0;a[g]=(d[g]|0)-(d[v]|0);u=v+ -1|0}k=k-j|0;if((k|0)<=(j|0)){break}else{n=u}}i=h;return}function sh(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;g=i;h=c[(c[b+576>>2]|0)+4>>2]|0;if(((f|0)%(h|0)|0|0)!=0){za(132368,131880,248,132808)}if((h|0)>=(f|0)){i=g;return}if((h|0)==3){b=f+ -3|0;if((b|0)<=0){i=g;return}j=b;b=a[e+2|0]|0;k=a[e+1|0]|0;l=e;m=a[e]|0;while(1){n=l+3|0;o=(a[n]|0)+m|0;a[n]=o;p=l+4|0;q=(a[p]|0)+k|0;a[p]=q;p=l+5|0;r=(a[p]|0)+b|0;a[p]=r;p=j+ -3|0;if((p|0)>0){j=p;b=r;k=q;l=n;m=o}else{break}}i=g;return}else if((h|0)==4){m=f+ -4|0;if((m|0)<=0){i=g;return}l=m;m=a[e+3|0]|0;k=a[e+2|0]|0;b=a[e+1|0]|0;j=e;o=a[e]|0;while(1){n=j+4|0;q=(a[n]|0)+o|0;a[n]=q;r=j+5|0;p=(a[r]|0)+b|0;a[r]=p;r=j+6|0;s=(a[r]|0)+k|0;a[r]=s;r=j+7|0;t=(a[r]|0)+m|0;a[r]=t;r=l+ -4|0;if((r|0)>0){l=r;m=t;k=s;b=p;j=n;o=q}else{break}}i=g;return}else{o=h+ -4|0;j=(o|0)>0;b=f-h|0;f=e;while(1){switch(h|0){case 3:{u=f;v=17;break};case 1:{w=f;v=19;break};case 2:{x=f;v=18;break};case 0:{y=f;break};case 4:{z=f;v=16;break};default:{if(j){e=f;k=o;while(1){m=e+h|0;a[m]=(d[e]|0)+(d[m]|0);k=k+ -1|0;if((k|0)<=0){break}else{e=e+1|0}}z=f+o|0;v=16}else{z=f;v=16}}}if((v|0)==16){v=0;e=z+h|0;a[e]=(d[z]|0)+(d[e]|0);u=z+1|0;v=17}if((v|0)==17){v=0;e=u+h|0;a[e]=(d[u]|0)+(d[e]|0);x=u+1|0;v=18}if((v|0)==18){v=0;e=x+h|0;a[e]=(d[x]|0)+(d[e]|0);w=x+1|0;v=19}if((v|0)==19){v=0;e=w+h|0;a[e]=(d[w]|0)+(d[e]|0);y=w+1|0}b=b-h|0;if((b|0)<=0){break}else{f=y}}i=g;return}}function th(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;h=c[(c[a+576>>2]|0)+4>>2]|0;a=(f|0)/2|0;if(((f|0)%(h<<1|0)|0|0)!=0){za(132328,131880,318,132792)}if((a|0)<=(h|0)){i=g;return}f=h+ -4|0;j=(f|0)>0;k=a-h|0;a=d;while(1){switch(h|0){case 0:{l=a;break};case 4:{m=a;n=9;break};case 2:{o=a;n=11;break};case 3:{p=a;n=10;break};case 1:{q=a;n=12;break};default:{if(j){d=f;r=a;while(1){s=r+(h<<1)|0;b[s>>1]=(e[s>>1]|0)+(e[r>>1]|0);d=d+ -1|0;if((d|0)<=0){break}else{r=r+2|0}}m=a+(f<<1)|0;n=9}else{m=a;n=9}}}if((n|0)==9){n=0;r=m+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[m>>1]|0);p=m+2|0;n=10}if((n|0)==10){n=0;r=p+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[p>>1]|0);o=p+2|0;n=11}if((n|0)==11){n=0;r=o+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[o>>1]|0);q=o+2|0;n=12}if((n|0)==12){n=0;r=q+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[q>>1]|0);l=q+2|0}k=k-h|0;if((k|0)<=0){break}else{a=l}}i=g;return}function uh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;f=c[(c[a+576>>2]|0)+4>>2]|0;a=(d|0)/4|0;if(((d|0)%(f<<2|0)|0|0)!=0){za(132288,131880,355,132776)}if((a|0)<=(f|0)){i=e;return}d=f+ -4|0;g=(d|0)>0;h=a-f|0;a=b;while(1){switch(f|0){case 0:{j=a;break};case 3:{k=a;l=10;break};case 2:{m=a;l=11;break};case 4:{n=a;l=9;break};case 1:{o=a;l=12;break};default:{if(g){b=d;p=a;while(1){q=p+(f<<2)|0;c[q>>2]=(c[q>>2]|0)+(c[p>>2]|0);b=b+ -1|0;if((b|0)<=0){break}else{p=p+4|0}}n=a+(d<<2)|0;l=9}else{n=a;l=9}}}if((l|0)==9){l=0;p=n+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[n>>2]|0);k=n+4|0;l=10}if((l|0)==10){l=0;p=k+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[k>>2]|0);m=k+4|0;l=11}if((l|0)==11){l=0;p=m+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[m>>2]|0);o=m+4|0;l=12}if((l|0)==12){l=0;p=o+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[o>>2]|0);j=o+4|0}h=h-f|0;if((h|0)<=0){break}else{a=j}}i=e;return}function vh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;g=c[a+576>>2]|0;if((g|0)==0){za(132064,131880,413,132728)}h=c[g+28>>2]|0;if((h|0)==0){za(132752,131880,414,132728)}j=g+40|0;if((c[j>>2]|0)==0){za(132704,131880,415,132728)}if((mb[h&63](a,b,d,e)|0)==0){k=0;i=f;return k|0}kb[c[j>>2]&63](a,b,d);k=1;i=f;return k|0}function wh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=c[a+576>>2]|0;if((g|0)==0){za(132064,131880,436,132632)}h=c[g+36>>2]|0;if((h|0)==0){za(132656,131880,437,132632)}if((mb[h&63](a,b,d,e)|0)==0){j=0;i=f;return j|0}e=c[g+8>>2]|0;if((e|0)<=0){za(132200,131880,441,132632)}if(((d|0)%(e|0)|0|0)!=0){za(132680,131880,442,132632)}h=g+40|0;g=c[h>>2]|0;if((g|0)==0){za(132704,131880,443,132632)}if((d|0)>0){k=b;l=d;m=g}else{j=1;i=f;return j|0}while(1){kb[m&63](a,k,e);g=l-e|0;if((g|0)<=0){j=1;break}k=k+e|0;l=g;m=c[h>>2]|0}i=f;return j|0}function xh(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;h=c[(c[a+576>>2]|0)+4>>2]|0;a=(f|0)/2|0;if(((f|0)%(h<<1|0)|0|0)!=0){za(132328,131880,299,132616)}if((a|0)<=(h|0)){i=g;return}Qd(d,a);f=h+ -4|0;j=(f|0)>0;k=a-h|0;a=d;while(1){switch(h|0){case 1:{l=a;m=12;break};case 3:{n=a;m=10;break};case 0:{o=a;break};case 2:{p=a;m=11;break};case 4:{q=a;m=9;break};default:{if(j){d=f;r=a;while(1){s=r+(h<<1)|0;b[s>>1]=(e[s>>1]|0)+(e[r>>1]|0);d=d+ -1|0;if((d|0)<=0){break}else{r=r+2|0}}q=a+(f<<1)|0;m=9}else{q=a;m=9}}}if((m|0)==9){m=0;r=q+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[q>>1]|0);n=q+2|0;m=10}if((m|0)==10){m=0;r=n+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[n>>1]|0);p=n+2|0;m=11}if((m|0)==11){m=0;r=p+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[p>>1]|0);l=p+2|0;m=12}if((m|0)==12){m=0;r=l+(h<<1)|0;b[r>>1]=(e[r>>1]|0)+(e[l>>1]|0);o=l+2|0}k=k-h|0;if((k|0)<=0){break}else{a=o}}i=g;return}function yh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;f=c[(c[a+576>>2]|0)+4>>2]|0;a=(d|0)/4|0;if(((d|0)%(f<<2|0)|0|0)!=0){za(132288,131880,336,132600)}if((a|0)<=(f|0)){i=e;return}Sd(b,a);d=f+ -4|0;g=(d|0)>0;h=a-f|0;a=b;while(1){switch(f|0){case 1:{j=a;k=12;break};case 4:{l=a;k=9;break};case 2:{m=a;k=11;break};case 0:{n=a;break};case 3:{o=a;k=10;break};default:{if(g){b=d;p=a;while(1){q=p+(f<<2)|0;c[q>>2]=(c[q>>2]|0)+(c[p>>2]|0);b=b+ -1|0;if((b|0)<=0){break}else{p=p+4|0}}l=a+(d<<2)|0;k=9}else{l=a;k=9}}}if((k|0)==9){k=0;p=l+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[l>>2]|0);o=l+4|0;k=10}if((k|0)==10){k=0;p=o+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[o>>2]|0);m=o+4|0;k=11}if((k|0)==11){k=0;p=m+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[m>>2]|0);j=m+4|0;k=12}if((k|0)==12){k=0;p=j+(f<<2)|0;c[p>>2]=(c[p>>2]|0)+(c[j>>2]|0);n=j+4|0}h=h-f|0;if((h|0)<=0){break}else{a=n}}i=e;return}function zh(b,f,g){b=b|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;h=i;j=c[(c[b+576>>2]|0)+4>>2]|0;k=(e[b+84>>1]|0)>>>3;b=(g>>>0)/(k>>>0)|0;l=me(g)|0;if(((g>>>0)%((ba(k,j)|0)>>>0)|0|0)!=0){za(132032,131880,379,132592)}if((l|0)==0){i=h;return}a:do{if((j|0)<(g|0)){m=j+ -4|0;n=(m|0)>0;o=g;p=f;while(1){switch(j|0){case 0:{q=p;break};case 3:{r=p;s=11;break};case 4:{t=p;s=10;break};case 2:{u=p;s=12;break};case 1:{v=p;s=13;break};default:{if(n){w=p;x=m;while(1){y=w+j|0;a[y]=(d[y]|0)+(d[w]|0);x=x+ -1|0;if((x|0)<=0){break}else{w=w+1|0}}t=p+m|0;s=10}else{t=p;s=10}}}if((s|0)==10){s=0;w=t+j|0;a[w]=(d[w]|0)+(d[t]|0);r=t+1|0;s=11}if((s|0)==11){s=0;w=r+j|0;a[w]=(d[w]|0)+(d[r]|0);u=r+1|0;s=12}if((s|0)==12){s=0;w=u+j|0;a[w]=(d[w]|0)+(d[u]|0);v=u+1|0;s=13}if((s|0)==13){s=0;w=v+j|0;a[w]=(d[w]|0)+(d[v]|0);q=v+1|0}o=o-j|0;if((o|0)<=(j|0)){break a}else{p=q}}}}while(0);qe(l,f,g);if((b|0)>0){g=(k|0)==0;q=k+ -1|0;j=0;do{if(!g){v=ba(j,k)|0;s=0;do{a[f+(s+v)|0]=a[l+((ba(q-s|0,b)|0)+j)|0]|0;s=s+1|0}while(s>>>0<k>>>0)}j=j+1|0}while((j|0)<(b|0))}ne(l);i=h;return}function Ah(a,b){a=a|0;b=b|0;c[a+508>>2]=25;c[a+532>>2]=43;c[a+540>>2]=43;return 1}function Bh(a){a=a|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+16|0;e=d;f=b[a+84>>1]|0;if(f<<16>>16==4){g=1;i=d;return g|0}h=c[a+628>>2]|0;c[e>>2]=f&65535;sc(h,133232,133256,e);g=0;i=d;return g|0}function Ch(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;g=i;i=i+32|0;h=g;j=b+580|0;if(((f|0)%(c[j>>2]|0)|0|0)!=0){sc(c[b+628>>2]|0,133032,133056,h);k=0;i=g;return k|0}if((f|0)<=0){k=1;i=g;return k|0}l=b+56|0;m=b+604|0;n=b+608|0;o=f;f=c[n>>2]|0;p=c[m>>2]|0;q=e;while(1){r=c[l>>2]|0;e=(r|0)>0;if((f|0)>0&e){s=q;t=p;u=f;v=0;w=0;while(1){x=t+1|0;y=d[t]|0;z=u+ -1|0;A=y&192;do{if((A|0)==64){B=y>>>4&3;do{if((B|0)!=2){C=(c[133112+(B<<2)>>2]|0)+v&15;D=w+1|0;if((w&1|0)==0){a[s]=C<<4;E=s;F=C;G=D;break}else{a[s]=d[s]|0|C;E=s+1|0;F=C;G=D;break}}else{E=s;F=v;G=w}}while(0);B=y>>>2&3;do{if((B|0)!=2){D=(c[133112+(B<<2)>>2]|0)+F&15;if((G|0)<(r|0)){C=G+1|0;if((G&1|0)==0){a[E]=D<<4;H=E;I=D;J=C;break}else{a[E]=d[E]|0|D;H=E+1|0;I=D;J=C;break}}else{H=E;I=D;J=G}}else{H=E;I=F;J=G}}while(0);B=y&3;if((B|0)!=2){D=(c[133112+(B<<2)>>2]|0)+I&15;if((J|0)<(r|0)){B=J+1|0;if((J&1|0)==0){a[H]=D<<4;K=H;L=D;M=B;break}else{a[H]=d[H]|0|D;K=H+1|0;L=D;M=B;break}}else{K=H;L=D;M=J}}else{K=H;L=I;M=J}}else if((A|0)==128){D=y>>>3&7;do{if((D|0)!=4){B=(c[133128+(D<<2)>>2]|0)+v&15;C=w+1|0;if((w&1|0)==0){a[s]=B<<4;N=s;O=B;P=C;break}else{a[s]=d[s]|0|B;N=s+1|0;O=B;P=C;break}}else{N=s;O=v;P=w}}while(0);D=y&7;if((D|0)!=4){C=(c[133128+(D<<2)>>2]|0)+O&15;if((P|0)<(r|0)){D=P+1|0;if((P&1|0)==0){a[N]=C<<4;K=N;L=C;M=D;break}else{a[N]=d[N]|0|C;K=N+1|0;L=C;M=D;break}}else{K=N;L=C;M=P}}else{K=N;L=O;M=P}}else if((A|0)==192){C=y&15;D=w+1|0;if((w&1|0)==0){a[s]=y<<4;K=s;L=C;M=D;break}else{a[s]=d[s]|0|C;K=s+1|0;L=C;M=D;break}}else if((A|0)==0){if((w&1|0)==0){Q=s;R=v<<4|v;S=y;T=w}else{D=d[s]|0|v;a[s]=D;Q=s+1|0;R=D&255;S=y+ -1|0;T=w+1|0}D=S+T|0;if((D|0)<(r|0)&(S|0)>0){C=(S+ -1|0)>>>1;B=C+1|0;Li(Q|0,R&255|0,B|0)|0;U=Q+B|0;V=S+ -2-(C<<1)|0}else{U=Q;V=S}if((V|0)==-1){C=U+ -1|0;a[C]=a[C]&240;W=C}else{W=U}K=W;L=R&15;M=D}else{K=s;L=v;M=w}}while(0);y=(M|0)<(r|0);if((z|0)>0&y){s=K;t=x;u=z;v=L;w=M}else{X=y;Y=x;Z=z;_=M;break}}}else{X=e;Y=p;Z=f;_=0}c[m>>2]=Y;c[n>>2]=Z;if((_|0)!=(r|0)){break}w=c[j>>2]|0;v=o-w|0;if((v|0)<=0){k=1;$=46;break}o=v;f=Z;p=Y;q=q+w|0}if(($|0)==46){i=g;return k|0}$=c[b+628>>2]|0;q=c[b+444>>2]|0;c[h>>2]=X?133200:133216;c[h+4>>2]=q;q=h+8|0;c[q>>2]=_;c[q+4>>2]=((_|0)<0)<<31>>31;_=h+16|0;c[_>>2]=r;c[_+4>>2]=((r|0)<0)<<31>>31;sc($,133096,133160,h);k=0;i=g;return k|0}function Dh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d;if(!((b|0)==8|(b|0)==32946)){za(133336,133416,399,133432)}if((Vb(a,133448,1)|0)==0){sc(c[a+628>>2]|0,133432,133488,e);f=0;i=d;return f|0}b=me(136)|0;c[a+576>>2]=b;if((b|0)==0){sc(c[a+628>>2]|0,133432,133536,e);f=0;i=d;return f|0}else{e=b+96|0;g=a+672|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[b+128>>2]=c[g>>2];c[g>>2]=15;g=a+668|0;c[b+132>>2]=c[g>>2];c[g>>2]=16;c[b+120>>2]=-1;c[b+124>>2]=0;c[a+504>>2]=26;c[a+508>>2]=27;c[a+512>>2]=29;c[a+532>>2]=44;c[a+540>>2]=44;c[a+548>>2]=44;c[a+516>>2]=28;c[a+524>>2]=30;c[a+528>>2]=29;c[a+536>>2]=45;c[a+544>>2]=45;c[a+552>>2]=45;c[a+564>>2]=9;eh(a)|0;f=1;i=d;return f|0}return 0}function Eh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[a+576>>2]|0;if((b|0)==65557){g=c[f+120>>2]|0;h=c[d>>2]|0;j=c[h>>2]|0;c[d>>2]=h+4;c[j>>2]=g;k=1;i=e;return k|0}else{k=fb[c[f+128>>2]&31](a,b,d)|0;i=e;return k|0}return 0}function Fh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((b|0)!=65557){h=fb[c[g+132>>2]&31](a,b,d)|0;i=e;return h|0}b=c[d>>2]|0;j=c[b>>2]|0;c[d>>2]=b+4;c[g+120>>2]=j;if((c[g+124>>2]&2|0)==0){h=1;i=e;return h|0}if((Vh(g+64|0,j,0)|0)==0){h=1;i=e;return h|0}j=c[a+628>>2]|0;c[f>>2]=c[g+88>>2];sc(j,133936,133696,f);h=0;i=e;return h|0}function Gh(a){a=a|0;return 1}function Hh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;i=i+16|0;d=b;e=c[a+576>>2]|0;if((e|0)==0){za(133592,133416,100,133920)}f=e+124|0;g=e+64|0;if((c[f>>2]&2|0)!=0){Rh(g)|0;c[f>>2]=0}if((bi(g,133744,56)|0)==0){c[f>>2]=c[f>>2]|1;h=1;i=b;return h|0}else{f=c[a+628>>2]|0;c[d>>2]=c[e+88>>2];sc(f,133920,133752,d);h=0;i=b;return h|0}return 0}function Ih(a,b){a=a|0;b=b|0;var d=0,e=0;b=i;d=c[a+576>>2]|0;if((d|0)==0){za(133592,133416,127,133904)}if((c[d+124>>2]&1|0)==0){jb[c[a+508>>2]&31](a)|0}e=d+64|0;c[e>>2]=c[a+588>>2];c[d+68>>2]=c[a+608>>2];a=($h(e)|0)==0|0;i=b;return a|0}function Jh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((g|0)==0){za(133592,133416,153,133760)}if((c[g+124>>2]|0)!=1){za(133776,133416,154,133760)}h=a+604|0;j=g+64|0;c[j>>2]=c[h>>2];k=a+608|0;l=g+68|0;c[l>>2]=c[k>>2];c[g+76>>2]=b;b=g+80|0;c[b>>2]=d;d=a+628|0;m=a+444|0;a=g+88|0;do{g=ci(j,1)|0;if((g|0)==-3){n=c[d>>2]|0;o=c[a>>2]|0;c[f>>2]=c[m>>2];c[f+4>>2]=o;sc(n,133760,133808,f);if((fi(j)|0)!=0){p=0;q=13;break}}else if((g|0)==1){q=10;break}else if((g|0)!=0){q=8;break}}while((c[b>>2]|0)!=0);if((q|0)==8){g=c[d>>2]|0;c[f>>2]=c[a>>2];sc(g,133760,133696,f);p=0;i=e;return p|0}else if((q|0)==10){g=c[b>>2]|0;if((g|0)!=0){b=c[d>>2]|0;c[f>>2]=c[m>>2];c[f+4>>2]=g;sc(b,133760,133848,f);p=0;i=e;return p|0}}else if((q|0)==13){i=e;return p|0}c[h>>2]=c[j>>2];c[k>>2]=c[l>>2];p=1;i=e;return p|0}function Kh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;i=i+16|0;d=b;e=c[a+576>>2]|0;if((e|0)==0){za(133592,133416,207,133728)}f=e+124|0;g=e+64|0;if((c[f>>2]&1|0)!=0){ei(g)|0;c[f>>2]=0}if((Ph(g,c[e+120>>2]|0,133744,56)|0)==0){c[f>>2]=c[f>>2]|2;h=1;i=b;return h|0}else{f=c[a+628>>2]|0;c[d>>2]=c[e+88>>2];sc(f,133728,133752,d);h=0;i=b;return h|0}return 0}function Lh(a,b){a=a|0;b=b|0;var d=0;b=i;d=c[a+576>>2]|0;if((d|0)==0){za(133592,133416,232,133712)}if((c[d+124>>2]|0)!=2){jb[c[a+516>>2]&31](a)|0}c[d+76>>2]=c[a+588>>2];c[d+80>>2]=c[a+592>>2];a=(Sh(d+64|0)|0)==0|0;i=b;return a|0}function Mh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;i=i+16|0;d=b;e=c[a+576>>2]|0;f=e+64|0;c[e+68>>2]=0;g=e+80|0;h=a+592|0;j=a+608|0;k=a+588|0;l=e+76|0;while(1){m=Wh(f,4)|0;if(!(m>>>0<2)){break}n=c[g>>2]|0;o=c[h>>2]|0;if((n|0)!=(o|0)){c[j>>2]=o-n;we(a)|0;c[l>>2]=c[k>>2];c[g>>2]=c[h>>2]}if((m|0)==1){p=1;q=7;break}}if((q|0)==7){i=b;return p|0}q=c[a+628>>2]|0;c[d>>2]=c[e+88>>2];sc(q,133680,133696,d);p=0;i=b;return p|0}function Nh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;f=e;g=c[a+576>>2]|0;if((g|0)==0){za(133592,133416,259,133608)}if((c[g+124>>2]|0)!=2){za(133624,133416,260,133608)}h=g+64|0;c[h>>2]=b;b=g+68|0;c[b>>2]=d;d=g+80|0;j=a+592|0;k=a+608|0;l=a+588|0;m=g+76|0;while(1){if((Wh(h,0)|0)!=0){break}if((c[d>>2]|0)==0){c[k>>2]=c[j>>2];we(a)|0;c[m>>2]=c[l>>2];c[d>>2]=c[j>>2]}if((c[b>>2]|0)==0){n=1;o=11;break}}if((o|0)==11){i=e;return n|0}o=c[a+628>>2]|0;c[f>>2]=c[g+88>>2];sc(o,133608,133656,f);n=0;i=e;return n|0}function Oh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a+576|0;e=c[d>>2]|0;if((e|0)==0){za(133568,133416,329,133576)}kh(a)|0;c[a+672>>2]=c[e+128>>2];c[a+668>>2]=c[e+132>>2];f=e+124|0;g=c[f>>2]|0;if((g&2|0)==0){if((g&1|0)!=0){ei(e+64|0)|0;c[f>>2]=0}}else{Rh(e+64|0)|0;c[f>>2]=0}ne(e);c[d>>2]=0;Re(a);i=b;return}function Ph(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=i;f=Qh(a,b,8,15,8,0,c,d)|0;i=e;return f|0}function Qh(d,f,g,h,j,k,l,m){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;n=i;if((l|0)==0){o=-6;i=n;return o|0}if(!((a[l]|0)==49&(m|0)==56)){o=-6;i=n;return o|0}if((d|0)==0){o=-2;i=n;return o|0}m=d+24|0;c[m>>2]=0;l=d+32|0;p=c[l>>2]|0;if((p|0)==0){c[l>>2]=17;c[d+40>>2]=0;q=17}else{q=p}p=d+36|0;if((c[p>>2]|0)==0){c[p>>2]=1}p=(f|0)==-1?6:f;if((h|0)<0){r=0-h|0;s=0}else{f=(h|0)>15;r=f?h+ -16|0:h;s=f?2:1}if(!((j+ -1|0)>>>0<9&(g|0)==8)){o=-2;i=n;return o|0}if((r+ -8|0)>>>0>7|p>>>0>9|k>>>0>4){o=-2;i=n;return o|0}g=(r|0)==8?9:r;r=d+40|0;f=fb[q&31](c[r>>2]|0,1,5828)|0;if((f|0)==0){o=-4;i=n;return o|0}q=d+28|0;c[q>>2]=f;c[f>>2]=d;c[f+24>>2]=s;c[f+28>>2]=0;c[f+48>>2]=g;s=1<<g;g=f+44|0;c[g>>2]=s;c[f+52>>2]=s+ -1;h=j+7|0;c[f+80>>2]=h;t=1<<h;h=f+76|0;c[h>>2]=t;c[f+84>>2]=t+ -1;c[f+88>>2]=((j+9|0)>>>0)/3|0;t=f+56|0;c[t>>2]=fb[c[l>>2]&31](c[r>>2]|0,s,2)|0;s=f+64|0;c[s>>2]=fb[c[l>>2]&31](c[r>>2]|0,c[g>>2]|0,2)|0;g=f+68|0;c[g>>2]=fb[c[l>>2]&31](c[r>>2]|0,c[h>>2]|0,2)|0;c[f+5824>>2]=0;h=1<<j+6;j=f+5788|0;c[j>>2]=h;u=fb[c[l>>2]&31](c[r>>2]|0,h,4)|0;c[f+8>>2]=u;h=c[j>>2]|0;c[f+12>>2]=h<<2;if(((c[t>>2]|0)!=0?(c[s>>2]|0)!=0:0)?!((c[g>>2]|0)==0|(u|0)==0):0){c[f+5796>>2]=u+(h>>>1<<1);c[f+5784>>2]=u+(h*3|0);c[f+132>>2]=p;c[f+136>>2]=k;a[f+36|0]=8;k=Uh(d)|0;if((k|0)!=0){o=k;i=n;return o|0}k=c[q>>2]|0;c[k+60>>2]=c[k+44>>2]<<1;q=c[k+76>>2]|0;p=c[k+68>>2]|0;b[p+(q+ -1<<1)>>1]=0;Li(p|0,0,(q<<1)+ -2|0)|0;q=c[k+132>>2]|0;c[k+128>>2]=e[133962+(q*12|0)>>1]|0;c[k+140>>2]=e[133960+(q*12|0)>>1]|0;c[k+144>>2]=e[133964+(q*12|0)>>1]|0;c[k+124>>2]=e[133966+(q*12|0)>>1]|0;c[k+108>>2]=0;c[k+92>>2]=0;c[k+116>>2]=0;c[k+5812>>2]=0;c[k+120>>2]=2;c[k+96>>2]=2;c[k+104>>2]=0;c[k+72>>2]=0;o=0;i=n;return o|0}c[f+4>>2]=666;c[m>>2]=c[139952>>2];Rh(d)|0;o=-4;i=n;return o|0}function Rh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=a+28|0;f=c[e>>2]|0;if((f|0)==0){d=-2;i=b;return d|0}g=c[f+4>>2]|0;switch(g|0){case 42:case 69:case 73:case 91:case 103:case 113:case 666:{break};default:{d=-2;i=b;return d|0}}h=c[f+8>>2]|0;if((h|0)==0){j=f}else{hb[c[a+36>>2]&1](c[a+40>>2]|0,h);j=c[e>>2]|0}h=c[j+68>>2]|0;if((h|0)==0){k=j}else{hb[c[a+36>>2]&1](c[a+40>>2]|0,h);k=c[e>>2]|0}h=c[k+64>>2]|0;if((h|0)==0){l=k}else{hb[c[a+36>>2]&1](c[a+40>>2]|0,h);l=c[e>>2]|0}h=c[l+56>>2]|0;k=a+36|0;if((h|0)==0){m=a+40|0;n=l}else{l=a+40|0;hb[c[k>>2]&1](c[l>>2]|0,h);m=l;n=c[e>>2]|0}hb[c[k>>2]&1](c[m>>2]|0,n);c[e>>2]=0;d=(g|0)==113?-3:0;i=b;return d|0}function Sh(a){a=a|0;var d=0,f=0,g=0,h=0;d=i;f=Uh(a)|0;if((f|0)!=0){i=d;return f|0}g=c[a+28>>2]|0;c[g+60>>2]=c[g+44>>2]<<1;a=c[g+76>>2]|0;h=c[g+68>>2]|0;b[h+(a+ -1<<1)>>1]=0;Li(h|0,0,(a<<1)+ -2|0)|0;a=c[g+132>>2]|0;c[g+128>>2]=e[133962+(a*12|0)>>1]|0;c[g+140>>2]=e[133960+(a*12|0)>>1]|0;c[g+144>>2]=e[133964+(a*12|0)>>1]|0;c[g+124>>2]=e[133966+(a*12|0)>>1]|0;c[g+108>>2]=0;c[g+92>>2]=0;c[g+116>>2]=0;c[g+5812>>2]=0;c[g+120>>2]=2;c[g+96>>2]=2;c[g+104>>2]=0;c[g+72>>2]=0;i=d;return f|0}function Th(a){a=a|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;f=i;g=a+44|0;h=c[g>>2]|0;j=a+60|0;k=a+116|0;l=a+108|0;m=h+ -262|0;n=a+56|0;o=a+5812|0;p=a+72|0;q=a+88|0;r=a+84|0;s=a+68|0;t=a+52|0;u=a+64|0;v=a+112|0;w=a+92|0;x=a+76|0;y=c[k>>2]|0;z=h;while(1){A=c[l>>2]|0;B=(c[j>>2]|0)-y-A|0;if(A>>>0<(m+z|0)>>>0){C=A;D=B}else{A=c[n>>2]|0;Qi(A|0,A+h|0,h|0)|0;c[v>>2]=(c[v>>2]|0)-h;A=(c[l>>2]|0)-h|0;c[l>>2]=A;c[w>>2]=(c[w>>2]|0)-h;E=c[x>>2]|0;F=E;G=(c[s>>2]|0)+(E<<1)|0;do{G=G+ -2|0;E=e[G>>1]|0;if(E>>>0<h>>>0){H=0}else{H=E-h&65535}b[G>>1]=H;F=F+ -1|0}while((F|0)!=0);F=h;G=(c[u>>2]|0)+(h<<1)|0;do{G=G+ -2|0;E=e[G>>1]|0;if(E>>>0<h>>>0){I=0}else{I=E-h&65535}b[G>>1]=I;F=F+ -1|0}while((F|0)!=0);C=A;D=B+h|0}F=c[a>>2]|0;G=F+4|0;E=c[G>>2]|0;if((E|0)==0){break}J=c[k>>2]|0;K=(c[n>>2]|0)+(J+C)|0;L=E>>>0>D>>>0?D:E;if((L|0)==0){M=0;N=J}else{c[G>>2]=E-L;Qi(K|0,c[F>>2]|0,L|0)|0;E=c[(c[F+28>>2]|0)+24>>2]|0;if((E|0)==1){G=F+48|0;c[G>>2]=ti(c[G>>2]|0,K,L)|0}else if((E|0)==2){E=F+48|0;c[E>>2]=ui(c[E>>2]|0,K,L)|0}c[F>>2]=(c[F>>2]|0)+L;K=F+8|0;c[K>>2]=(c[K>>2]|0)+L;M=L;N=c[k>>2]|0}L=N+M|0;c[k>>2]=L;K=c[o>>2]|0;a:do{if((L+K|0)>>>0>2){F=(c[l>>2]|0)-K|0;E=c[n>>2]|0;G=d[E+F|0]|0;c[p>>2]=G;J=c[q>>2]|0;O=c[r>>2]|0;P=((d[E+(F+1)|0]|0)^G<<J)&O;c[p>>2]=P;G=K;Q=P;P=F;while(1){if((G|0)==0){break a}Q=((d[E+(P+2)|0]|0)^Q<<J)&O;c[p>>2]=Q;F=(c[s>>2]|0)+(Q<<1)|0;b[(c[u>>2]|0)+((c[t>>2]&P)<<1)>>1]=b[F>>1]|0;b[F>>1]=P;G=G+ -1|0;c[o>>2]=G;if((L+G|0)>>>0<3){break}else{P=P+1|0}}}}while(0);if(!(L>>>0<262)){break}if((c[(c[a>>2]|0)+4>>2]|0)==0){break}y=L;z=c[g>>2]|0}g=a+5824|0;a=c[g>>2]|0;z=c[j>>2]|0;if(!(a>>>0<z>>>0)){i=f;return}j=(c[k>>2]|0)+(c[l>>2]|0)|0;if(a>>>0<j>>>0){l=z-j|0;k=l>>>0>258?258:l;Li((c[n>>2]|0)+j|0,0,k|0)|0;c[g>>2]=k+j;i=f;return}k=j+258|0;if(!(a>>>0<k>>>0)){i=f;return}j=k-a|0;k=z-a|0;z=j>>>0>k>>>0?k:j;Li((c[n>>2]|0)+a|0,0,z|0)|0;c[g>>2]=(c[g>>2]|0)+z;i=f;return}function Uh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=c[a+28>>2]|0;if((e|0)==0){d=-2;i=b;return d|0}if((c[a+32>>2]|0)==0){d=-2;i=b;return d|0}if((c[a+36>>2]|0)==0){d=-2;i=b;return d|0}c[a+20>>2]=0;c[a+8>>2]=0;c[a+24>>2]=0;c[a+44>>2]=2;c[e+20>>2]=0;c[e+16>>2]=c[e+8>>2];f=e+24|0;g=c[f>>2]|0;if((g|0)<0){h=0-g|0;c[f>>2]=h;j=h}else{j=g}c[e+4>>2]=(j|0)!=0?42:113;if((j|0)==2){k=ui(0,0,0)|0}else{k=ti(0,0,0)|0}c[a+48>>2]=k;c[e+40>>2]=0;hi(e);d=0;i=b;return d|0}function Vh(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;if((a|0)==0){g=-2;i=f;return g|0}h=c[a+28>>2]|0;if((h|0)==0){g=-2;i=f;return g|0}j=(b|0)==-1?6:b;if(j>>>0>9|d>>>0>4){g=-2;i=f;return g|0}b=h+132|0;k=h+136|0;if((c[k>>2]|0)==(d|0)?(c[133968+((c[b>>2]|0)*12|0)>>2]|0)==(c[133968+(j*12|0)>>2]|0):0){l=0}else{if((c[a+8>>2]|0)!=0){m=Wh(a,5)|0;if((m|0)==-5){l=(c[h+20>>2]|0)==0?0:-5}else{l=m}}else{l=0}}if((c[b>>2]|0)!=(j|0)){c[b>>2]=j;c[h+128>>2]=e[133962+(j*12|0)>>1]|0;c[h+140>>2]=e[133960+(j*12|0)>>1]|0;c[h+144>>2]=e[133964+(j*12|0)>>1]|0;c[h+124>>2]=e[133966+(j*12|0)>>1]|0}c[k>>2]=d;g=l;i=f;return g|0}function Wh(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0;g=i;if((e|0)==0){h=-2;i=g;return h|0}j=e+28|0;k=c[j>>2]|0;if((k|0)==0|f>>>0>5){h=-2;i=g;return h|0}l=e+12|0;do{if((c[l>>2]|0)!=0){if((c[e>>2]|0)==0?(c[e+4>>2]|0)!=0:0){break}m=k+4|0;n=c[m>>2]|0;o=(f|0)==4;if((n|0)!=666|o){p=e+16|0;if((c[p>>2]|0)==0){c[e+24>>2]=c[139956>>2];h=-5;i=g;return h|0}c[k>>2]=e;q=k+40|0;r=c[q>>2]|0;c[q>>2]=f;do{if((n|0)==42){if((c[k+24>>2]|0)!=2){s=(c[k+48>>2]<<12)+ -30720|0;if((c[k+136>>2]|0)<=1?(t=c[k+132>>2]|0,(t|0)>=2):0){if((t|0)<6){u=64}else{u=(t|0)==6?128:192}}else{u=0}t=u|s;s=k+108|0;v=(c[s>>2]|0)==0?t:t|32;c[m>>2]=113;t=k+20|0;w=c[t>>2]|0;c[t>>2]=w+1;x=k+8|0;a[(c[x>>2]|0)+w|0]=v>>>8;w=c[t>>2]|0;c[t>>2]=w+1;a[(c[x>>2]|0)+w|0]=(v|((v>>>0)%31|0))^31;v=e+48|0;if((c[s>>2]|0)!=0){s=c[v>>2]|0;w=c[t>>2]|0;c[t>>2]=w+1;a[(c[x>>2]|0)+w|0]=s>>>24;w=c[t>>2]|0;c[t>>2]=w+1;a[(c[x>>2]|0)+w|0]=s>>>16;s=c[v>>2]|0;w=c[t>>2]|0;c[t>>2]=w+1;a[(c[x>>2]|0)+w|0]=s>>>8;w=c[t>>2]|0;c[t>>2]=w+1;a[(c[x>>2]|0)+w|0]=s}c[v>>2]=ti(0,0,0)|0;y=c[m>>2]|0;z=32;break}v=e+48|0;c[v>>2]=ui(0,0,0)|0;s=k+20|0;w=c[s>>2]|0;c[s>>2]=w+1;x=k+8|0;a[(c[x>>2]|0)+w|0]=31;w=c[s>>2]|0;c[s>>2]=w+1;a[(c[x>>2]|0)+w|0]=-117;w=c[s>>2]|0;c[s>>2]=w+1;a[(c[x>>2]|0)+w|0]=8;w=k+28|0;t=c[w>>2]|0;if((t|0)==0){A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=0;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=0;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=0;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=0;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=0;A=c[k+132>>2]|0;if((A|0)!=9){if((c[k+136>>2]|0)>1){B=4}else{B=(A|0)<2?4:0}}else{B=2}A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=B;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=3;c[m>>2]=113;break}A=(((c[t+44>>2]|0)!=0?2:0)|(c[t>>2]|0)!=0|((c[t+16>>2]|0)==0?0:4)|((c[t+28>>2]|0)==0?0:8)|((c[t+36>>2]|0)==0?0:16))&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=c[(c[w>>2]|0)+4>>2]&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=(c[(c[w>>2]|0)+4>>2]|0)>>>8&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=(c[(c[w>>2]|0)+4>>2]|0)>>>16&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=(c[(c[w>>2]|0)+4>>2]|0)>>>24&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=c[k+132>>2]|0;if((A|0)!=9){if((c[k+136>>2]|0)>1){C=4}else{C=(A|0)<2?4:0}}else{C=2}A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=C;A=c[(c[w>>2]|0)+12>>2]&255;t=c[s>>2]|0;c[s>>2]=t+1;a[(c[x>>2]|0)+t|0]=A;A=c[w>>2]|0;if((c[A+16>>2]|0)==0){D=A}else{t=c[A+20>>2]&255;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=t;t=(c[(c[w>>2]|0)+20>>2]|0)>>>8&255;A=c[s>>2]|0;c[s>>2]=A+1;a[(c[x>>2]|0)+A|0]=t;D=c[w>>2]|0}if((c[D+44>>2]|0)!=0){c[v>>2]=ui(c[v>>2]|0,c[x>>2]|0,c[s>>2]|0)|0}c[k+32>>2]=0;c[m>>2]=69;E=w;z=34}else{y=n;z=32}}while(0);if((z|0)==32){if((y|0)==69){E=k+28|0;z=34}else{F=y;z=55}}do{if((z|0)==34){n=c[E>>2]|0;if((c[n+16>>2]|0)==0){c[m>>2]=73;G=n;z=57;break}w=k+20|0;s=c[w>>2]|0;x=k+32|0;v=c[x>>2]|0;a:do{if(v>>>0<(c[n+20>>2]&65535)>>>0){t=k+12|0;A=e+48|0;H=k+8|0;I=e+20|0;J=v;K=s;L=n;M=s;while(1){if((K|0)==(c[t>>2]|0)){if((c[L+44>>2]|0)!=0&K>>>0>M>>>0){c[A>>2]=ui(c[A>>2]|0,(c[H>>2]|0)+M|0,K-M|0)|0}N=c[j>>2]|0;ki(N);O=N+20|0;P=c[O>>2]|0;Q=c[p>>2]|0;R=P>>>0>Q>>>0?Q:P;if((R|0)!=0?(P=N+16|0,Qi(c[l>>2]|0,c[P>>2]|0,R|0)|0,c[l>>2]=(c[l>>2]|0)+R,c[P>>2]=(c[P>>2]|0)+R,c[I>>2]=(c[I>>2]|0)+R,c[p>>2]=(c[p>>2]|0)-R,Q=c[O>>2]|0,c[O>>2]=Q-R,(Q|0)==(R|0)):0){c[P>>2]=c[N+8>>2]}S=c[w>>2]|0;if((S|0)==(c[t>>2]|0)){break}T=c[E>>2]|0;U=c[x>>2]|0;V=S;W=S}else{T=L;U=J;V=K;W=M}N=a[(c[T+16>>2]|0)+U|0]|0;c[w>>2]=V+1;a[(c[H>>2]|0)+V|0]=N;N=(c[x>>2]|0)+1|0;c[x>>2]=N;P=c[E>>2]|0;if(!(N>>>0<(c[P+20>>2]&65535)>>>0)){X=P;Y=W;break a}J=N;K=c[w>>2]|0;L=P;M=W}X=c[E>>2]|0;Y=S}else{X=n;Y=s}}while(0);if((c[X+44>>2]|0)!=0?(s=c[w>>2]|0,s>>>0>Y>>>0):0){n=e+48|0;c[n>>2]=ui(c[n>>2]|0,(c[k+8>>2]|0)+Y|0,s-Y|0)|0;Z=c[E>>2]|0}else{Z=X}if((c[x>>2]|0)==(c[Z+20>>2]|0)){c[x>>2]=0;c[m>>2]=73;G=Z;z=57;break}else{F=c[m>>2]|0;z=55;break}}}while(0);if((z|0)==55){if((F|0)==73){G=c[k+28>>2]|0;z=57}else{_=F;z=75}}do{if((z|0)==57){s=k+28|0;if((c[G+28>>2]|0)==0){c[m>>2]=91;$=s;z=77;break}n=k+20|0;v=c[n>>2]|0;M=k+12|0;L=e+48|0;K=k+8|0;J=e+20|0;H=k+32|0;t=v;I=v;while(1){if((t|0)==(c[M>>2]|0)){if((c[(c[s>>2]|0)+44>>2]|0)!=0&t>>>0>I>>>0){c[L>>2]=ui(c[L>>2]|0,(c[K>>2]|0)+I|0,t-I|0)|0}v=c[j>>2]|0;ki(v);A=v+20|0;P=c[A>>2]|0;N=c[p>>2]|0;R=P>>>0>N>>>0?N:P;if((R|0)!=0?(P=v+16|0,Qi(c[l>>2]|0,c[P>>2]|0,R|0)|0,c[l>>2]=(c[l>>2]|0)+R,c[P>>2]=(c[P>>2]|0)+R,c[J>>2]=(c[J>>2]|0)+R,c[p>>2]=(c[p>>2]|0)-R,N=c[A>>2]|0,c[A>>2]=N-R,(N|0)==(R|0)):0){c[P>>2]=c[v+8>>2]}v=c[n>>2]|0;if((v|0)==(c[M>>2]|0)){aa=v;ba=1;break}else{ca=v;da=v}}else{ca=t;da=I}v=c[H>>2]|0;c[H>>2]=v+1;P=a[(c[(c[s>>2]|0)+28>>2]|0)+v|0]|0;c[n>>2]=ca+1;a[(c[K>>2]|0)+ca|0]=P;if(P<<24>>24==0){aa=da;ba=P&255;break}t=c[n>>2]|0;I=da}if((c[(c[s>>2]|0)+44>>2]|0)!=0?(I=c[n>>2]|0,I>>>0>aa>>>0):0){c[L>>2]=ui(c[L>>2]|0,(c[K>>2]|0)+aa|0,I-aa|0)|0}if((ba|0)==0){c[H>>2]=0;c[m>>2]=91;$=s;z=77;break}else{_=c[m>>2]|0;z=75;break}}}while(0);if((z|0)==75){if((_|0)==91){$=k+28|0;z=77}else{ea=_;z=95}}do{if((z|0)==77){if((c[(c[$>>2]|0)+36>>2]|0)==0){c[m>>2]=103;fa=$;z=97;break}I=k+20|0;t=c[I>>2]|0;M=k+12|0;J=e+48|0;x=k+8|0;w=e+20|0;P=k+32|0;v=t;R=t;while(1){if((v|0)==(c[M>>2]|0)){if((c[(c[$>>2]|0)+44>>2]|0)!=0&v>>>0>R>>>0){c[J>>2]=ui(c[J>>2]|0,(c[x>>2]|0)+R|0,v-R|0)|0}t=c[j>>2]|0;ki(t);N=t+20|0;A=c[N>>2]|0;Q=c[p>>2]|0;O=A>>>0>Q>>>0?Q:A;if((O|0)!=0?(A=t+16|0,Qi(c[l>>2]|0,c[A>>2]|0,O|0)|0,c[l>>2]=(c[l>>2]|0)+O,c[A>>2]=(c[A>>2]|0)+O,c[w>>2]=(c[w>>2]|0)+O,c[p>>2]=(c[p>>2]|0)-O,Q=c[N>>2]|0,c[N>>2]=Q-O,(Q|0)==(O|0)):0){c[A>>2]=c[t+8>>2]}t=c[I>>2]|0;if((t|0)==(c[M>>2]|0)){ga=t;ha=1;break}else{ia=t;ja=t}}else{ia=v;ja=R}t=c[P>>2]|0;c[P>>2]=t+1;A=a[(c[(c[$>>2]|0)+36>>2]|0)+t|0]|0;c[I>>2]=ia+1;a[(c[x>>2]|0)+ia|0]=A;if(A<<24>>24==0){ga=ja;ha=A&255;break}v=c[I>>2]|0;R=ja}if((c[(c[$>>2]|0)+44>>2]|0)!=0?(R=c[I>>2]|0,R>>>0>ga>>>0):0){c[J>>2]=ui(c[J>>2]|0,(c[x>>2]|0)+ga|0,R-ga|0)|0}if((ha|0)==0){c[m>>2]=103;fa=$;z=97;break}else{ea=c[m>>2]|0;z=95;break}}}while(0);if((z|0)==95?(ea|0)==103:0){fa=k+28|0;z=97}do{if((z|0)==97){if((c[(c[fa>>2]|0)+44>>2]|0)==0){c[m>>2]=113;break}R=k+20|0;v=k+12|0;if((((c[R>>2]|0)+2|0)>>>0>(c[v>>2]|0)>>>0?(P=c[j>>2]|0,ki(P),M=P+20|0,w=c[M>>2]|0,s=c[p>>2]|0,H=w>>>0>s>>>0?s:w,(H|0)!=0):0)?(w=P+16|0,Qi(c[l>>2]|0,c[w>>2]|0,H|0)|0,c[l>>2]=(c[l>>2]|0)+H,c[w>>2]=(c[w>>2]|0)+H,s=e+20|0,c[s>>2]=(c[s>>2]|0)+H,c[p>>2]=(c[p>>2]|0)-H,s=c[M>>2]|0,c[M>>2]=s-H,(s|0)==(H|0)):0){c[w>>2]=c[P+8>>2]}P=c[R>>2]|0;if(!((P+2|0)>>>0>(c[v>>2]|0)>>>0)){v=e+48|0;w=c[v>>2]&255;c[R>>2]=P+1;H=k+8|0;a[(c[H>>2]|0)+P|0]=w;w=(c[v>>2]|0)>>>8&255;P=c[R>>2]|0;c[R>>2]=P+1;a[(c[H>>2]|0)+P|0]=w;c[v>>2]=ui(0,0,0)|0;c[m>>2]=113}}}while(0);v=k+20|0;if((c[v>>2]|0)==0){if((c[e+4>>2]|0)==0?!(((f<<1)-((f|0)>4?9:0)|0)>((r<<1)-((r|0)>4?9:0)|0)|o):0){c[e+24>>2]=c[139956>>2];h=-5;i=g;return h|0}}else{w=c[j>>2]|0;ki(w);P=w+20|0;H=c[P>>2]|0;R=c[p>>2]|0;s=H>>>0>R>>>0?R:H;if((s|0)==0){ka=R}else{R=w+16|0;Qi(c[l>>2]|0,c[R>>2]|0,s|0)|0;c[l>>2]=(c[l>>2]|0)+s;c[R>>2]=(c[R>>2]|0)+s;H=e+20|0;c[H>>2]=(c[H>>2]|0)+s;c[p>>2]=(c[p>>2]|0)-s;H=c[P>>2]|0;c[P>>2]=H-s;if((H|0)==(s|0)){c[R>>2]=c[w+8>>2]}ka=c[p>>2]|0}if((ka|0)==0){c[q>>2]=-1;h=0;i=g;return h|0}}w=(c[m>>2]|0)==666;R=(c[e+4>>2]|0)==0;if(w){if(R){z=119}else{c[e+24>>2]=c[139956>>2];h=-5;i=g;return h|0}}else{if(R){z=119}else{z=122}}do{if((z|0)==119){if((c[k+116>>2]|0)==0){if((f|0)!=0){if(w){break}else{z=122;break}}else{h=0;i=g;return h|0}}else{z=122}}}while(0);do{if((z|0)==122){w=c[k+136>>2]|0;b:do{if((w|0)==3){r=k+116|0;R=(f|0)==0;s=k+96|0;H=k+108|0;P=k+5792|0;M=k+5796|0;K=k+5784|0;L=k+(d[137080]<<2)+2440|0;n=k+5788|0;A=k+56|0;t=k+92|0;while(1){O=c[r>>2]|0;if(O>>>0<259){Th(k);Q=c[r>>2]|0;if(Q>>>0<259&R){z=196;break b}if((Q|0)==0){break}c[s>>2]=0;if(Q>>>0>2){la=Q;z=155}else{ma=c[H>>2]|0;z=170}}else{c[s>>2]=0;la=O;z=155}if((z|0)==155){z=0;O=c[H>>2]|0;if((O|0)!=0){Q=c[A>>2]|0;N=a[Q+(O+ -1)|0]|0;if((N<<24>>24==(a[Q+O|0]|0)?N<<24>>24==(a[Q+(O+1)|0]|0):0)?(na=Q+(O+2)|0,N<<24>>24==(a[na]|0)):0){oa=Q+(O+258)|0;Q=na;while(1){na=Q+1|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+2|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+3|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+4|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+5|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+6|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+7|0;if(!(N<<24>>24==(a[na]|0))){pa=na;break}na=Q+8|0;if(N<<24>>24==(a[na]|0)&na>>>0<oa>>>0){Q=na}else{pa=na;break}}Q=pa-oa+258|0;N=Q>>>0>la>>>0?la:Q;c[s>>2]=N;if(N>>>0>2){Q=N+253|0;N=c[P>>2]|0;b[(c[M>>2]|0)+(N<<1)>>1]=1;c[P>>2]=N+1;a[(c[K>>2]|0)+N|0]=Q;N=k+((d[137592+(Q&255)|0]|256)+1<<2)+148|0;b[N>>1]=(b[N>>1]|0)+1<<16>>16;b[L>>1]=(b[L>>1]|0)+1<<16>>16;N=(c[P>>2]|0)==((c[n>>2]|0)+ -1|0)|0;Q=c[s>>2]|0;c[r>>2]=(c[r>>2]|0)-Q;na=(c[H>>2]|0)+Q|0;c[H>>2]=na;c[s>>2]=0;qa=na;ra=N}else{ma=O;z=170}}else{ma=O;z=170}}else{ma=0;z=170}}if((z|0)==170){z=0;N=a[(c[A>>2]|0)+ma|0]|0;na=c[P>>2]|0;b[(c[M>>2]|0)+(na<<1)>>1]=0;c[P>>2]=na+1;a[(c[K>>2]|0)+na|0]=N;na=k+((N&255)<<2)+148|0;b[na>>1]=(b[na>>1]|0)+1<<16>>16;na=(c[P>>2]|0)==((c[n>>2]|0)+ -1|0)|0;c[r>>2]=(c[r>>2]|0)+ -1;N=(c[H>>2]|0)+1|0;c[H>>2]=N;qa=N;ra=na}if((ra|0)==0){continue}na=c[t>>2]|0;if((na|0)>-1){sa=(c[A>>2]|0)+na|0}else{sa=0}mi(k,sa,qa-na|0,0);c[t>>2]=c[H>>2];na=c[k>>2]|0;N=c[na+28>>2]|0;ki(N);Q=N+20|0;ta=c[Q>>2]|0;ua=na+16|0;va=c[ua>>2]|0;wa=ta>>>0>va>>>0?va:ta;if((wa|0)!=0?(ta=na+12|0,va=N+16|0,Qi(c[ta>>2]|0,c[va>>2]|0,wa|0)|0,c[ta>>2]=(c[ta>>2]|0)+wa,c[va>>2]=(c[va>>2]|0)+wa,ta=na+20|0,c[ta>>2]=(c[ta>>2]|0)+wa,c[ua>>2]=(c[ua>>2]|0)-wa,ua=c[Q>>2]|0,c[Q>>2]=ua-wa,(ua|0)==(wa|0)):0){c[va>>2]=c[N+8>>2]}if((c[(c[k>>2]|0)+16>>2]|0)==0){z=196;break b}}c[k+5812>>2]=0;if(o){r=c[t>>2]|0;if((r|0)>-1){xa=(c[A>>2]|0)+r|0}else{xa=0}mi(k,xa,(c[H>>2]|0)-r|0,1);c[t>>2]=c[H>>2];r=c[k>>2]|0;n=c[r+28>>2]|0;ki(n);K=n+20|0;M=c[K>>2]|0;s=r+16|0;L=c[s>>2]|0;R=M>>>0>L>>>0?L:M;if((R|0)!=0?(M=r+12|0,L=n+16|0,Qi(c[M>>2]|0,c[L>>2]|0,R|0)|0,c[M>>2]=(c[M>>2]|0)+R,c[L>>2]=(c[L>>2]|0)+R,M=r+20|0,c[M>>2]=(c[M>>2]|0)+R,c[s>>2]=(c[s>>2]|0)-R,s=c[K>>2]|0,c[K>>2]=s-R,(s|0)==(R|0)):0){c[L>>2]=c[n+8>>2]}ya=(c[(c[k>>2]|0)+16>>2]|0)==0?2:3;z=193;break}if((c[P>>2]|0)!=0){n=c[t>>2]|0;if((n|0)>-1){za=(c[A>>2]|0)+n|0}else{za=0}mi(k,za,(c[H>>2]|0)-n|0,0);c[t>>2]=c[H>>2];n=c[k>>2]|0;L=c[n+28>>2]|0;ki(L);R=L+20|0;s=c[R>>2]|0;K=n+16|0;M=c[K>>2]|0;r=s>>>0>M>>>0?M:s;if((r|0)!=0?(s=n+12|0,M=L+16|0,Qi(c[s>>2]|0,c[M>>2]|0,r|0)|0,c[s>>2]=(c[s>>2]|0)+r,c[M>>2]=(c[M>>2]|0)+r,s=n+20|0,c[s>>2]=(c[s>>2]|0)+r,c[K>>2]=(c[K>>2]|0)-r,K=c[R>>2]|0,c[R>>2]=K-r,(K|0)==(r|0)):0){c[M>>2]=c[L+8>>2]}if((c[(c[k>>2]|0)+16>>2]|0)==0){z=196}}}else if((w|0)==2){L=k+116|0;M=k+96|0;r=k+108|0;K=k+56|0;R=k+5792|0;s=k+5796|0;n=k+5784|0;N=k+5788|0;va=k+92|0;while(1){if((c[L>>2]|0)==0?(Th(k),(c[L>>2]|0)==0):0){break}c[M>>2]=0;wa=a[(c[K>>2]|0)+(c[r>>2]|0)|0]|0;ua=c[R>>2]|0;b[(c[s>>2]|0)+(ua<<1)>>1]=0;c[R>>2]=ua+1;a[(c[n>>2]|0)+ua|0]=wa;ua=k+((wa&255)<<2)+148|0;b[ua>>1]=(b[ua>>1]|0)+1<<16>>16;ua=(c[R>>2]|0)==((c[N>>2]|0)+ -1|0);c[L>>2]=(c[L>>2]|0)+ -1;wa=(c[r>>2]|0)+1|0;c[r>>2]=wa;if(!ua){continue}ua=c[va>>2]|0;if((ua|0)>-1){Aa=(c[K>>2]|0)+ua|0}else{Aa=0}mi(k,Aa,wa-ua|0,0);c[va>>2]=c[r>>2];ua=c[k>>2]|0;wa=c[ua+28>>2]|0;ki(wa);Q=wa+20|0;ta=c[Q>>2]|0;na=ua+16|0;Ba=c[na>>2]|0;Ca=ta>>>0>Ba>>>0?Ba:ta;if((Ca|0)!=0?(ta=ua+12|0,Ba=wa+16|0,Qi(c[ta>>2]|0,c[Ba>>2]|0,Ca|0)|0,c[ta>>2]=(c[ta>>2]|0)+Ca,c[Ba>>2]=(c[Ba>>2]|0)+Ca,ta=ua+20|0,c[ta>>2]=(c[ta>>2]|0)+Ca,c[na>>2]=(c[na>>2]|0)-Ca,na=c[Q>>2]|0,c[Q>>2]=na-Ca,(na|0)==(Ca|0)):0){c[Ba>>2]=c[wa+8>>2]}if((c[(c[k>>2]|0)+16>>2]|0)==0){z=196;break b}}if((f|0)!=0){c[k+5812>>2]=0;if(o){L=c[va>>2]|0;if((L|0)>-1){Da=(c[K>>2]|0)+L|0}else{Da=0}mi(k,Da,(c[r>>2]|0)-L|0,1);c[va>>2]=c[r>>2];L=c[k>>2]|0;N=c[L+28>>2]|0;ki(N);n=N+20|0;s=c[n>>2]|0;M=L+16|0;H=c[M>>2]|0;t=s>>>0>H>>>0?H:s;if((t|0)!=0?(s=L+12|0,H=N+16|0,Qi(c[s>>2]|0,c[H>>2]|0,t|0)|0,c[s>>2]=(c[s>>2]|0)+t,c[H>>2]=(c[H>>2]|0)+t,s=L+20|0,c[s>>2]=(c[s>>2]|0)+t,c[M>>2]=(c[M>>2]|0)-t,M=c[n>>2]|0,c[n>>2]=M-t,(M|0)==(t|0)):0){c[H>>2]=c[N+8>>2]}ya=(c[(c[k>>2]|0)+16>>2]|0)==0?2:3;z=193;break}if((c[R>>2]|0)!=0){N=c[va>>2]|0;if((N|0)>-1){Ea=(c[K>>2]|0)+N|0}else{Ea=0}mi(k,Ea,(c[r>>2]|0)-N|0,0);c[va>>2]=c[r>>2];N=c[k>>2]|0;H=c[N+28>>2]|0;ki(H);t=H+20|0;M=c[t>>2]|0;n=N+16|0;s=c[n>>2]|0;L=M>>>0>s>>>0?s:M;if((L|0)!=0?(M=N+12|0,s=H+16|0,Qi(c[M>>2]|0,c[s>>2]|0,L|0)|0,c[M>>2]=(c[M>>2]|0)+L,c[s>>2]=(c[s>>2]|0)+L,M=N+20|0,c[M>>2]=(c[M>>2]|0)+L,c[n>>2]=(c[n>>2]|0)-L,n=c[t>>2]|0,c[t>>2]=n-L,(n|0)==(L|0)):0){c[s>>2]=c[H+8>>2]}if((c[(c[k>>2]|0)+16>>2]|0)==0){z=196}}}else{z=196}}else{ya=nb[c[133968+((c[k+132>>2]|0)*12|0)>>2]&31](k,f)|0;z=193}}while(0);if((z|0)==193){if((ya&-2|0)==2){c[m>>2]=666}if((ya&-3|0)!=0){if((ya|0)!=1){break}}else{z=196}}if((z|0)==196){if((c[p>>2]|0)!=0){h=0;i=g;return h|0}c[q>>2]=-1;h=0;i=g;return h|0}if((f|0)==1){li(k)}else if(((f|0)!=5?(ji(k,0,0,0),(f|0)==3):0)?(w=c[k+76>>2]|0,x=c[k+68>>2]|0,b[x+(w+ -1<<1)>>1]=0,Li(x|0,0,(w<<1)+ -2|0)|0,(c[k+116>>2]|0)==0):0){c[k+108>>2]=0;c[k+92>>2]=0;c[k+5812>>2]=0}w=c[j>>2]|0;ki(w);x=w+20|0;J=c[x>>2]|0;I=c[p>>2]|0;H=J>>>0>I>>>0?I:J;if((H|0)==0){Fa=I}else{I=w+16|0;Qi(c[l>>2]|0,c[I>>2]|0,H|0)|0;c[l>>2]=(c[l>>2]|0)+H;c[I>>2]=(c[I>>2]|0)+H;J=e+20|0;c[J>>2]=(c[J>>2]|0)+H;c[p>>2]=(c[p>>2]|0)-H;J=c[x>>2]|0;c[x>>2]=J-H;if((J|0)==(H|0)){c[I>>2]=c[w+8>>2]}Fa=c[p>>2]|0}if((Fa|0)==0){c[q>>2]=-1;h=0;i=g;return h|0}}}while(0);if(!o){h=0;i=g;return h|0}q=k+24|0;m=c[q>>2]|0;if((m|0)<1){h=1;i=g;return h|0}w=e+48|0;I=c[w>>2]|0;if((m|0)==2){m=c[v>>2]|0;c[v>>2]=m+1;H=k+8|0;a[(c[H>>2]|0)+m|0]=I;m=(c[w>>2]|0)>>>8&255;J=c[v>>2]|0;c[v>>2]=J+1;a[(c[H>>2]|0)+J|0]=m;m=(c[w>>2]|0)>>>16&255;J=c[v>>2]|0;c[v>>2]=J+1;a[(c[H>>2]|0)+J|0]=m;m=(c[w>>2]|0)>>>24&255;J=c[v>>2]|0;c[v>>2]=J+1;a[(c[H>>2]|0)+J|0]=m;m=e+8|0;J=c[m>>2]&255;x=c[v>>2]|0;c[v>>2]=x+1;a[(c[H>>2]|0)+x|0]=J;J=(c[m>>2]|0)>>>8&255;x=c[v>>2]|0;c[v>>2]=x+1;a[(c[H>>2]|0)+x|0]=J;J=(c[m>>2]|0)>>>16&255;x=c[v>>2]|0;c[v>>2]=x+1;a[(c[H>>2]|0)+x|0]=J;J=(c[m>>2]|0)>>>24&255;m=c[v>>2]|0;c[v>>2]=m+1;a[(c[H>>2]|0)+m|0]=J}else{J=c[v>>2]|0;c[v>>2]=J+1;m=k+8|0;a[(c[m>>2]|0)+J|0]=I>>>24;J=c[v>>2]|0;c[v>>2]=J+1;a[(c[m>>2]|0)+J|0]=I>>>16;I=c[w>>2]|0;w=c[v>>2]|0;c[v>>2]=w+1;a[(c[m>>2]|0)+w|0]=I>>>8;w=c[v>>2]|0;c[v>>2]=w+1;a[(c[m>>2]|0)+w|0]=I}I=c[j>>2]|0;ki(I);w=I+20|0;m=c[w>>2]|0;J=c[p>>2]|0;H=m>>>0>J>>>0?J:m;if((H|0)!=0?(m=I+16|0,Qi(c[l>>2]|0,c[m>>2]|0,H|0)|0,c[l>>2]=(c[l>>2]|0)+H,c[m>>2]=(c[m>>2]|0)+H,J=e+20|0,c[J>>2]=(c[J>>2]|0)+H,c[p>>2]=(c[p>>2]|0)-H,J=c[w>>2]|0,c[w>>2]=J-H,(J|0)==(H|0)):0){c[m>>2]=c[I+8>>2]}I=c[q>>2]|0;if((I|0)>0){c[q>>2]=0-I}h=(c[v>>2]|0)==0|0;i=g;return h|0}}}while(0);c[e+24>>2]=c[139944>>2];h=-2;i=g;return h|0}function Xh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=i;e=(c[a+12>>2]|0)+ -5|0;f=e>>>0<65535?e:65535;e=a+116|0;g=a+108|0;h=a+92|0;j=a+44|0;k=a+56|0;while(1){l=c[e>>2]|0;if(l>>>0<2){Th(a);m=c[e>>2]|0;if((m|b|0)==0){n=0;o=35;break}if((m|0)==0){o=20;break}else{p=m}}else{p=l}l=(c[g>>2]|0)+p|0;c[g>>2]=l;c[e>>2]=0;m=c[h>>2]|0;q=m+f|0;if((l|0)!=0&l>>>0<q>>>0){r=l;s=m}else{c[e>>2]=l-q;c[g>>2]=q;if((m|0)>-1){t=(c[k>>2]|0)+m|0}else{t=0}mi(a,t,f,0);c[h>>2]=c[g>>2];m=c[a>>2]|0;q=c[m+28>>2]|0;ki(q);l=q+20|0;u=c[l>>2]|0;v=m+16|0;w=c[v>>2]|0;x=u>>>0>w>>>0?w:u;if((x|0)!=0?(u=m+12|0,w=q+16|0,Qi(c[u>>2]|0,c[w>>2]|0,x|0)|0,c[u>>2]=(c[u>>2]|0)+x,c[w>>2]=(c[w>>2]|0)+x,u=m+20|0,c[u>>2]=(c[u>>2]|0)+x,c[v>>2]=(c[v>>2]|0)-x,v=c[l>>2]|0,c[l>>2]=v-x,(v|0)==(x|0)):0){c[w>>2]=c[q+8>>2]}if((c[(c[a>>2]|0)+16>>2]|0)==0){n=0;o=35;break}r=c[g>>2]|0;s=c[h>>2]|0}q=r-s|0;if(q>>>0<((c[j>>2]|0)+ -262|0)>>>0){continue}if((s|0)>-1){y=(c[k>>2]|0)+s|0}else{y=0}mi(a,y,q,0);c[h>>2]=c[g>>2];q=c[a>>2]|0;w=c[q+28>>2]|0;ki(w);x=w+20|0;v=c[x>>2]|0;l=q+16|0;u=c[l>>2]|0;m=v>>>0>u>>>0?u:v;if((m|0)!=0?(v=q+12|0,u=w+16|0,Qi(c[v>>2]|0,c[u>>2]|0,m|0)|0,c[v>>2]=(c[v>>2]|0)+m,c[u>>2]=(c[u>>2]|0)+m,v=q+20|0,c[v>>2]=(c[v>>2]|0)+m,c[l>>2]=(c[l>>2]|0)-m,l=c[x>>2]|0,c[x>>2]=l-m,(l|0)==(m|0)):0){c[u>>2]=c[w+8>>2]}if((c[(c[a>>2]|0)+16>>2]|0)==0){n=0;o=35;break}}if((o|0)==20){c[a+5812>>2]=0;if((b|0)==4){b=c[h>>2]|0;if((b|0)>-1){z=(c[k>>2]|0)+b|0}else{z=0}mi(a,z,(c[g>>2]|0)-b|0,1);c[h>>2]=c[g>>2];b=c[a>>2]|0;z=c[b+28>>2]|0;ki(z);y=z+20|0;s=c[y>>2]|0;j=b+16|0;r=c[j>>2]|0;f=s>>>0>r>>>0?r:s;if((f|0)!=0?(s=b+12|0,r=z+16|0,Qi(c[s>>2]|0,c[r>>2]|0,f|0)|0,c[s>>2]=(c[s>>2]|0)+f,c[r>>2]=(c[r>>2]|0)+f,s=b+20|0,c[s>>2]=(c[s>>2]|0)+f,c[j>>2]=(c[j>>2]|0)-f,j=c[y>>2]|0,c[y>>2]=j-f,(j|0)==(f|0)):0){c[r>>2]=c[z+8>>2]}n=(c[(c[a>>2]|0)+16>>2]|0)==0?2:3;i=d;return n|0}z=c[g>>2]|0;r=c[h>>2]|0;if((z|0)>(r|0)){if((r|0)>-1){A=(c[k>>2]|0)+r|0}else{A=0}mi(a,A,z-r|0,0);c[h>>2]=c[g>>2];g=c[a>>2]|0;h=c[g+28>>2]|0;ki(h);r=h+20|0;z=c[r>>2]|0;A=g+16|0;k=c[A>>2]|0;f=z>>>0>k>>>0?k:z;if((f|0)!=0?(z=g+12|0,k=h+16|0,Qi(c[z>>2]|0,c[k>>2]|0,f|0)|0,c[z>>2]=(c[z>>2]|0)+f,c[k>>2]=(c[k>>2]|0)+f,z=g+20|0,c[z>>2]=(c[z>>2]|0)+f,c[A>>2]=(c[A>>2]|0)-f,A=c[r>>2]|0,c[r>>2]=A-f,(A|0)==(f|0)):0){c[k>>2]=c[h+8>>2]}if((c[(c[a>>2]|0)+16>>2]|0)==0){n=0;i=d;return n|0}}n=1;i=d;return n|0}else if((o|0)==35){i=d;return n|0}return 0}function Yh(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;g=i;h=e+116|0;j=(f|0)==0;k=e+72|0;l=e+88|0;m=e+108|0;n=e+56|0;o=e+84|0;p=e+68|0;q=e+52|0;r=e+64|0;s=e+44|0;t=e+96|0;u=e+112|0;v=e+5792|0;w=e+5796|0;x=e+5784|0;y=e+5788|0;z=e+128|0;A=e+92|0;while(1){if((c[h>>2]|0)>>>0<262){Th(e);B=c[h>>2]|0;if(B>>>0<262&j){C=0;D=41;break}if((B|0)==0){D=26;break}if(!(B>>>0>2)){D=9}else{D=6}}else{D=6}if((D|0)==6){D=0;B=c[m>>2]|0;E=((d[(c[n>>2]|0)+(B+2)|0]|0)^c[k>>2]<<c[l>>2])&c[o>>2];c[k>>2]=E;F=(c[p>>2]|0)+(E<<1)|0;E=b[F>>1]|0;b[(c[r>>2]|0)+((c[q>>2]&B)<<1)>>1]=E;G=E&65535;b[F>>1]=B;if(!(E<<16>>16==0)?!((B-G|0)>>>0>((c[s>>2]|0)+ -262|0)>>>0):0){B=_h(e,G)|0;c[t>>2]=B;H=B}else{D=9}}if((D|0)==9){D=0;H=c[t>>2]|0}do{if(H>>>0>2){B=H+253|0;G=(c[m>>2]|0)-(c[u>>2]|0)|0;E=c[v>>2]|0;b[(c[w>>2]|0)+(E<<1)>>1]=G;c[v>>2]=E+1;a[(c[x>>2]|0)+E|0]=B;E=e+((d[137592+(B&255)|0]|0|256)+1<<2)+148|0;b[E>>1]=(b[E>>1]|0)+1<<16>>16;E=G+65535&65535;if(E>>>0<256){I=E}else{I=(E>>>7)+256|0}E=e+((d[137080+I|0]|0)<<2)+2440|0;b[E>>1]=(b[E>>1]|0)+1<<16>>16;E=(c[v>>2]|0)==((c[y>>2]|0)+ -1|0)|0;G=c[t>>2]|0;B=(c[h>>2]|0)-G|0;c[h>>2]=B;if(!(G>>>0<=(c[z>>2]|0)>>>0&B>>>0>2)){B=(c[m>>2]|0)+G|0;c[m>>2]=B;c[t>>2]=0;F=c[n>>2]|0;J=d[F+B|0]|0;c[k>>2]=J;c[k>>2]=((d[F+(B+1)|0]|0)^J<<c[l>>2])&c[o>>2];K=B;L=E;break}B=G+ -1|0;c[t>>2]=B;G=c[l>>2]|0;J=c[n>>2]|0;F=c[o>>2]|0;M=c[p>>2]|0;N=c[q>>2]|0;O=c[r>>2]|0;P=B;B=c[m>>2]|0;Q=c[k>>2]|0;while(1){R=B+1|0;c[m>>2]=R;Q=((d[J+(B+3)|0]|0)^Q<<G)&F;c[k>>2]=Q;S=M+(Q<<1)|0;b[O+((N&R)<<1)>>1]=b[S>>1]|0;b[S>>1]=R;P=P+ -1|0;c[t>>2]=P;if((P|0)==0){break}else{B=R}}P=B+2|0;c[m>>2]=P;K=P;L=E}else{P=a[(c[n>>2]|0)+(c[m>>2]|0)|0]|0;N=c[v>>2]|0;b[(c[w>>2]|0)+(N<<1)>>1]=0;c[v>>2]=N+1;a[(c[x>>2]|0)+N|0]=P;N=e+((P&255)<<2)+148|0;b[N>>1]=(b[N>>1]|0)+1<<16>>16;N=(c[v>>2]|0)==((c[y>>2]|0)+ -1|0)|0;c[h>>2]=(c[h>>2]|0)+ -1;P=(c[m>>2]|0)+1|0;c[m>>2]=P;K=P;L=N}}while(0);if((L|0)==0){continue}N=c[A>>2]|0;if((N|0)>-1){T=(c[n>>2]|0)+N|0}else{T=0}mi(e,T,K-N|0,0);c[A>>2]=c[m>>2];N=c[e>>2]|0;P=c[N+28>>2]|0;ki(P);O=P+20|0;Q=c[O>>2]|0;M=N+16|0;F=c[M>>2]|0;G=Q>>>0>F>>>0?F:Q;if((G|0)!=0?(Q=N+12|0,F=P+16|0,Qi(c[Q>>2]|0,c[F>>2]|0,G|0)|0,c[Q>>2]=(c[Q>>2]|0)+G,c[F>>2]=(c[F>>2]|0)+G,Q=N+20|0,c[Q>>2]=(c[Q>>2]|0)+G,c[M>>2]=(c[M>>2]|0)-G,M=c[O>>2]|0,c[O>>2]=M-G,(M|0)==(G|0)):0){c[F>>2]=c[P+8>>2]}if((c[(c[e>>2]|0)+16>>2]|0)==0){C=0;D=41;break}}if((D|0)==26){K=c[m>>2]|0;c[e+5812>>2]=K>>>0<2?K:2;if((f|0)==4){f=c[A>>2]|0;if((f|0)>-1){U=(c[n>>2]|0)+f|0}else{U=0}mi(e,U,K-f|0,1);c[A>>2]=c[m>>2];f=c[e>>2]|0;U=c[f+28>>2]|0;ki(U);T=U+20|0;L=c[T>>2]|0;h=f+16|0;y=c[h>>2]|0;x=L>>>0>y>>>0?y:L;if((x|0)!=0?(L=f+12|0,y=U+16|0,Qi(c[L>>2]|0,c[y>>2]|0,x|0)|0,c[L>>2]=(c[L>>2]|0)+x,c[y>>2]=(c[y>>2]|0)+x,L=f+20|0,c[L>>2]=(c[L>>2]|0)+x,c[h>>2]=(c[h>>2]|0)-x,h=c[T>>2]|0,c[T>>2]=h-x,(h|0)==(x|0)):0){c[y>>2]=c[U+8>>2]}C=(c[(c[e>>2]|0)+16>>2]|0)==0?2:3;i=g;return C|0}if((c[v>>2]|0)!=0){v=c[A>>2]|0;if((v|0)>-1){V=(c[n>>2]|0)+v|0}else{V=0}mi(e,V,K-v|0,0);c[A>>2]=c[m>>2];m=c[e>>2]|0;A=c[m+28>>2]|0;ki(A);v=A+20|0;K=c[v>>2]|0;V=m+16|0;n=c[V>>2]|0;U=K>>>0>n>>>0?n:K;if((U|0)!=0?(K=m+12|0,n=A+16|0,Qi(c[K>>2]|0,c[n>>2]|0,U|0)|0,c[K>>2]=(c[K>>2]|0)+U,c[n>>2]=(c[n>>2]|0)+U,K=m+20|0,c[K>>2]=(c[K>>2]|0)+U,c[V>>2]=(c[V>>2]|0)-U,V=c[v>>2]|0,c[v>>2]=V-U,(V|0)==(U|0)):0){c[n>>2]=c[A+8>>2]}if((c[(c[e>>2]|0)+16>>2]|0)==0){C=0;i=g;return C|0}}C=1;i=g;return C|0}else if((D|0)==41){i=g;return C|0}return 0}function Zh(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;g=i;h=e+116|0;j=(f|0)==0;k=e+72|0;l=e+88|0;m=e+108|0;n=e+56|0;o=e+84|0;p=e+68|0;q=e+52|0;r=e+64|0;s=e+96|0;t=e+120|0;u=e+112|0;v=e+100|0;w=e+5792|0;x=e+5796|0;y=e+5784|0;z=e+5788|0;A=e+104|0;B=e+92|0;C=e+128|0;D=e+44|0;E=e+136|0;a:while(1){F=c[h>>2]|0;while(1){if(F>>>0<262){Th(e);G=c[h>>2]|0;if(G>>>0<262&j){H=0;I=57;break a}if((G|0)==0){I=40;break a}if(!(G>>>0>2)){c[t>>2]=c[s>>2];c[v>>2]=c[u>>2];c[s>>2]=2;J=2;I=16}else{I=8}}else{I=8}do{if((I|0)==8){I=0;G=c[m>>2]|0;K=((d[(c[n>>2]|0)+(G+2)|0]|0)^c[k>>2]<<c[l>>2])&c[o>>2];c[k>>2]=K;L=(c[p>>2]|0)+(K<<1)|0;K=b[L>>1]|0;b[(c[r>>2]|0)+((c[q>>2]&G)<<1)>>1]=K;M=K&65535;b[L>>1]=G;G=c[s>>2]|0;c[t>>2]=G;c[v>>2]=c[u>>2];c[s>>2]=2;if(!(K<<16>>16==0)){if(G>>>0<(c[C>>2]|0)>>>0){if(!(((c[m>>2]|0)-M|0)>>>0>((c[D>>2]|0)+ -262|0)>>>0)){K=_h(e,M)|0;c[s>>2]=K;if(K>>>0<6){if((c[E>>2]|0)!=1){if((K|0)!=3){J=K;I=16;break}if(!(((c[m>>2]|0)-(c[u>>2]|0)|0)>>>0>4096)){J=3;I=16;break}}c[s>>2]=2;J=2;I=16}else{J=K;I=16}}else{J=2;I=16}}else{N=G;O=2}}else{J=2;I=16}}}while(0);if((I|0)==16){I=0;N=c[t>>2]|0;O=J}if(!(N>>>0<3|O>>>0>N>>>0)){break}if((c[A>>2]|0)==0){c[A>>2]=1;c[m>>2]=(c[m>>2]|0)+1;G=(c[h>>2]|0)+ -1|0;c[h>>2]=G;F=G;continue}G=a[(c[n>>2]|0)+((c[m>>2]|0)+ -1)|0]|0;K=c[w>>2]|0;b[(c[x>>2]|0)+(K<<1)>>1]=0;c[w>>2]=K+1;a[(c[y>>2]|0)+K|0]=G;K=e+((G&255)<<2)+148|0;b[K>>1]=(b[K>>1]|0)+1<<16>>16;if((c[w>>2]|0)==((c[z>>2]|0)+ -1|0)){K=c[B>>2]|0;if((K|0)>-1){P=(c[n>>2]|0)+K|0}else{P=0}mi(e,P,(c[m>>2]|0)-K|0,0);c[B>>2]=c[m>>2];K=c[e>>2]|0;G=c[K+28>>2]|0;ki(G);M=G+20|0;L=c[M>>2]|0;Q=K+16|0;R=c[Q>>2]|0;S=L>>>0>R>>>0?R:L;if((S|0)!=0?(L=K+12|0,R=G+16|0,Qi(c[L>>2]|0,c[R>>2]|0,S|0)|0,c[L>>2]=(c[L>>2]|0)+S,c[R>>2]=(c[R>>2]|0)+S,L=K+20|0,c[L>>2]=(c[L>>2]|0)+S,c[Q>>2]=(c[Q>>2]|0)-S,Q=c[M>>2]|0,c[M>>2]=Q-S,(Q|0)==(S|0)):0){c[R>>2]=c[G+8>>2]}}c[m>>2]=(c[m>>2]|0)+1;G=(c[h>>2]|0)+ -1|0;c[h>>2]=G;if((c[(c[e>>2]|0)+16>>2]|0)==0){H=0;I=57;break a}else{F=G}}F=c[m>>2]|0;G=F+ -3+(c[h>>2]|0)|0;R=N+253|0;S=F+65535-(c[v>>2]|0)|0;F=c[w>>2]|0;b[(c[x>>2]|0)+(F<<1)>>1]=S;c[w>>2]=F+1;a[(c[y>>2]|0)+F|0]=R;F=e+((d[137592+(R&255)|0]|0|256)+1<<2)+148|0;b[F>>1]=(b[F>>1]|0)+1<<16>>16;F=S+65535&65535;if(F>>>0<256){T=F}else{T=(F>>>7)+256|0}F=e+((d[137080+T|0]|0)<<2)+2440|0;b[F>>1]=(b[F>>1]|0)+1<<16>>16;F=c[w>>2]|0;S=(c[z>>2]|0)+ -1|0;R=c[t>>2]|0;c[h>>2]=1-R+(c[h>>2]|0);Q=R+ -2|0;c[t>>2]=Q;R=c[m>>2]|0;M=Q;while(1){Q=R+1|0;c[m>>2]=Q;if(!(Q>>>0>G>>>0)){L=((d[(c[n>>2]|0)+(R+3)|0]|0)^c[k>>2]<<c[l>>2])&c[o>>2];c[k>>2]=L;K=(c[p>>2]|0)+(L<<1)|0;b[(c[r>>2]|0)+((c[q>>2]&Q)<<1)>>1]=b[K>>1]|0;b[K>>1]=Q}M=M+ -1|0;c[t>>2]=M;if((M|0)==0){break}else{R=Q}}c[A>>2]=0;c[s>>2]=2;M=R+2|0;c[m>>2]=M;if((F|0)!=(S|0)){continue}G=c[B>>2]|0;if((G|0)>-1){U=(c[n>>2]|0)+G|0}else{U=0}mi(e,U,M-G|0,0);c[B>>2]=c[m>>2];G=c[e>>2]|0;M=c[G+28>>2]|0;ki(M);Q=M+20|0;K=c[Q>>2]|0;L=G+16|0;V=c[L>>2]|0;W=K>>>0>V>>>0?V:K;if((W|0)!=0?(K=G+12|0,V=M+16|0,Qi(c[K>>2]|0,c[V>>2]|0,W|0)|0,c[K>>2]=(c[K>>2]|0)+W,c[V>>2]=(c[V>>2]|0)+W,K=G+20|0,c[K>>2]=(c[K>>2]|0)+W,c[L>>2]=(c[L>>2]|0)-W,L=c[Q>>2]|0,c[Q>>2]=L-W,(L|0)==(W|0)):0){c[V>>2]=c[M+8>>2]}if((c[(c[e>>2]|0)+16>>2]|0)==0){H=0;I=57;break}}if((I|0)==40){if((c[A>>2]|0)!=0){U=a[(c[n>>2]|0)+((c[m>>2]|0)+ -1)|0]|0;s=c[w>>2]|0;b[(c[x>>2]|0)+(s<<1)>>1]=0;c[w>>2]=s+1;a[(c[y>>2]|0)+s|0]=U;s=e+((U&255)<<2)+148|0;b[s>>1]=(b[s>>1]|0)+1<<16>>16;c[A>>2]=0}A=c[m>>2]|0;c[e+5812>>2]=A>>>0<2?A:2;if((f|0)==4){f=c[B>>2]|0;if((f|0)>-1){X=(c[n>>2]|0)+f|0}else{X=0}mi(e,X,A-f|0,1);c[B>>2]=c[m>>2];f=c[e>>2]|0;X=c[f+28>>2]|0;ki(X);s=X+20|0;U=c[s>>2]|0;y=f+16|0;x=c[y>>2]|0;t=U>>>0>x>>>0?x:U;if((t|0)!=0?(U=f+12|0,x=X+16|0,Qi(c[U>>2]|0,c[x>>2]|0,t|0)|0,c[U>>2]=(c[U>>2]|0)+t,c[x>>2]=(c[x>>2]|0)+t,U=f+20|0,c[U>>2]=(c[U>>2]|0)+t,c[y>>2]=(c[y>>2]|0)-t,y=c[s>>2]|0,c[s>>2]=y-t,(y|0)==(t|0)):0){c[x>>2]=c[X+8>>2]}H=(c[(c[e>>2]|0)+16>>2]|0)==0?2:3;i=g;return H|0}if((c[w>>2]|0)!=0){w=c[B>>2]|0;if((w|0)>-1){Y=(c[n>>2]|0)+w|0}else{Y=0}mi(e,Y,A-w|0,0);c[B>>2]=c[m>>2];m=c[e>>2]|0;B=c[m+28>>2]|0;ki(B);w=B+20|0;A=c[w>>2]|0;Y=m+16|0;n=c[Y>>2]|0;X=A>>>0>n>>>0?n:A;if((X|0)!=0?(A=m+12|0,n=B+16|0,Qi(c[A>>2]|0,c[n>>2]|0,X|0)|0,c[A>>2]=(c[A>>2]|0)+X,c[n>>2]=(c[n>>2]|0)+X,A=m+20|0,c[A>>2]=(c[A>>2]|0)+X,c[Y>>2]=(c[Y>>2]|0)-X,Y=c[w>>2]|0,c[w>>2]=Y-X,(Y|0)==(X|0)):0){c[n>>2]=c[B+8>>2]}if((c[(c[e>>2]|0)+16>>2]|0)==0){H=0;i=g;return H|0}}H=1;i=g;return H|0}else if((I|0)==57){i=g;return H|0}return 0}function _h(b,d){b=b|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;g=c[b+124>>2]|0;h=c[b+56>>2]|0;j=c[b+108>>2]|0;k=h+j|0;l=c[b+120>>2]|0;m=c[b+144>>2]|0;n=(c[b+44>>2]|0)+ -262|0;o=j>>>0>n>>>0?j-n|0:0;n=c[b+64>>2]|0;p=c[b+52>>2]|0;q=h+(j+258)|0;r=c[b+116>>2]|0;s=m>>>0>r>>>0?r:m;m=b+112|0;t=h+(j+1)|0;u=h+(j+2)|0;v=q;w=j+257|0;x=d;d=l;y=l>>>0<(c[b+140>>2]|0)>>>0?g:g>>>2;g=a[h+(l+j)|0]|0;b=a[h+(j+ -1+l)|0]|0;while(1){l=h+x|0;if((((a[h+(x+d)|0]|0)==g<<24>>24?(a[h+(d+ -1+x)|0]|0)==b<<24>>24:0)?(a[l]|0)==(a[k]|0):0)?(a[h+(x+1)|0]|0)==(a[t]|0):0){l=h+(x+2)|0;z=u;while(1){A=z+1|0;if((a[A]|0)!=(a[l+1|0]|0)){B=A;break}A=z+2|0;if((a[A]|0)!=(a[l+2|0]|0)){B=A;break}A=z+3|0;if((a[A]|0)!=(a[l+3|0]|0)){B=A;break}A=z+4|0;if((a[A]|0)!=(a[l+4|0]|0)){B=A;break}A=z+5|0;if((a[A]|0)!=(a[l+5|0]|0)){B=A;break}A=z+6|0;if((a[A]|0)!=(a[l+6|0]|0)){B=A;break}A=z+7|0;if((a[A]|0)!=(a[l+7|0]|0)){B=A;break}A=z+8|0;C=l+8|0;if((a[A]|0)==(a[C]|0)&A>>>0<q>>>0){l=C;z=A}else{B=A;break}}z=B-v|0;l=z+258|0;if((l|0)>(d|0)){c[m>>2]=x;if((l|0)>=(s|0)){D=l;E=20;break}F=l;G=a[h+(l+j)|0]|0;H=a[h+(w+z)|0]|0}else{F=d;G=g;H=b}}else{F=d;G=g;H=b}z=e[n+((x&p)<<1)>>1]|0;if(!(z>>>0>o>>>0)){D=F;E=20;break}l=y+ -1|0;if((l|0)==0){D=F;E=20;break}else{x=z;d=F;y=l;g=G;b=H}}if((E|0)==20){i=f;return(D>>>0>r>>>0?r:D)|0}return 0}function $h(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=c[a+28>>2]|0;if((e|0)==0){d=-2;i=b;return d|0}c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;c[e+28>>2]=0;c[a+20>>2]=0;c[a+8>>2]=0;c[a+24>>2]=0;f=c[e+8>>2]|0;if((f|0)!=0){c[a+48>>2]=f&1}c[e>>2]=0;c[e+4>>2]=0;c[e+12>>2]=0;c[e+20>>2]=32768;c[e+32>>2]=0;c[e+56>>2]=0;c[e+60>>2]=0;f=e+1328|0;c[e+108>>2]=f;c[e+80>>2]=f;c[e+76>>2]=f;c[e+7104>>2]=1;c[e+7108>>2]=-1;d=0;i=b;return d|0}function ai(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;if((a|0)==0){e=-2;i=d;return e|0}f=a+28|0;g=c[f>>2]|0;if((g|0)==0){e=-2;i=d;return e|0}if((b|0)<0){h=0-b|0;j=0}else{h=(b|0)<48?b&15:b;j=(b>>4)+1|0}if((h|0)!=0&(h+ -8|0)>>>0>7){e=-2;i=d;return e|0}b=g+52|0;k=c[b>>2]|0;l=g+36|0;if((k|0)!=0?(c[l>>2]|0)!=(h|0):0){hb[c[a+36>>2]&1](c[a+40>>2]|0,k);c[b>>2]=0}c[g+8>>2]=j;c[l>>2]=h;h=c[f>>2]|0;if((h|0)==0){e=-2;i=d;return e|0}c[h+40>>2]=0;c[h+44>>2]=0;c[h+48>>2]=0;c[h+28>>2]=0;c[a+20>>2]=0;c[a+8>>2]=0;c[a+24>>2]=0;f=c[h+8>>2]|0;if((f|0)!=0){c[a+48>>2]=f&1}c[h>>2]=0;c[h+4>>2]=0;c[h+12>>2]=0;c[h+20>>2]=32768;c[h+32>>2]=0;c[h+56>>2]=0;c[h+60>>2]=0;f=h+1328|0;c[h+108>>2]=f;c[h+80>>2]=f;c[h+76>>2]=f;c[h+7104>>2]=1;c[h+7108>>2]=-1;e=0;i=d;return e|0}function bi(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;if((d|0)==0){g=-6;i=f;return g|0}if(!((a[d]|0)==49&(e|0)==56)){g=-6;i=f;return g|0}if((b|0)==0){g=-2;i=f;return g|0}c[b+24>>2]=0;e=b+32|0;d=c[e>>2]|0;if((d|0)==0){c[e>>2]=17;c[b+40>>2]=0;h=17}else{h=d}d=b+36|0;if((c[d>>2]|0)==0){c[d>>2]=1}e=b+40|0;j=fb[h&31](c[e>>2]|0,1,7116)|0;if((j|0)==0){g=-4;i=f;return g|0}h=b+28|0;c[h>>2]=j;c[j+52>>2]=0;k=ai(b,15)|0;if((k|0)==0){g=0;i=f;return g|0}hb[c[d>>2]&1](c[e>>2]|0,j);c[h>>2]=0;g=k;i=f;return g|0}function ci(f,g){f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0,Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=0,Qd=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,ke=0,le=0,me=0,ne=0,oe=0,pe=0,qe=0,re=0,se=0,te=0,ue=0,ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=0,Ce=0,De=0,Ee=0,Fe=0,Ge=0,He=0,Ie=0,Je=0,Ke=0,Le=0,Me=0,Ne=0,Oe=0,Pe=0,Qe=0,Re=0,Se=0,Te=0,Ue=0,Ve=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0,af=0,bf=0,cf=0,df=0,ef=0,ff=0,gf=0,hf=0,jf=0,kf=0,lf=0,mf=0,nf=0,of=0,pf=0,qf=0,rf=0,sf=0,tf=0,uf=0,vf=0,wf=0,xf=0,yf=0,zf=0,Af=0,Bf=0,Cf=0,Df=0,Ef=0,Ff=0,Gf=0,Hf=0,If=0,Jf=0,Kf=0,Lf=0,Mf=0,Nf=0,Of=0,Pf=0,Qf=0,Rf=0,Sf=0,Tf=0,Uf=0,Vf=0,Wf=0,Xf=0,Yf=0,Zf=0,_f=0,$f=0,ag=0,bg=0,cg=0,dg=0,eg=0,fg=0,gg=0,hg=0,ig=0,jg=0,kg=0,lg=0,mg=0,ng=0,og=0,pg=0,qg=0,rg=0,sg=0,tg=0,ug=0,vg=0,wg=0,xg=0,yg=0,zg=0,Ag=0,Bg=0;h=i;i=i+16|0;j=h;if((f|0)==0){k=-2;i=h;return k|0}l=c[f+28>>2]|0;if((l|0)==0){k=-2;i=h;return k|0}m=f+12|0;n=c[m>>2]|0;if((n|0)==0){k=-2;i=h;return k|0}o=c[f>>2]|0;if((o|0)==0?(c[f+4>>2]|0)!=0:0){k=-2;i=h;return k|0}p=c[l>>2]|0;if((p|0)==11){c[l>>2]=12;q=12;r=c[f>>2]|0;s=c[m>>2]|0}else{q=p;r=o;s=n}n=f+16|0;o=c[n>>2]|0;p=f+4|0;t=c[p>>2]|0;u=l+56|0;v=l+60|0;w=l+8|0;x=l+24|0;y=j+1|0;z=l+16|0;A=l+32|0;B=f+24|0;C=l+36|0;D=l+20|0;E=f+48|0;F=l+64|0;G=l+12|0;H=(g+ -5|0)>>>0<2;I=l+4|0;J=l+76|0;K=l+84|0;L=l+80|0;M=l+88|0;N=(g|0)==6;O=l+7108|0;P=l+72|0;Q=l+7112|0;R=l+68|0;S=l+44|0;T=l+7104|0;U=l+48|0;V=l+52|0;W=l+40|0;X=f+20|0;Y=l+28|0;Z=l+96|0;_=l+100|0;$=l+92|0;aa=l+104|0;ba=l+1328|0;ca=l+108|0;da=l+112|0;ea=l+752|0;fa=l+624|0;ga=j+2|0;ha=j+3|0;ia=q;q=c[v>>2]|0;ja=t;ka=c[u>>2]|0;la=o;ma=r;r=o;o=s;s=0;a:while(1){b:do{switch(ia|0){case 9:{if(q>>>0<32){na=q;oa=ja;pa=ka;qa=ma;while(1){if((oa|0)==0){ra=na;sa=0;ta=pa;ua=la;va=qa;wa=r;xa=s;break a}ya=oa+ -1|0;za=qa+1|0;Aa=(d[qa]<<na)+pa|0;Ba=na+8|0;if(Ba>>>0<32){na=Ba;oa=ya;pa=Aa;qa=za}else{Ca=ya;Da=Aa;Ea=za;break}}}else{Ca=ja;Da=ka;Ea=ma}qa=Ha(Da|0)|0;c[x>>2]=qa;c[E>>2]=qa;c[l>>2]=10;Fa=0;Ga=Ca;Ia=0;Ja=Ea;Ka=121;break};case 3:{if(q>>>0<16){La=q;Ma=ja;Na=ka;Oa=ma;Ka=55}else{Pa=ja;Qa=ka;Ra=ma;Ka=57}break};case 2:{if(q>>>0<32){Sa=q;Ta=ja;Ua=ka;Va=ma;Ka=47}else{Wa=ja;Xa=ka;Ya=ma;Ka=49}break};case 27:{Za=q;_a=ja;$a=ka;ab=ma;bb=r;Ka=274;break};case 26:{if((c[w>>2]|0)!=0){if(q>>>0<32){qa=q;pa=ja;oa=ka;na=ma;while(1){if((pa|0)==0){ra=qa;sa=0;ta=oa;ua=la;va=na;wa=r;xa=s;break a}za=pa+ -1|0;Aa=na+1|0;ya=(d[na]<<qa)+oa|0;Ba=qa+8|0;if(Ba>>>0<32){qa=Ba;pa=za;oa=ya;na=Aa}else{cb=Ba;db=za;eb=ya;fb=Aa;break}}}else{cb=q;db=ja;eb=ka;fb=ma}na=r-la|0;c[X>>2]=(c[X>>2]|0)+na;c[Y>>2]=(c[Y>>2]|0)+na;if((r|0)!=(la|0)){oa=c[x>>2]|0;pa=o+(0-na)|0;if((c[z>>2]|0)==0){gb=ti(oa,pa,na)|0}else{gb=ui(oa,pa,na)|0}c[x>>2]=gb;c[E>>2]=gb}if((c[z>>2]|0)==0){hb=Ha(eb|0)|0}else{hb=eb}if((hb|0)==(c[x>>2]|0)){ib=0;jb=db;kb=0;lb=fb;mb=la}else{c[B>>2]=134600;c[l>>2]=29;nb=cb;ob=db;pb=eb;qb=la;rb=fb;sb=la;tb=o;ub=s;break b}}else{ib=q;jb=ja;kb=ka;lb=ma;mb=r}c[l>>2]=27;Za=ib;_a=jb;$a=kb;ab=lb;bb=mb;Ka=274;break};case 5:{vb=q;wb=ja;xb=ka;yb=ma;Ka=73;break};case 11:{zb=q;Ab=ja;Bb=ka;Cb=ma;Ka=124;break};case 12:{Db=q;Eb=ja;Fb=ka;Gb=ma;Ka=125;break};case 19:{Hb=q;Ib=ja;Jb=ka;Kb=ma;Lb=s;Ka=198;break};case 20:{Mb=q;Nb=ja;Ob=ka;Pb=ma;Qb=s;Ka=199;break};case 4:{Rb=q;Sb=ja;Tb=ka;Ub=ma;Ka=62;break};case 14:{Vb=q;Wb=ja;Xb=ka;Yb=ma;Ka=143;break};case 15:{Zb=q;_b=ja;$b=ka;ac=ma;Ka=144;break};case 6:{bc=q;cc=ja;dc=ka;ec=ma;Ka=83;break};case 7:{fc=q;gc=ja;hc=ka;ic=ma;Ka=96;break};case 8:{jc=q;kc=ja;lc=ka;mc=ma;Ka=109;break};case 30:{Ka=298;break a;break};case 28:{nc=q;oc=ja;pc=ka;qc=la;rc=ma;sc=1;Ka=282;break a;break};case 29:{ra=q;sa=ja;ta=ka;ua=la;va=ma;wa=r;xa=-3;break a;break};case 10:{Fa=q;Ga=ja;Ia=ka;Ja=ma;Ka=121;break};case 0:{na=c[w>>2]|0;if((na|0)==0){c[l>>2]=12;nb=q;ob=ja;pb=ka;qb=la;rb=ma;sb=r;tb=o;ub=s;break b}if(q>>>0<16){pa=q;oa=ja;qa=ka;Aa=ma;while(1){if((oa|0)==0){ra=pa;sa=0;ta=qa;ua=la;va=Aa;wa=r;xa=s;break a}ya=oa+ -1|0;za=Aa+1|0;Ba=(d[Aa]<<pa)+qa|0;tc=pa+8|0;if(tc>>>0<16){pa=tc;oa=ya;qa=Ba;Aa=za}else{uc=tc;vc=ya;wc=Ba;xc=za;break}}}else{uc=q;vc=ja;wc=ka;xc=ma}if((na&2|0)!=0&(wc|0)==35615){c[x>>2]=ui(0,0,0)|0;a[j]=31;a[y]=-117;c[x>>2]=ui(c[x>>2]|0,j,2)|0;c[l>>2]=1;nb=0;ob=vc;pb=0;qb=la;rb=xc;sb=r;tb=o;ub=s;break b}c[z>>2]=0;Aa=c[A>>2]|0;if((Aa|0)==0){yc=na}else{c[Aa+48>>2]=-1;yc=c[w>>2]|0}if((yc&1|0)!=0?((((wc<<8&65280)+(wc>>>8)|0)>>>0)%31|0|0)==0:0){if((wc&15|0)!=8){c[B>>2]=134144;c[l>>2]=29;nb=uc;ob=vc;pb=wc;qb=la;rb=xc;sb=r;tb=o;ub=s;break b}Aa=wc>>>4;qa=uc+ -4|0;oa=(Aa&15)+8|0;pa=c[C>>2]|0;if((pa|0)!=0){if(oa>>>0>pa>>>0){c[B>>2]=134176;c[l>>2]=29;nb=qa;ob=vc;pb=Aa;qb=la;rb=xc;sb=r;tb=o;ub=s;break b}}else{c[C>>2]=oa}c[D>>2]=1<<oa;oa=ti(0,0,0)|0;c[x>>2]=oa;c[E>>2]=oa;c[l>>2]=wc>>>12&2^11;nb=0;ob=vc;pb=0;qb=la;rb=xc;sb=r;tb=o;ub=s;break b}c[B>>2]=134120;c[l>>2]=29;nb=uc;ob=vc;pb=wc;qb=la;rb=xc;sb=r;tb=o;ub=s;break};case 21:{zc=c[P>>2]|0;Ac=q;Bc=ja;Cc=ka;Dc=ma;Ec=s;Ka=218;break};case 13:{oa=q&7;Aa=ka>>>oa;qa=q-oa|0;if(qa>>>0<32){oa=qa;pa=ja;za=Aa;Ba=ma;while(1){if((pa|0)==0){ra=oa;sa=0;ta=za;ua=la;va=Ba;wa=r;xa=s;break a}ya=pa+ -1|0;tc=Ba+1|0;Fc=(d[Ba]<<oa)+za|0;Gc=oa+8|0;if(Gc>>>0<32){oa=Gc;pa=ya;za=Fc;Ba=tc}else{Hc=Gc;Ic=ya;Jc=Fc;Kc=tc;break}}}else{Hc=qa;Ic=ja;Jc=Aa;Kc=ma}Ba=Jc&65535;if((Ba|0)==(Jc>>>16^65535|0)){c[F>>2]=Ba;c[l>>2]=14;if(N){nc=0;oc=Ic;pc=0;qc=la;rc=Kc;sc=s;Ka=282;break a}else{Vb=0;Wb=Ic;Xb=0;Yb=Kc;Ka=143;break b}}else{c[B>>2]=134280;c[l>>2]=29;nb=Hc;ob=Ic;pb=Jc;qb=la;rb=Kc;sb=r;tb=o;ub=s;break b}break};case 1:{if(q>>>0<16){Ba=q;za=ja;pa=ka;oa=ma;while(1){if((za|0)==0){ra=Ba;sa=0;ta=pa;ua=la;va=oa;wa=r;xa=s;break a}na=za+ -1|0;tc=oa+1|0;Fc=(d[oa]<<Ba)+pa|0;ya=Ba+8|0;if(ya>>>0<16){Ba=ya;za=na;pa=Fc;oa=tc}else{Lc=ya;Mc=na;Nc=Fc;Oc=tc;break}}}else{Lc=q;Mc=ja;Nc=ka;Oc=ma}c[z>>2]=Nc;if((Nc&255|0)!=8){c[B>>2]=134144;c[l>>2]=29;nb=Lc;ob=Mc;pb=Nc;qb=la;rb=Oc;sb=r;tb=o;ub=s;break b}if((Nc&57344|0)!=0){c[B>>2]=134200;c[l>>2]=29;nb=Lc;ob=Mc;pb=Nc;qb=la;rb=Oc;sb=r;tb=o;ub=s;break b}oa=c[A>>2]|0;if((oa|0)==0){Pc=Nc}else{c[oa>>2]=Nc>>>8&1;Pc=c[z>>2]|0}if((Pc&512|0)!=0){a[j]=Nc;a[y]=Nc>>>8;c[x>>2]=ui(c[x>>2]|0,j,2)|0}c[l>>2]=2;Sa=0;Ta=Mc;Ua=0;Va=Oc;Ka=47;break};case 18:{Qc=c[aa>>2]|0;Rc=q;Sc=ja;Tc=ka;Uc=ma;Vc=s;Ka=164;break};case 16:{if(q>>>0<14){oa=q;pa=ja;za=ka;Ba=ma;while(1){if((pa|0)==0){ra=oa;sa=0;ta=za;ua=la;va=Ba;wa=r;xa=s;break a}Aa=pa+ -1|0;qa=Ba+1|0;tc=(d[Ba]<<oa)+za|0;Fc=oa+8|0;if(Fc>>>0<14){oa=Fc;pa=Aa;za=tc;Ba=qa}else{Wc=Fc;Xc=Aa;Yc=tc;Zc=qa;break}}}else{Wc=q;Xc=ja;Yc=ka;Zc=ma}Ba=(Yc&31)+257|0;c[Z>>2]=Ba;za=(Yc>>>5&31)+1|0;c[_>>2]=za;c[$>>2]=(Yc>>>10&15)+4;pa=Yc>>>14;oa=Wc+ -14|0;if(Ba>>>0>286|za>>>0>30){c[B>>2]=134312;c[l>>2]=29;nb=oa;ob=Xc;pb=pa;qb=la;rb=Zc;sb=r;tb=o;ub=s;break b}else{c[aa>>2]=0;c[l>>2]=17;_c=0;$c=oa;ad=Xc;bd=pa;cd=Zc;Ka=154;break b}break};case 23:{dd=c[P>>2]|0;ed=q;fd=ja;gd=ka;hd=ma;id=s;Ka=237;break};case 17:{pa=c[aa>>2]|0;if(pa>>>0<(c[$>>2]|0)>>>0){_c=pa;$c=q;ad=ja;bd=ka;cd=ma;Ka=154}else{jd=pa;kd=q;ld=ja;md=ka;nd=ma;Ka=158}break};case 24:{od=q;pd=ja;qd=ka;rd=ma;sd=s;Ka=243;break};case 25:{if((la|0)==0){nc=q;oc=ja;pc=ka;qc=0;rc=ma;sc=s;Ka=282;break a}a[o]=c[F>>2];c[l>>2]=20;nb=q;ob=ja;pb=ka;qb=la+ -1|0;rb=ma;sb=r;tb=o+1|0;ub=s;break};case 22:{td=q;ud=ja;vd=ka;wd=ma;xd=s;Ka=225;break};default:{k=-2;Ka=299;break a}}}while(0);if((Ka|0)==47){while(1){Ka=0;if((Ta|0)==0){ra=Sa;sa=0;ta=Ua;ua=la;va=Va;wa=r;xa=s;break a}pa=Ta+ -1|0;oa=Va+1|0;za=(d[Va]<<Sa)+Ua|0;Ba=Sa+8|0;if(Ba>>>0<32){Sa=Ba;Ta=pa;Ua=za;Va=oa;Ka=47}else{Wa=pa;Xa=za;Ya=oa;Ka=49;break}}}else if((Ka|0)==121){Ka=0;if((c[G>>2]|0)==0){Ka=122;break}oa=ti(0,0,0)|0;c[x>>2]=oa;c[E>>2]=oa;c[l>>2]=11;zb=Fa;Ab=Ga;Bb=Ia;Cb=Ja;Ka=124}else if((Ka|0)==143){Ka=0;c[l>>2]=15;Zb=Vb;_b=Wb;$b=Xb;ac=Yb;Ka=144}else if((Ka|0)==154){while(1){Ka=0;if($c>>>0<3){oa=$c;za=ad;pa=bd;Ba=cd;while(1){if((za|0)==0){ra=oa;sa=0;ta=pa;ua=la;va=Ba;wa=r;xa=s;break a}qa=za+ -1|0;tc=Ba+1|0;Aa=(d[Ba]<<oa)+pa|0;Fc=oa+8|0;if(Fc>>>0<3){oa=Fc;za=qa;pa=Aa;Ba=tc}else{yd=Fc;zd=qa;Ad=Aa;Bd=tc;break}}}else{yd=$c;zd=ad;Ad=bd;Bd=cd}c[aa>>2]=_c+1;b[l+(e[134080+(_c<<1)>>1]<<1)+112>>1]=Ad&7;Ba=Ad>>>3;pa=yd+ -3|0;za=c[aa>>2]|0;if(za>>>0<(c[$>>2]|0)>>>0){_c=za;$c=pa;ad=zd;bd=Ba;cd=Bd;Ka=154}else{jd=za;kd=pa;ld=zd;md=Ba;nd=Bd;Ka=158;break}}}else if((Ka|0)==274){Ka=0;if((c[w>>2]|0)==0){Cd=Za;Dd=_a;Ed=$a;Fd=ab;Ka=281;break}if((c[z>>2]|0)==0){Cd=Za;Dd=_a;Ed=$a;Fd=ab;Ka=281;break}if(Za>>>0<32){Ba=Za;pa=_a;za=$a;oa=ab;while(1){if((pa|0)==0){ra=Ba;sa=0;ta=za;ua=la;va=oa;wa=bb;xa=s;break a}tc=pa+ -1|0;Aa=oa+1|0;qa=(d[oa]<<Ba)+za|0;Fc=Ba+8|0;if(Fc>>>0<32){Ba=Fc;pa=tc;za=qa;oa=Aa}else{Gd=Fc;Hd=tc;Id=qa;Jd=Aa;break}}}else{Gd=Za;Hd=_a;Id=$a;Jd=ab}if((Id|0)==(c[Y>>2]|0)){Cd=0;Dd=Hd;Ed=0;Fd=Jd;Ka=281;break}c[B>>2]=134624;c[l>>2]=29;nb=Gd;ob=Hd;pb=Id;qb=la;rb=Jd;sb=bb;tb=o;ub=s}do{if((Ka|0)==49){Ka=0;oa=c[A>>2]|0;if((oa|0)!=0){c[oa+4>>2]=Xa}if((c[z>>2]&512|0)!=0){a[j]=Xa;a[y]=Xa>>>8;a[ga]=Xa>>>16;a[ha]=Xa>>>24;c[x>>2]=ui(c[x>>2]|0,j,4)|0}c[l>>2]=3;La=0;Ma=Wa;Na=0;Oa=Ya;Ka=55}else if((Ka|0)==124){Ka=0;if(H){nc=zb;oc=Ab;pc=Bb;qc=la;rc=Cb;sc=s;Ka=282;break a}else{Db=zb;Eb=Ab;Fb=Bb;Gb=Cb;Ka=125}}else if((Ka|0)==144){Ka=0;oa=c[F>>2]|0;if((oa|0)==0){c[l>>2]=11;nb=Zb;ob=_b;pb=$b;qb=la;rb=ac;sb=r;tb=o;ub=s;break}za=oa>>>0>_b>>>0?_b:oa;oa=za>>>0>la>>>0?la:za;if((oa|0)==0){nc=Zb;oc=_b;pc=$b;qc=la;rc=ac;sc=s;Ka=282;break a}Qi(o|0,ac|0,oa|0)|0;c[F>>2]=(c[F>>2]|0)-oa;nb=Zb;ob=_b-oa|0;pb=$b;qb=la-oa|0;rb=ac+oa|0;sb=r;tb=o+oa|0;ub=s}else if((Ka|0)==158){Ka=0;if(jd>>>0<19){oa=jd;while(1){za=oa+1|0;b[l+(e[134080+(oa<<1)>>1]<<1)+112>>1]=0;if((za|0)==19){break}else{oa=za}}c[aa>>2]=19}c[ca>>2]=ba;c[J>>2]=ba;c[K>>2]=7;oa=gi(0,da,19,ca,K,ea)|0;if((oa|0)==0){c[aa>>2]=0;c[l>>2]=18;Qc=0;Rc=kd;Sc=ld;Tc=md;Uc=nd;Vc=0;Ka=164;break}else{c[B>>2]=134352;c[l>>2]=29;nb=kd;ob=ld;pb=md;qb=la;rb=nd;sb=r;tb=o;ub=oa;break}}}while(0);c:do{if((Ka|0)==55){while(1){Ka=0;if((Ma|0)==0){ra=La;sa=0;ta=Na;ua=la;va=Oa;wa=r;xa=s;break a}oa=Ma+ -1|0;za=Oa+1|0;pa=(d[Oa]<<La)+Na|0;Ba=La+8|0;if(Ba>>>0<16){La=Ba;Ma=oa;Na=pa;Oa=za;Ka=55}else{Pa=oa;Qa=pa;Ra=za;Ka=57;break}}}else if((Ka|0)==125){Ka=0;if((c[I>>2]|0)!=0){za=Db&7;c[l>>2]=26;nb=Db-za|0;ob=Eb;pb=Fb>>>za;qb=la;rb=Gb;sb=r;tb=o;ub=s;break}if(Db>>>0<3){za=Db;pa=Eb;oa=Fb;Ba=Gb;while(1){if((pa|0)==0){ra=za;sa=0;ta=oa;ua=la;va=Ba;wa=r;xa=s;break a}Aa=pa+ -1|0;qa=Ba+1|0;tc=(d[Ba]<<za)+oa|0;Fc=za+8|0;if(Fc>>>0<3){za=Fc;pa=Aa;oa=tc;Ba=qa}else{Kd=Fc;Ld=Aa;Md=tc;Nd=qa;break}}}else{Kd=Db;Ld=Eb;Md=Fb;Nd=Gb}c[I>>2]=Md&1;Ba=Md>>>1&3;if((Ba|0)==0){c[l>>2]=13}else if((Ba|0)==1){c[J>>2]=134648;c[K>>2]=9;c[L>>2]=136696;c[M>>2]=5;c[l>>2]=19;if(N){Ka=133;break a}}else if((Ba|0)==2){c[l>>2]=16}else if((Ba|0)==3){c[B>>2]=134256;c[l>>2]=29}nb=Kd+ -3|0;ob=Ld;pb=Md>>>3;qb=la;rb=Nd;sb=r;tb=o;ub=s}else if((Ka|0)==164){Ka=0;Ba=c[Z>>2]|0;oa=c[_>>2]|0;do{if(Qc>>>0<(oa+Ba|0)>>>0){pa=Qc;za=oa;qa=Ba;tc=Rc;Aa=Sc;Fc=Tc;na=Uc;d:while(1){ya=(1<<c[K>>2])+ -1|0;Gc=ya&Fc;Od=c[J>>2]|0;Pd=d[Od+(Gc<<2)+1|0]|0;if(Pd>>>0>tc>>>0){Qd=tc;Rd=Aa;Sd=Fc;Td=na;while(1){if((Rd|0)==0){ra=Qd;sa=0;ta=Sd;ua=la;va=Td;wa=r;xa=Vc;break a}Ud=Rd+ -1|0;Vd=Td+1|0;Wd=(d[Td]<<Qd)+Sd|0;Xd=Qd+8|0;Yd=ya&Wd;Zd=d[Od+(Yd<<2)+1|0]|0;if(Zd>>>0>Xd>>>0){Qd=Xd;Rd=Ud;Sd=Wd;Td=Vd}else{_d=Zd;$d=Yd;ae=Xd;be=Ud;ce=Wd;de=Vd;break}}}else{_d=Pd;$d=Gc;ae=tc;be=Aa;ce=Fc;de=na}Td=b[Od+($d<<2)+2>>1]|0;e:do{if((Td&65535)<16){c[aa>>2]=pa+1;b[l+(pa<<1)+112>>1]=Td;ee=ae-_d|0;fe=be;ge=ce>>>_d;he=de}else{if(Td<<16>>16==16){Sd=_d+2|0;if(ae>>>0<Sd>>>0){Rd=ae;Qd=be;ya=ce;Vd=de;while(1){if((Qd|0)==0){ra=Rd;sa=0;ta=ya;ua=la;va=Vd;wa=r;xa=Vc;break a}Wd=Qd+ -1|0;Ud=Vd+1|0;Xd=(d[Vd]<<Rd)+ya|0;Yd=Rd+8|0;if(Yd>>>0<Sd>>>0){Rd=Yd;Qd=Wd;ya=Xd;Vd=Ud}else{ie=Yd;je=Wd;ke=Xd;le=Ud;break}}}else{ie=ae;je=be;ke=ce;le=de}me=ke>>>_d;ne=ie-_d|0;if((pa|0)==0){Ka=178;break d}oe=ne+ -2|0;pe=(me&3)+3|0;qe=je;re=me>>>2;se=b[l+(pa+ -1<<1)+112>>1]|0;te=le}else if(Td<<16>>16==17){Vd=_d+3|0;if(ae>>>0<Vd>>>0){ya=ae;Qd=be;Rd=ce;Sd=de;while(1){if((Qd|0)==0){ra=ya;sa=0;ta=Rd;ua=la;va=Sd;wa=r;xa=Vc;break a}Ud=Qd+ -1|0;Xd=Sd+1|0;Wd=(d[Sd]<<ya)+Rd|0;Yd=ya+8|0;if(Yd>>>0<Vd>>>0){ya=Yd;Qd=Ud;Rd=Wd;Sd=Xd}else{ue=Yd;ve=Ud;we=Wd;xe=Xd;break}}}else{ue=ae;ve=be;we=ce;xe=de}Sd=we>>>_d;oe=-3-_d+ue|0;pe=(Sd&7)+3|0;qe=ve;re=Sd>>>3;se=0;te=xe}else{Sd=_d+7|0;if(ae>>>0<Sd>>>0){Rd=ae;Qd=be;ya=ce;Vd=de;while(1){if((Qd|0)==0){ra=Rd;sa=0;ta=ya;ua=la;va=Vd;wa=r;xa=Vc;break a}Xd=Qd+ -1|0;Wd=Vd+1|0;Ud=(d[Vd]<<Rd)+ya|0;Yd=Rd+8|0;if(Yd>>>0<Sd>>>0){Rd=Yd;Qd=Xd;ya=Ud;Vd=Wd}else{ye=Yd;ze=Xd;Ae=Ud;Be=Wd;break}}}else{ye=ae;ze=be;Ae=ce;Be=de}Vd=Ae>>>_d;oe=-7-_d+ye|0;pe=(Vd&127)+11|0;qe=ze;re=Vd>>>7;se=0;te=Be}if((pa+pe|0)>>>0>(za+qa|0)>>>0){Ka=187;break d}else{Ce=pa;De=pe}while(1){Vd=De+ -1|0;c[aa>>2]=Ce+1;b[l+(Ce<<1)+112>>1]=se;if((Vd|0)==0){ee=oe;fe=qe;ge=re;he=te;break e}Ce=c[aa>>2]|0;De=Vd}}}while(0);Td=c[aa>>2]|0;Ee=c[Z>>2]|0;Od=c[_>>2]|0;if(Td>>>0<(Od+Ee|0)>>>0){pa=Td;za=Od;qa=Ee;tc=ee;Aa=fe;Fc=ge;na=he}else{Ka=190;break}}if((Ka|0)==178){Ka=0;c[B>>2]=134384;c[l>>2]=29;nb=ne;ob=je;pb=me;qb=la;rb=le;sb=r;tb=o;ub=Vc;break c}else if((Ka|0)==187){Ka=0;c[B>>2]=134384;c[l>>2]=29;nb=oe;ob=qe;pb=re;qb=la;rb=te;sb=r;tb=o;ub=Vc;break c}else if((Ka|0)==190){Ka=0;if((c[l>>2]|0)==29){nb=ee;ob=fe;pb=ge;qb=la;rb=he;sb=r;tb=o;ub=Vc;break c}else{Fe=Ee;Ge=ee;He=fe;Ie=ge;Je=he;break}}}else{Fe=Ba;Ge=Rc;He=Sc;Ie=Tc;Je=Uc}}while(0);if((b[fa>>1]|0)==0){c[B>>2]=134416;c[l>>2]=29;nb=Ge;ob=He;pb=Ie;qb=la;rb=Je;sb=r;tb=o;ub=Vc;break}c[ca>>2]=ba;c[J>>2]=ba;c[K>>2]=9;Ba=gi(1,da,Fe,ca,K,ea)|0;if((Ba|0)!=0){c[B>>2]=134456;c[l>>2]=29;nb=Ge;ob=He;pb=Ie;qb=la;rb=Je;sb=r;tb=o;ub=Ba;break}c[L>>2]=c[ca>>2];c[M>>2]=6;Ba=gi(2,l+(c[Z>>2]<<1)+112|0,c[_>>2]|0,ca,M,ea)|0;if((Ba|0)==0){c[l>>2]=19;if(N){nc=Ge;oc=He;pc=Ie;qc=la;rc=Je;sc=0;Ka=282;break a}else{Hb=Ge;Ib=He;Jb=Ie;Kb=Je;Lb=0;Ka=198;break}}else{c[B>>2]=134488;c[l>>2]=29;nb=Ge;ob=He;pb=Ie;qb=la;rb=Je;sb=r;tb=o;ub=Ba;break}}}while(0);if((Ka|0)==57){Ka=0;Ba=c[A>>2]|0;if((Ba|0)!=0){c[Ba+8>>2]=Qa&255;c[Ba+12>>2]=Qa>>>8}if((c[z>>2]&512|0)!=0){a[j]=Qa;a[y]=Qa>>>8;c[x>>2]=ui(c[x>>2]|0,j,2)|0}c[l>>2]=4;Rb=0;Sb=Pa;Tb=0;Ub=Ra;Ka=62}else if((Ka|0)==198){Ka=0;c[l>>2]=20;Mb=Hb;Nb=Ib;Ob=Jb;Pb=Kb;Qb=Lb;Ka=199}do{if((Ka|0)==62){Ka=0;Ba=c[z>>2]|0;if((Ba&1024|0)==0){oa=c[A>>2]|0;if((oa|0)==0){Ke=Rb;Le=Sb;Me=Tb;Ne=Ub}else{c[oa+16>>2]=0;Ke=Rb;Le=Sb;Me=Tb;Ne=Ub}}else{if(Rb>>>0<16){oa=Rb;na=Sb;Fc=Tb;Aa=Ub;while(1){if((na|0)==0){ra=oa;sa=0;ta=Fc;ua=la;va=Aa;wa=r;xa=s;break a}tc=na+ -1|0;qa=Aa+1|0;za=(d[Aa]<<oa)+Fc|0;pa=oa+8|0;if(pa>>>0<16){oa=pa;na=tc;Fc=za;Aa=qa}else{Oe=tc;Pe=za;Qe=qa;break}}}else{Oe=Sb;Pe=Tb;Qe=Ub}c[F>>2]=Pe;Aa=c[A>>2]|0;if((Aa|0)==0){Re=Ba}else{c[Aa+20>>2]=Pe;Re=c[z>>2]|0}if((Re&512|0)==0){Ke=0;Le=Oe;Me=0;Ne=Qe}else{a[j]=Pe;a[y]=Pe>>>8;c[x>>2]=ui(c[x>>2]|0,j,2)|0;Ke=0;Le=Oe;Me=0;Ne=Qe}}c[l>>2]=5;vb=Ke;wb=Le;xb=Me;yb=Ne;Ka=73}else if((Ka|0)==199){Ka=0;if(Nb>>>0>5&la>>>0>257){c[m>>2]=o;c[n>>2]=la;c[f>>2]=Pb;c[p>>2]=Nb;c[u>>2]=Ob;c[v>>2]=Mb;vi(f,r);Aa=c[m>>2]|0;Fc=c[n>>2]|0;na=c[f>>2]|0;oa=c[p>>2]|0;qa=c[u>>2]|0;za=c[v>>2]|0;if((c[l>>2]|0)!=11){nb=za;ob=oa;pb=qa;qb=Fc;rb=na;sb=r;tb=Aa;ub=Qb;break}c[O>>2]=-1;nb=za;ob=oa;pb=qa;qb=Fc;rb=na;sb=r;tb=Aa;ub=Qb;break}c[O>>2]=0;Aa=(1<<c[K>>2])+ -1|0;na=Aa&Ob;Fc=c[J>>2]|0;qa=a[Fc+(na<<2)+1|0]|0;oa=qa&255;if(oa>>>0>Mb>>>0){za=Mb;tc=Nb;pa=Ob;Od=Pb;while(1){if((tc|0)==0){ra=za;sa=0;ta=pa;ua=la;va=Od;wa=r;xa=Qb;break a}Td=tc+ -1|0;Gc=Od+1|0;Pd=(d[Od]<<za)+pa|0;Vd=za+8|0;ya=Aa&Pd;Qd=a[Fc+(ya<<2)+1|0]|0;Rd=Qd&255;if(Rd>>>0>Vd>>>0){za=Vd;tc=Td;pa=Pd;Od=Gc}else{Se=Qd;Te=Rd;Ue=ya;Ve=Vd;We=Td;Xe=Pd;Ye=Gc;break}}}else{Se=qa;Te=oa;Ue=na;Ve=Mb;We=Nb;Xe=Ob;Ye=Pb}Od=a[Fc+(Ue<<2)|0]|0;pa=b[Fc+(Ue<<2)+2>>1]|0;tc=Od&255;if(!(Od<<24>>24==0)){if((tc&240|0)==0){za=pa&65535;Aa=(1<<Te+tc)+ -1|0;tc=((Xe&Aa)>>>Te)+za|0;Ba=a[Fc+(tc<<2)+1|0]|0;if(((Ba&255)+Te|0)>>>0>Ve>>>0){Gc=Ve;Pd=We;Td=Xe;Vd=Ye;while(1){if((Pd|0)==0){ra=Gc;sa=0;ta=Td;ua=la;va=Vd;wa=r;xa=Qb;break a}ya=Pd+ -1|0;Rd=Vd+1|0;Qd=(d[Vd]<<Gc)+Td|0;Sd=Gc+8|0;Wd=((Qd&Aa)>>>Te)+za|0;Ud=a[Fc+(Wd<<2)+1|0]|0;if(((Ud&255)+Te|0)>>>0>Sd>>>0){Gc=Sd;Pd=ya;Td=Qd;Vd=Rd}else{Ze=Wd;_e=Ud;$e=Sd;af=ya;bf=Qd;cf=Rd;break}}}else{Ze=tc;_e=Ba;$e=Ve;af=We;bf=Xe;cf=Ye}Vd=b[Fc+(Ze<<2)+2>>1]|0;Td=a[Fc+(Ze<<2)|0]|0;c[O>>2]=Te;df=Te;ef=$e-Te|0;ff=af;gf=Td;hf=_e;jf=Vd;kf=bf>>>Te;lf=cf}else{df=0;ef=Ve;ff=We;gf=Od;hf=Se;jf=pa;kf=Xe;lf=Ye}}else{df=0;ef=Ve;ff=We;gf=0;hf=Se;jf=pa;kf=Xe;lf=Ye}Vd=hf&255;Td=kf>>>Vd;Pd=ef-Vd|0;c[O>>2]=df+Vd;c[F>>2]=jf&65535;Vd=gf&255;if(gf<<24>>24==0){c[l>>2]=25;nb=Pd;ob=ff;pb=Td;qb=la;rb=lf;sb=r;tb=o;ub=Qb;break}if((Vd&32|0)!=0){c[O>>2]=-1;c[l>>2]=11;nb=Pd;ob=ff;pb=Td;qb=la;rb=lf;sb=r;tb=o;ub=Qb;break}if((Vd&64|0)==0){Gc=Vd&15;c[P>>2]=Gc;c[l>>2]=21;zc=Gc;Ac=Pd;Bc=ff;Cc=Td;Dc=lf;Ec=Qb;Ka=218;break}else{c[B>>2]=134512;c[l>>2]=29;nb=Pd;ob=ff;pb=Td;qb=la;rb=lf;sb=r;tb=o;ub=Qb;break}}}while(0);if((Ka|0)==73){Ka=0;Td=c[z>>2]|0;if((Td&1024|0)!=0){Pd=c[F>>2]|0;Gc=Pd>>>0>wb>>>0?wb:Pd;if((Gc|0)==0){mf=Pd;nf=wb;of=yb}else{Vd=c[A>>2]|0;if((Vd|0)!=0?(za=c[Vd+16>>2]|0,(za|0)!=0):0){Aa=(c[Vd+20>>2]|0)-Pd|0;Pd=c[Vd+24>>2]|0;Qi(za+Aa|0,yb|0,((Aa+Gc|0)>>>0>Pd>>>0?Pd-Aa|0:Gc)|0)|0;pf=c[z>>2]|0}else{pf=Td}if((pf&512|0)!=0){c[x>>2]=ui(c[x>>2]|0,yb,Gc)|0}Td=(c[F>>2]|0)-Gc|0;c[F>>2]=Td;mf=Td;nf=wb-Gc|0;of=yb+Gc|0}if((mf|0)==0){qf=nf;rf=of}else{nc=vb;oc=nf;pc=xb;qc=la;rc=of;sc=s;Ka=282;break}}else{qf=wb;rf=yb}c[F>>2]=0;c[l>>2]=6;bc=vb;cc=qf;dc=xb;ec=rf;Ka=83}else if((Ka|0)==218){Ka=0;if((zc|0)==0){sf=c[F>>2]|0;tf=Ac;uf=Bc;vf=Cc;wf=Dc}else{if(Ac>>>0<zc>>>0){Gc=Ac;Td=Bc;Aa=Cc;Pd=Dc;while(1){if((Td|0)==0){ra=Gc;sa=0;ta=Aa;ua=la;va=Pd;wa=r;xa=Ec;break a}za=Td+ -1|0;Vd=Pd+1|0;na=(d[Pd]<<Gc)+Aa|0;oa=Gc+8|0;if(oa>>>0<zc>>>0){Gc=oa;Td=za;Aa=na;Pd=Vd}else{xf=oa;yf=za;zf=na;Af=Vd;break}}}else{xf=Ac;yf=Bc;zf=Cc;Af=Dc}Pd=(c[F>>2]|0)+((1<<zc)+ -1&zf)|0;c[F>>2]=Pd;c[O>>2]=(c[O>>2]|0)+zc;sf=Pd;tf=xf-zc|0;uf=yf;vf=zf>>>zc;wf=Af}c[Q>>2]=sf;c[l>>2]=22;td=tf;ud=uf;vd=vf;wd=wf;xd=Ec;Ka=225}do{if((Ka|0)==83){Ka=0;if((c[z>>2]&2048|0)==0){Pd=c[A>>2]|0;if((Pd|0)==0){Bf=cc;Cf=ec}else{c[Pd+28>>2]=0;Bf=cc;Cf=ec}}else{if((cc|0)==0){nc=bc;oc=0;pc=dc;qc=la;rc=ec;sc=s;Ka=282;break a}else{Df=0}while(1){Ef=Df+1|0;Pd=a[ec+Df|0]|0;Aa=c[A>>2]|0;if(((Aa|0)!=0?(Td=c[Aa+28>>2]|0,(Td|0)!=0):0)?(Gc=c[F>>2]|0,Gc>>>0<(c[Aa+32>>2]|0)>>>0):0){c[F>>2]=Gc+1;a[Td+Gc|0]=Pd}Ff=Pd<<24>>24!=0;if(Ff&Ef>>>0<cc>>>0){Df=Ef}else{break}}if((c[z>>2]&512|0)!=0){c[x>>2]=ui(c[x>>2]|0,ec,Ef)|0}pa=cc-Ef|0;Od=ec+Ef|0;if(Ff){nc=bc;oc=pa;pc=dc;qc=la;rc=Od;sc=s;Ka=282;break a}else{Bf=pa;Cf=Od}}c[F>>2]=0;c[l>>2]=7;fc=bc;gc=Bf;hc=dc;ic=Cf;Ka=96}else if((Ka|0)==225){Ka=0;Od=(1<<c[M>>2])+ -1|0;pa=Od&vd;Fc=c[L>>2]|0;Ba=a[Fc+(pa<<2)+1|0]|0;tc=Ba&255;if(tc>>>0>td>>>0){Pd=td;Gc=ud;Td=vd;Aa=wd;while(1){if((Gc|0)==0){ra=Pd;sa=0;ta=Td;ua=la;va=Aa;wa=r;xa=xd;break a}Vd=Gc+ -1|0;na=Aa+1|0;za=(d[Aa]<<Pd)+Td|0;oa=Pd+8|0;qa=Od&za;Rd=a[Fc+(qa<<2)+1|0]|0;Qd=Rd&255;if(Qd>>>0>oa>>>0){Pd=oa;Gc=Vd;Td=za;Aa=na}else{Gf=Rd;Hf=Qd;If=qa;Jf=oa;Kf=Vd;Lf=za;Mf=na;break}}}else{Gf=Ba;Hf=tc;If=pa;Jf=td;Kf=ud;Lf=vd;Mf=wd}Aa=a[Fc+(If<<2)|0]|0;Td=b[Fc+(If<<2)+2>>1]|0;Gc=Aa&255;if((Gc&240|0)==0){Pd=Td&65535;Od=(1<<Hf+Gc)+ -1|0;Gc=((Lf&Od)>>>Hf)+Pd|0;na=a[Fc+(Gc<<2)+1|0]|0;if(((na&255)+Hf|0)>>>0>Jf>>>0){za=Jf;Vd=Kf;oa=Lf;qa=Mf;while(1){if((Vd|0)==0){ra=za;sa=0;ta=oa;ua=la;va=qa;wa=r;xa=xd;break a}Qd=Vd+ -1|0;Rd=qa+1|0;ya=(d[qa]<<za)+oa|0;Sd=za+8|0;Ud=((ya&Od)>>>Hf)+Pd|0;Wd=a[Fc+(Ud<<2)+1|0]|0;if(((Wd&255)+Hf|0)>>>0>Sd>>>0){za=Sd;Vd=Qd;oa=ya;qa=Rd}else{Nf=Ud;Of=Wd;Pf=Sd;Qf=Qd;Rf=ya;Sf=Rd;break}}}else{Nf=Gc;Of=na;Pf=Jf;Qf=Kf;Rf=Lf;Sf=Mf}qa=b[Fc+(Nf<<2)+2>>1]|0;oa=a[Fc+(Nf<<2)|0]|0;Vd=(c[O>>2]|0)+Hf|0;c[O>>2]=Vd;Tf=Vd;Uf=Pf-Hf|0;Vf=Qf;Wf=oa;Xf=Of;Yf=qa;Zf=Rf>>>Hf;_f=Sf}else{Tf=c[O>>2]|0;Uf=Jf;Vf=Kf;Wf=Aa;Xf=Gf;Yf=Td;Zf=Lf;_f=Mf}qa=Xf&255;oa=Zf>>>qa;Vd=Uf-qa|0;c[O>>2]=Tf+qa;qa=Wf&255;if((qa&64|0)==0){c[R>>2]=Yf&65535;za=qa&15;c[P>>2]=za;c[l>>2]=23;dd=za;ed=Vd;fd=Vf;gd=oa;hd=_f;id=xd;Ka=237;break}else{c[B>>2]=134544;c[l>>2]=29;nb=Vd;ob=Vf;pb=oa;qb=la;rb=_f;sb=r;tb=o;ub=xd;break}}}while(0);if((Ka|0)==96){Ka=0;if((c[z>>2]&4096|0)==0){oa=c[A>>2]|0;if((oa|0)==0){$f=gc;ag=ic}else{c[oa+36>>2]=0;$f=gc;ag=ic}}else{if((gc|0)==0){nc=fc;oc=0;pc=hc;qc=la;rc=ic;sc=s;Ka=282;break}else{bg=0}while(1){cg=bg+1|0;oa=a[ic+bg|0]|0;Vd=c[A>>2]|0;if(((Vd|0)!=0?(za=c[Vd+36>>2]|0,(za|0)!=0):0)?(qa=c[F>>2]|0,qa>>>0<(c[Vd+40>>2]|0)>>>0):0){c[F>>2]=qa+1;a[za+qa|0]=oa}dg=oa<<24>>24!=0;if(dg&cg>>>0<gc>>>0){bg=cg}else{break}}if((c[z>>2]&512|0)!=0){c[x>>2]=ui(c[x>>2]|0,ic,cg)|0}oa=gc-cg|0;qa=ic+cg|0;if(dg){nc=fc;oc=oa;pc=hc;qc=la;rc=qa;sc=s;Ka=282;break}else{$f=oa;ag=qa}}c[l>>2]=8;jc=fc;kc=$f;lc=hc;mc=ag;Ka=109}else if((Ka|0)==237){Ka=0;if((dd|0)==0){eg=ed;fg=fd;gg=gd;hg=hd}else{if(ed>>>0<dd>>>0){qa=ed;oa=fd;za=gd;Vd=hd;while(1){if((oa|0)==0){ra=qa;sa=0;ta=za;ua=la;va=Vd;wa=r;xa=id;break a}Pd=oa+ -1|0;Od=Vd+1|0;pa=(d[Vd]<<qa)+za|0;tc=qa+8|0;if(tc>>>0<dd>>>0){qa=tc;oa=Pd;za=pa;Vd=Od}else{ig=tc;jg=Pd;kg=pa;lg=Od;break}}}else{ig=ed;jg=fd;kg=gd;lg=hd}c[R>>2]=(c[R>>2]|0)+((1<<dd)+ -1&kg);c[O>>2]=(c[O>>2]|0)+dd;eg=ig-dd|0;fg=jg;gg=kg>>>dd;hg=lg}c[l>>2]=24;od=eg;pd=fg;qd=gg;rd=hg;sd=id;Ka=243}do{if((Ka|0)==109){Ka=0;Vd=c[z>>2]|0;if((Vd&512|0)!=0){if(jc>>>0<16){za=jc;oa=kc;qa=lc;Od=mc;while(1){if((oa|0)==0){ra=za;sa=0;ta=qa;ua=la;va=Od;wa=r;xa=s;break a}pa=oa+ -1|0;Pd=Od+1|0;tc=(d[Od]<<za)+qa|0;Ba=za+8|0;if(Ba>>>0<16){za=Ba;oa=pa;qa=tc;Od=Pd}else{mg=Ba;ng=pa;og=tc;pg=Pd;break}}}else{mg=jc;ng=kc;og=lc;pg=mc}if((og|0)==(c[x>>2]&65535|0)){qg=0;rg=ng;sg=0;tg=pg}else{c[B>>2]=134232;c[l>>2]=29;nb=mg;ob=ng;pb=og;qb=la;rb=pg;sb=r;tb=o;ub=s;break}}else{qg=jc;rg=kc;sg=lc;tg=mc}Od=c[A>>2]|0;if((Od|0)!=0){c[Od+44>>2]=Vd>>>9&1;c[Od+48>>2]=1}Od=ui(0,0,0)|0;c[x>>2]=Od;c[E>>2]=Od;c[l>>2]=11;nb=qg;ob=rg;pb=sg;qb=la;rb=tg;sb=r;tb=o;ub=s}else if((Ka|0)==243){Ka=0;if((la|0)==0){nc=od;oc=pd;pc=qd;qc=0;rc=rd;sc=sd;Ka=282;break a}Od=r-la|0;qa=c[R>>2]|0;if(qa>>>0>Od>>>0){oa=qa-Od|0;if(oa>>>0>(c[S>>2]|0)>>>0?(c[T>>2]|0)!=0:0){c[B>>2]=134568;c[l>>2]=29;nb=od;ob=pd;pb=qd;qb=la;rb=rd;sb=r;tb=o;ub=sd;break}Od=c[U>>2]|0;if(oa>>>0>Od>>>0){za=oa-Od|0;ug=za;vg=(c[V>>2]|0)+((c[W>>2]|0)-za)|0}else{ug=oa;vg=(c[V>>2]|0)+(Od-oa)|0}oa=c[F>>2]|0;wg=oa;xg=ug>>>0>oa>>>0?oa:ug;yg=vg}else{oa=c[F>>2]|0;wg=oa;xg=oa;yg=o+(0-qa)|0}qa=xg>>>0>la>>>0?la:xg;c[F>>2]=wg-qa;oa=~la;Od=~xg;za=oa>>>0>Od>>>0?oa:Od;Od=qa;oa=yg;Td=o;while(1){a[Td]=a[oa]|0;Od=Od+ -1|0;if((Od|0)==0){break}else{oa=oa+1|0;Td=Td+1|0}}Td=la-qa|0;oa=o+~za|0;if((c[F>>2]|0)==0){c[l>>2]=20;nb=od;ob=pd;pb=qd;qb=Td;rb=rd;sb=r;tb=oa;ub=sd}else{nb=od;ob=pd;pb=qd;qb=Td;rb=rd;sb=r;tb=oa;ub=sd}}}while(0);ia=c[l>>2]|0;q=nb;ja=ob;ka=pb;la=qb;ma=rb;r=sb;o=tb;s=ub}if((Ka|0)==122){c[m>>2]=o;c[n>>2]=la;c[f>>2]=Ja;c[p>>2]=Ga;c[u>>2]=Ia;c[v>>2]=Fa;k=2;i=h;return k|0}else if((Ka|0)==133){ra=Kd+ -3|0;sa=Ld;ta=Md>>>3;ua=la;va=Nd;wa=r;xa=s}else if((Ka|0)==281){c[l>>2]=28;ra=Cd;sa=Dd;ta=Ed;ua=la;va=Fd;wa=bb;xa=1}else if((Ka|0)==282){ra=nc;sa=oc;ta=pc;ua=qc;va=rc;wa=r;xa=sc}else if((Ka|0)==298){k=-4;i=h;return k|0}else if((Ka|0)==299){i=h;return k|0}c[m>>2]=o;c[n>>2]=ua;c[f>>2]=va;c[p>>2]=sa;c[u>>2]=ta;c[v>>2]=ra;ra=c[n>>2]|0;if((c[W>>2]|0)==0){if((wa|0)!=(ra|0)){W=c[l>>2]|0;if(W>>>0<29?!(W>>>0>25&(g|0)==4):0){Ka=287}else{zg=ra}}else{zg=wa}}else{Ka=287}do{if((Ka|0)==287){if((di(f,o,wa-ra|0)|0)==0){zg=c[n>>2]|0;break}c[l>>2]=30;k=-4;i=h;return k|0}}while(0);n=c[p>>2]|0;p=wa-zg|0;ra=f+8|0;c[ra>>2]=t-n+(c[ra>>2]|0);c[X>>2]=(c[X>>2]|0)+p;c[Y>>2]=(c[Y>>2]|0)+p;Y=(wa|0)==(zg|0);if(!((c[w>>2]|0)==0|Y)){w=c[x>>2]|0;zg=(c[m>>2]|0)+(0-p)|0;if((c[z>>2]|0)==0){Ag=ti(w,zg,p)|0}else{Ag=ui(w,zg,p)|0}c[x>>2]=Ag;c[E>>2]=Ag}Ag=c[l>>2]|0;if((Ag|0)==19){Bg=256}else{Bg=(Ag|0)==14?256:0}c[f+44>>2]=((c[I>>2]|0)!=0?64:0)+(c[v>>2]|0)+((Ag|0)==11?128:0)+Bg;k=((t|0)==(n|0)&Y|(g|0)==4)&(xa|0)==0?-5:xa;i=h;return k|0}function di(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;f=c[a+28>>2]|0;g=f+52|0;h=c[g>>2]|0;if((h|0)==0){j=fb[c[a+32>>2]&31](c[a+40>>2]|0,1<<c[f+36>>2],1)|0;c[g>>2]=j;if((j|0)==0){k=1;i=e;return k|0}else{l=j}}else{l=h}h=f+40|0;j=c[h>>2]|0;if((j|0)==0){a=1<<c[f+36>>2];c[h>>2]=a;c[f+48>>2]=0;c[f+44>>2]=0;m=a}else{m=j}if(!(m>>>0>d>>>0)){Qi(l|0,b+(0-m)|0,m|0)|0;c[f+48>>2]=0;c[f+44>>2]=c[h>>2];k=0;i=e;return k|0}j=f+48|0;a=c[j>>2]|0;n=m-a|0;m=n>>>0>d>>>0?d:n;Qi(l+a|0,b+(0-d)|0,m|0)|0;a=d-m|0;if((m|0)!=(d|0)){Qi(c[g>>2]|0,b+(0-a)|0,a|0)|0;c[j>>2]=a;c[f+44>>2]=c[h>>2];k=0;i=e;return k|0}a=(c[j>>2]|0)+d|0;b=c[h>>2]|0;c[j>>2]=(a|0)==(b|0)?0:a;a=f+44|0;f=c[a>>2]|0;if(!(f>>>0<b>>>0)){k=0;i=e;return k|0}c[a>>2]=f+d;k=0;i=e;return k|0}function ei(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=a+28|0;f=c[e>>2]|0;if((f|0)==0){d=-2;i=b;return d|0}g=a+36|0;h=c[g>>2]|0;if((h|0)==0){d=-2;i=b;return d|0}j=c[f+52>>2]|0;k=a+40|0;if((j|0)==0){l=h;m=f}else{hb[h&1](c[k>>2]|0,j);l=c[g>>2]|0;m=c[e>>2]|0}hb[l&1](c[k>>2]|0,m);c[e>>2]=0;d=0;i=b;return d|0}function fi(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;d=i;i=i+16|0;e=d;if((b|0)==0){f=-2;i=d;return f|0}g=b+28|0;h=c[g>>2]|0;if((h|0)==0){f=-2;i=d;return f|0}j=b+4|0;k=c[j>>2]|0;if((k|0)==0?(c[h+60>>2]|0)>>>0<8:0){f=-5;i=d;return f|0}if((c[h>>2]|0)==31){l=k;m=c[h+104>>2]|0}else{c[h>>2]=31;k=h+60|0;n=c[k>>2]|0;o=h+56|0;p=c[o>>2]<<(n&7);c[o>>2]=p;q=n&-8;c[k>>2]=q;if(q>>>0>7){n=p;p=q;q=0;while(1){r=q+1|0;a[e+q|0]=n;s=n>>>8;t=p+ -8|0;if(t>>>0>7){n=s;p=t;q=r}else{break}}c[o>>2]=s;c[k>>2]=t;t=h+104|0;c[t>>2]=0;if((r|0)==0){u=t;v=0}else{k=0;s=0;while(1){o=a[e+s|0]|0;if((o&255|0)==((k>>>0<2?0:255)|0)){w=k+1|0}else{w=o<<24>>24==0?4-k|0:0}o=s+1|0;if(o>>>0<r>>>0&w>>>0<4){k=w;s=o}else{u=t;v=w;break}}}}else{w=h+104|0;c[w>>2]=0;u=w;v=0}c[u>>2]=v;l=c[j>>2]|0;m=v}v=h+104|0;u=c[b>>2]|0;if((l|0)!=0&m>>>0<4){w=m;t=0;while(1){s=a[u+t|0]|0;if((s&255|0)==((w>>>0<2?0:255)|0)){x=w+1|0}else{x=s<<24>>24==0?4-w|0:0}s=t+1|0;if(s>>>0<l>>>0&x>>>0<4){w=x;t=s}else{y=x;z=s;break}}}else{y=m;z=0}c[v>>2]=y;c[j>>2]=(c[j>>2]|0)-z;c[b>>2]=u+z;u=b+8|0;j=(c[u>>2]|0)+z|0;c[u>>2]=j;if((c[v>>2]|0)!=4){f=-3;i=d;return f|0}v=b+20|0;z=c[v>>2]|0;y=c[g>>2]|0;if((y|0)!=0){c[y+40>>2]=0;c[y+44>>2]=0;c[y+48>>2]=0;c[y+28>>2]=0;c[v>>2]=0;c[u>>2]=0;c[b+24>>2]=0;g=c[y+8>>2]|0;if((g|0)!=0){c[b+48>>2]=g&1}c[y>>2]=0;c[y+4>>2]=0;c[y+12>>2]=0;c[y+20>>2]=32768;c[y+32>>2]=0;c[y+56>>2]=0;c[y+60>>2]=0;g=y+1328|0;c[y+108>>2]=g;c[y+80>>2]=g;c[y+76>>2]=g;c[y+7104>>2]=1;c[y+7108>>2]=-1}c[u>>2]=j;c[v>>2]=z;c[h>>2]=11;f=0;i=d;return f|0}function gi(d,f,g,h,j,k){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;l=i;i=i+64|0;m=l+32|0;n=l;o=m+0|0;p=o+32|0;do{b[o>>1]=0;o=o+2|0}while((o|0)<(p|0));o=(g|0)==0;if(!o){p=0;do{q=m+(e[f+(p<<1)>>1]<<1)|0;b[q>>1]=(b[q>>1]|0)+1<<16>>16;p=p+1|0}while((p|0)!=(g|0))}p=c[j>>2]|0;q=15;while(1){r=q+ -1|0;if((b[m+(q<<1)>>1]|0)!=0){break}if((r|0)==0){s=7;break}else{q=r}}if((s|0)==7){r=c[h>>2]|0;c[h>>2]=r+4;a[r]=64;a[r+1|0]=1;b[r+2>>1]=0;r=c[h>>2]|0;c[h>>2]=r+4;a[r]=64;a[r+1|0]=1;b[r+2>>1]=0;c[j>>2]=1;t=0;i=l;return t|0}r=p>>>0>q>>>0?q:p;a:do{if(q>>>0>1){p=1;while(1){u=p+1|0;if((b[m+(p<<1)>>1]|0)!=0){v=p;break a}if(u>>>0<q>>>0){p=u}else{v=u;break}}}else{v=1}}while(0);p=r>>>0<v>>>0?v:r;r=1;u=1;do{r=(r<<1)-(e[m+(u<<1)>>1]|0)|0;u=u+1|0;if((r|0)<0){t=-1;s=50;break}}while(u>>>0<16);if((s|0)==50){i=l;return t|0}if((r|0)>0?!((d|0)!=0&(q|0)==1):0){t=-1;i=l;return t|0}b[n+2>>1]=0;r=0;u=1;do{r=(e[m+(u<<1)>>1]|0)+(r&65535)|0;u=u+1|0;b[n+(u<<1)>>1]=r}while((u|0)!=15);if(!o){o=0;do{u=b[f+(o<<1)>>1]|0;if(!(u<<16>>16==0)){r=n+((u&65535)<<1)|0;u=b[r>>1]|0;b[r>>1]=u+1<<16>>16;b[k+((u&65535)<<1)>>1]=o}o=o+1|0}while((o|0)!=(g|0))}if((d|0)==0){w=0;x=1<<p;y=0;z=k;A=19;B=k}else if((d|0)==1){g=1<<p;if(g>>>0>852){t=1;i=l;return t|0}else{w=0;x=g;y=1;z=136824+ -514|0;A=256;B=136888+ -514|0}}else{g=1<<p;o=(d|0)==2;if(o&g>>>0>592){t=1;i=l;return t|0}else{w=o;x=g;y=0;z=136952;A=-1;B=137016}}g=x+ -1|0;o=p&255;d=p;n=0;u=0;r=v;v=-1;C=c[h>>2]|0;D=0;E=x;b:while(1){x=1<<d;F=u;G=r;H=D;while(1){I=G-n|0;J=I&255;K=b[k+(H<<1)>>1]|0;L=K&65535;if((L|0)>=(A|0)){if((L|0)>(A|0)){M=b[B+(L<<1)>>1]&255;N=b[z+(L<<1)>>1]|0}else{M=96;N=0}}else{M=0;N=K}K=1<<I;I=F>>>n;L=x;while(1){O=L-K|0;P=O+I|0;a[C+(P<<2)|0]=M;a[C+(P<<2)+1|0]=J;b[C+(P<<2)+2>>1]=N;if((L|0)==(K|0)){break}else{L=O}}L=1<<G+ -1;while(1){if((L&F|0)==0){break}else{L=L>>>1}}if((L|0)==0){Q=0}else{Q=(L+ -1&F)+L|0}R=H+1|0;K=m+(G<<1)|0;I=(b[K>>1]|0)+ -1<<16>>16;b[K>>1]=I;if(I<<16>>16==0){if((G|0)==(q|0)){break b}S=e[f+(e[k+(R<<1)>>1]<<1)>>1]|0}else{S=G}if(!(S>>>0>p>>>0)){F=Q;G=S;H=R;continue}T=Q&g;if((T|0)==(v|0)){F=Q;G=S;H=R}else{break}}H=(n|0)==0?p:n;G=C+(x<<2)|0;F=S-H|0;c:do{if(S>>>0<q>>>0){I=S;K=F;O=1<<F;while(1){P=O-(e[m+(I<<1)>>1]|0)|0;if((P|0)<1){U=K;break c}V=K+1|0;W=V+H|0;if(W>>>0<q>>>0){I=W;K=V;O=P<<1}else{U=V;break}}}else{U=F}}while(0);F=(1<<U)+E|0;if(y&F>>>0>852|w&F>>>0>592){t=1;s=50;break}a[(c[h>>2]|0)+(T<<2)|0]=U;a[(c[h>>2]|0)+(T<<2)+1|0]=o;x=c[h>>2]|0;b[x+(T<<2)+2>>1]=(G-x|0)>>>2;d=U;n=H;u=Q;r=S;v=T;C=G;D=R;E=F}if((s|0)==50){i=l;return t|0}if((Q|0)!=0){a[C+(Q<<2)|0]=64;a[C+(Q<<2)+1|0]=J;b[C+(Q<<2)+2>>1]=0}c[h>>2]=(c[h>>2]|0)+(E<<2);c[j>>2]=p;t=0;i=l;return t|0}function hi(a){a=a|0;var d=0;d=i;c[a+2840>>2]=a+148;c[a+2848>>2]=137848;c[a+2852>>2]=a+2440;c[a+2860>>2]=137872;c[a+2864>>2]=a+2684;c[a+2872>>2]=137896;b[a+5816>>1]=0;c[a+5820>>2]=0;ii(a);i=d;return}function ii(a){a=a|0;var d=0,e=0;d=i;e=0;do{b[a+(e<<2)+148>>1]=0;e=e+1|0}while((e|0)!=286);b[a+2440>>1]=0;b[a+2444>>1]=0;b[a+2448>>1]=0;b[a+2452>>1]=0;b[a+2456>>1]=0;b[a+2460>>1]=0;b[a+2464>>1]=0;b[a+2468>>1]=0;b[a+2472>>1]=0;b[a+2476>>1]=0;b[a+2480>>1]=0;b[a+2484>>1]=0;b[a+2488>>1]=0;b[a+2492>>1]=0;b[a+2496>>1]=0;b[a+2500>>1]=0;b[a+2504>>1]=0;b[a+2508>>1]=0;b[a+2512>>1]=0;b[a+2516>>1]=0;b[a+2520>>1]=0;b[a+2524>>1]=0;b[a+2528>>1]=0;b[a+2532>>1]=0;b[a+2536>>1]=0;b[a+2540>>1]=0;b[a+2544>>1]=0;b[a+2548>>1]=0;b[a+2552>>1]=0;b[a+2556>>1]=0;b[a+2684>>1]=0;b[a+2688>>1]=0;b[a+2692>>1]=0;b[a+2696>>1]=0;b[a+2700>>1]=0;b[a+2704>>1]=0;b[a+2708>>1]=0;b[a+2712>>1]=0;b[a+2716>>1]=0;b[a+2720>>1]=0;b[a+2724>>1]=0;b[a+2728>>1]=0;b[a+2732>>1]=0;b[a+2736>>1]=0;b[a+2740>>1]=0;b[a+2744>>1]=0;b[a+2748>>1]=0;b[a+2752>>1]=0;b[a+2756>>1]=0;b[a+1172>>1]=1;c[a+5804>>2]=0;c[a+5800>>2]=0;c[a+5808>>2]=0;c[a+5792>>2]=0;i=d;return}function ji(d,f,g,h){d=d|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;k=d+5820|0;l=c[k>>2]|0;m=h&65535;h=d+5816|0;n=e[h>>1]|0|m<<l;b[h>>1]=n;if((l|0)>13){o=d+20|0;p=c[o>>2]|0;c[o>>2]=p+1;q=d+8|0;a[(c[q>>2]|0)+p|0]=n;p=(e[h>>1]|0)>>>8&255;r=c[o>>2]|0;c[o>>2]=r+1;a[(c[q>>2]|0)+r|0]=p;p=c[k>>2]|0;r=m>>>(16-p|0);b[h>>1]=r;s=r;t=p+ -13|0}else{s=n;t=l+3|0}l=s&255;c[k>>2]=t;do{if((t|0)<=8){s=d+20|0;if((t|0)>0){n=c[s>>2]|0;c[s>>2]=n+1;p=d+8|0;a[(c[p>>2]|0)+n|0]=l;u=s;v=p;break}else{u=s;v=d+8|0;break}}else{s=d+20|0;p=c[s>>2]|0;c[s>>2]=p+1;n=d+8|0;a[(c[n>>2]|0)+p|0]=l;p=(e[h>>1]|0)>>>8&255;r=c[s>>2]|0;c[s>>2]=r+1;a[(c[n>>2]|0)+r|0]=p;u=s;v=n}}while(0);b[h>>1]=0;c[k>>2]=0;k=c[u>>2]|0;c[u>>2]=k+1;a[(c[v>>2]|0)+k|0]=g;k=c[u>>2]|0;c[u>>2]=k+1;a[(c[v>>2]|0)+k|0]=g>>>8;k=g&65535^65535;h=c[u>>2]|0;c[u>>2]=h+1;a[(c[v>>2]|0)+h|0]=k;h=c[u>>2]|0;c[u>>2]=h+1;a[(c[v>>2]|0)+h|0]=k>>>8;if((g|0)==0){i=j;return}else{w=g;x=f}while(1){w=w+ -1|0;f=a[x]|0;g=c[u>>2]|0;c[u>>2]=g+1;a[(c[v>>2]|0)+g|0]=f;if((w|0)==0){break}else{x=x+1|0}}i=j;return}function ki(d){d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;g=d+5820|0;h=c[g>>2]|0;if((h|0)==16){j=d+5816|0;k=b[j>>1]&255;l=d+20|0;m=c[l>>2]|0;c[l>>2]=m+1;n=d+8|0;a[(c[n>>2]|0)+m|0]=k;k=(e[j>>1]|0)>>>8&255;m=c[l>>2]|0;c[l>>2]=m+1;a[(c[n>>2]|0)+m|0]=k;b[j>>1]=0;c[g>>2]=0;i=f;return}if((h|0)<=7){i=f;return}h=d+5816|0;j=b[h>>1]&255;k=d+20|0;m=c[k>>2]|0;c[k>>2]=m+1;a[(c[d+8>>2]|0)+m|0]=j;b[h>>1]=(e[h>>1]|0)>>>8;c[g>>2]=(c[g>>2]|0)+ -8;i=f;return}function li(d){d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=d+5820|0;h=c[g>>2]|0;j=d+5816|0;k=e[j>>1]|0|2<<h;b[j>>1]=k;if((h|0)>13){l=d+20|0;m=c[l>>2]|0;c[l>>2]=m+1;n=d+8|0;a[(c[n>>2]|0)+m|0]=k;m=(e[j>>1]|0)>>>8&255;o=c[l>>2]|0;c[l>>2]=o+1;a[(c[n>>2]|0)+o|0]=m;m=c[g>>2]|0;o=2>>>(16-m|0);b[j>>1]=o;p=o;q=m+ -13|0}else{p=k;q=h+3|0}h=p&255;c[g>>2]=q;if((q|0)>9){p=d+20|0;k=c[p>>2]|0;c[p>>2]=k+1;m=d+8|0;a[(c[m>>2]|0)+k|0]=h;k=(e[j>>1]|0)>>>8&255;o=c[p>>2]|0;c[p>>2]=o+1;a[(c[m>>2]|0)+o|0]=k;b[j>>1]=0;r=0;s=(c[g>>2]|0)+ -9|0}else{r=h;s=q+7|0}c[g>>2]=s;if((s|0)==16){q=d+20|0;h=c[q>>2]|0;c[q>>2]=h+1;k=d+8|0;a[(c[k>>2]|0)+h|0]=r;h=(e[j>>1]|0)>>>8&255;o=c[q>>2]|0;c[q>>2]=o+1;a[(c[k>>2]|0)+o|0]=h;b[j>>1]=0;c[g>>2]=0;i=f;return}if((s|0)<=7){i=f;return}s=d+20|0;h=c[s>>2]|0;c[s>>2]=h+1;a[(c[d+8>>2]|0)+h|0]=r;b[j>>1]=(e[j>>1]|0)>>>8;c[g>>2]=(c[g>>2]|0)+ -8;i=f;return}function mi(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;k=i;if((c[f+132>>2]|0)>0){l=(c[f>>2]|0)+44|0;if((c[l>>2]|0)==2){m=-201342849;n=0;while(1){if((m&1|0)!=0?(b[f+(n<<2)+148>>1]|0)!=0:0){o=0;break}p=n+1|0;if((p|0)<32){m=m>>>1;n=p}else{q=6;break}}a:do{if((q|0)==6){if(((b[f+184>>1]|0)==0?(b[f+188>>1]|0)==0:0)?(b[f+200>>1]|0)==0:0){n=32;while(1){m=n+1|0;if((b[f+(n<<2)+148>>1]|0)!=0){o=1;break a}if((m|0)<256){n=m}else{o=0;break}}}else{o=1}}}while(0);c[l>>2]=o}ni(f,f+2840|0);ni(f,f+2852|0);qi(f,f+148|0,c[f+2844>>2]|0);qi(f,f+2440|0,c[f+2856>>2]|0);ni(f,f+2864|0);o=18;while(1){l=o+ -1|0;if((b[f+(d[139672+o|0]<<2)+2686>>1]|0)!=0){r=o;break}if((l|0)>2){o=l}else{r=l;break}}o=f+5800|0;l=(r*3|0)+17+(c[o>>2]|0)|0;c[o>>2]=l;o=(l+10|0)>>>3;l=((c[f+5804>>2]|0)+10|0)>>>3;s=r;t=l>>>0>o>>>0?o:l;u=l}else{l=h+5|0;s=0;t=l;u=l}do{if((h+4|0)>>>0>t>>>0|(g|0)==0){l=f+5820|0;o=c[l>>2]|0;r=(o|0)>13;if((c[f+136>>2]|0)==4|(u|0)==(t|0)){q=j+2&65535;n=f+5816|0;m=e[n>>1]|q<<o;b[n>>1]=m;if(r){p=f+20|0;v=c[p>>2]|0;c[p>>2]=v+1;w=f+8|0;a[(c[w>>2]|0)+v|0]=m;m=(e[n>>1]|0)>>>8&255;v=c[p>>2]|0;c[p>>2]=v+1;a[(c[w>>2]|0)+v|0]=m;m=c[l>>2]|0;b[n>>1]=q>>>(16-m|0);x=m+ -13|0}else{x=o+3|0}c[l>>2]=x;oi(f,137920,139072);break}m=j+4&65535;q=f+5816|0;n=e[q>>1]|m<<o;b[q>>1]=n;if(r){r=f+20|0;v=c[r>>2]|0;c[r>>2]=v+1;w=f+8|0;a[(c[w>>2]|0)+v|0]=n;v=(e[q>>1]|0)>>>8&255;p=c[r>>2]|0;c[r>>2]=p+1;a[(c[w>>2]|0)+p|0]=v;v=c[l>>2]|0;p=m>>>(16-v|0);b[q>>1]=p;y=p;z=v+ -13|0}else{y=n;z=o+3|0}c[l>>2]=z;o=c[f+2844>>2]|0;n=c[f+2856>>2]|0;v=o+65280&65535;p=y&65535|v<<z;b[q>>1]=p;if((z|0)>11){m=f+20|0;w=c[m>>2]|0;c[m>>2]=w+1;r=f+8|0;a[(c[r>>2]|0)+w|0]=p;w=(e[q>>1]|0)>>>8&255;A=c[m>>2]|0;c[m>>2]=A+1;a[(c[r>>2]|0)+A|0]=w;w=c[l>>2]|0;A=v>>>(16-w|0);b[q>>1]=A;B=w+ -11|0;C=A}else{B=z+5|0;C=p}c[l>>2]=B;p=n&65535;A=p<<B|C&65535;b[q>>1]=A;if((B|0)>11){w=f+20|0;v=c[w>>2]|0;c[w>>2]=v+1;r=f+8|0;a[(c[r>>2]|0)+v|0]=A;v=(e[q>>1]|0)>>>8&255;m=c[w>>2]|0;c[w>>2]=m+1;a[(c[r>>2]|0)+m|0]=v;v=c[l>>2]|0;m=p>>>(16-v|0);b[q>>1]=m;D=v+ -11|0;E=m}else{D=B+5|0;E=A}c[l>>2]=D;A=s+65533&65535;m=A<<D|E&65535;b[q>>1]=m;if((D|0)>12){v=f+20|0;p=c[v>>2]|0;c[v>>2]=p+1;r=f+8|0;a[(c[r>>2]|0)+p|0]=m;p=(e[q>>1]|0)>>>8&255;w=c[v>>2]|0;c[v>>2]=w+1;a[(c[r>>2]|0)+w|0]=p;p=c[l>>2]|0;w=A>>>(16-p|0);b[q>>1]=w;F=w;G=p+ -12|0}else{F=m;G=D+4|0}c[l>>2]=G;if((s|0)>-1){m=f+20|0;p=f+8|0;w=G;A=F;r=0;while(1){v=e[f+(d[139672+r|0]<<2)+2686>>1]|0;H=v<<w|A&65535;b[q>>1]=H;if((w|0)>13){I=c[m>>2]|0;c[m>>2]=I+1;a[(c[p>>2]|0)+I|0]=H;I=(e[q>>1]|0)>>>8&255;J=c[m>>2]|0;c[m>>2]=J+1;a[(c[p>>2]|0)+J|0]=I;I=c[l>>2]|0;J=v>>>(16-I|0);b[q>>1]=J;K=J;L=I+ -13|0}else{K=H;L=w+3|0}c[l>>2]=L;if((r|0)==(s|0)){break}else{w=L;A=K;r=r+1|0}}}r=f+148|0;pi(f,r,o);A=f+2440|0;pi(f,A,n);oi(f,r,A)}else{ji(f,g,h,j)}}while(0);ii(f);if((j|0)==0){i=k;return}j=f+5820|0;h=c[j>>2]|0;if((h|0)<=8){g=f+5816|0;if((h|0)>0){h=b[g>>1]&255;K=f+20|0;L=c[K>>2]|0;c[K>>2]=L+1;a[(c[f+8>>2]|0)+L|0]=h;M=g}else{M=g}}else{g=f+5816|0;h=b[g>>1]&255;L=f+20|0;K=c[L>>2]|0;c[L>>2]=K+1;s=f+8|0;a[(c[s>>2]|0)+K|0]=h;h=(e[g>>1]|0)>>>8&255;K=c[L>>2]|0;c[L>>2]=K+1;a[(c[s>>2]|0)+K|0]=h;M=g}b[M>>1]=0;c[j>>2]=0;i=k;return}function ni(f,g){f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;h=i;i=i+32|0;j=h;k=c[g>>2]|0;l=g+8|0;m=c[l>>2]|0;n=c[m>>2]|0;o=c[m+12>>2]|0;m=f+5200|0;c[m>>2]=0;p=f+5204|0;c[p>>2]=573;if((o|0)>0){q=-1;r=0;while(1){if((b[k+(r<<2)>>1]|0)==0){b[k+(r<<2)+2>>1]=0;s=q}else{t=(c[m>>2]|0)+1|0;c[m>>2]=t;c[f+(t<<2)+2908>>2]=r;a[f+r+5208|0]=0;s=r}r=r+1|0;if((r|0)==(o|0)){break}else{q=s}}q=c[m>>2]|0;if((q|0)<2){u=q;v=s;w=3}else{x=s}}else{u=0;v=-1;w=3}if((w|0)==3){w=f+5800|0;s=f+5804|0;if((n|0)==0){q=u;r=v;while(1){t=(r|0)<2;y=r+1|0;z=t?y:r;A=t?y:0;y=q+1|0;c[m>>2]=y;c[f+(y<<2)+2908>>2]=A;b[k+(A<<2)>>1]=1;a[f+A+5208|0]=0;c[w>>2]=(c[w>>2]|0)+ -1;A=c[m>>2]|0;if((A|0)<2){q=A;r=z}else{x=z;break}}}else{r=u;u=v;while(1){v=(u|0)<2;q=u+1|0;z=v?q:u;A=v?q:0;q=r+1|0;c[m>>2]=q;c[f+(q<<2)+2908>>2]=A;b[k+(A<<2)>>1]=1;a[f+A+5208|0]=0;c[w>>2]=(c[w>>2]|0)+ -1;c[s>>2]=(c[s>>2]|0)-(e[n+(A<<2)+2>>1]|0);A=c[m>>2]|0;if((A|0)<2){r=A;u=z}else{x=z;break}}}}u=g+4|0;c[u>>2]=x;r=c[m>>2]|0;if((r|0)>1){n=r;s=(r|0)/2|0;while(1){w=c[f+(s<<2)+2908>>2]|0;z=f+w+5208|0;A=s<<1;a:do{if((A|0)>(n|0)){B=s}else{q=k+(w<<2)|0;v=s;y=n;t=A;while(1){do{if((t|0)<(y|0)){C=t|1;D=c[f+(C<<2)+2908>>2]|0;E=b[k+(D<<2)>>1]|0;F=c[f+(t<<2)+2908>>2]|0;G=b[k+(F<<2)>>1]|0;if(!((E&65535)<(G&65535))){if(!(E<<16>>16==G<<16>>16)){H=t;break}if((d[f+D+5208|0]|0)>(d[f+F+5208|0]|0)){H=t;break}}H=C}else{H=t}}while(0);C=b[q>>1]|0;F=c[f+(H<<2)+2908>>2]|0;D=b[k+(F<<2)>>1]|0;if((C&65535)<(D&65535)){B=v;break a}if(C<<16>>16==D<<16>>16?(d[z]|0)<=(d[f+F+5208|0]|0):0){B=v;break a}c[f+(v<<2)+2908>>2]=F;F=H<<1;D=c[m>>2]|0;if((F|0)>(D|0)){B=H;break}else{v=H;y=D;t=F}}}}while(0);c[f+(B<<2)+2908>>2]=w;z=s+ -1|0;A=c[m>>2]|0;if((z|0)>0){n=A;s=z}else{I=A;break}}}else{I=r}r=f+2912|0;s=I;I=o;while(1){o=c[r>>2]|0;n=s+ -1|0;c[m>>2]=n;B=c[f+(s<<2)+2908>>2]|0;c[r>>2]=B;H=f+B+5208|0;b:do{if((s|0)<3){J=1}else{A=k+(B<<2)|0;z=1;t=n;y=2;while(1){do{if((y|0)<(t|0)){v=y|1;q=c[f+(v<<2)+2908>>2]|0;F=b[k+(q<<2)>>1]|0;D=c[f+(y<<2)+2908>>2]|0;C=b[k+(D<<2)>>1]|0;if(!((F&65535)<(C&65535))){if(!(F<<16>>16==C<<16>>16)){K=y;break}if((d[f+q+5208|0]|0)>(d[f+D+5208|0]|0)){K=y;break}}K=v}else{K=y}}while(0);v=b[A>>1]|0;D=c[f+(K<<2)+2908>>2]|0;q=b[k+(D<<2)>>1]|0;if((v&65535)<(q&65535)){J=z;break b}if(v<<16>>16==q<<16>>16?(d[H]|0)<=(d[f+D+5208|0]|0):0){J=z;break b}c[f+(z<<2)+2908>>2]=D;D=K<<1;q=c[m>>2]|0;if((D|0)>(q|0)){J=K;break}else{z=K;t=q;y=D}}}}while(0);c[f+(J<<2)+2908>>2]=B;H=c[r>>2]|0;n=(c[p>>2]|0)+ -1|0;c[p>>2]=n;c[f+(n<<2)+2908>>2]=o;n=(c[p>>2]|0)+ -1|0;c[p>>2]=n;c[f+(n<<2)+2908>>2]=H;n=k+(I<<2)|0;b[n>>1]=(e[k+(H<<2)>>1]|0)+(e[k+(o<<2)>>1]|0);w=a[f+o+5208|0]|0;y=a[f+H+5208|0]|0;t=f+I+5208|0;a[t]=(((w&255)<(y&255)?y:w)&255)+1;w=I&65535;b[k+(H<<2)+2>>1]=w;b[k+(o<<2)+2>>1]=w;w=I+1|0;c[r>>2]=I;H=c[m>>2]|0;c:do{if((H|0)<2){L=1}else{y=1;z=H;A=2;while(1){do{if((A|0)<(z|0)){D=A|1;q=c[f+(D<<2)+2908>>2]|0;v=b[k+(q<<2)>>1]|0;C=c[f+(A<<2)+2908>>2]|0;F=b[k+(C<<2)>>1]|0;if(!((v&65535)<(F&65535))){if(!(v<<16>>16==F<<16>>16)){M=A;break}if((d[f+q+5208|0]|0)>(d[f+C+5208|0]|0)){M=A;break}}M=D}else{M=A}}while(0);D=b[n>>1]|0;C=c[f+(M<<2)+2908>>2]|0;q=b[k+(C<<2)>>1]|0;if((D&65535)<(q&65535)){L=y;break c}if(D<<16>>16==q<<16>>16?(d[t]|0)<=(d[f+C+5208|0]|0):0){L=y;break c}c[f+(y<<2)+2908>>2]=C;C=M<<1;q=c[m>>2]|0;if((C|0)>(q|0)){L=M;break}else{y=M;z=q;A=C}}}}while(0);c[f+(L<<2)+2908>>2]=I;t=c[m>>2]|0;if((t|0)>1){s=t;I=w}else{break}}I=c[r>>2]|0;r=(c[p>>2]|0)+ -1|0;c[p>>2]=r;c[f+(r<<2)+2908>>2]=I;I=c[g>>2]|0;g=c[u>>2]|0;u=c[l>>2]|0;l=c[u>>2]|0;r=c[u+4>>2]|0;s=c[u+8>>2]|0;m=c[u+16>>2]|0;u=f+2876|0;L=u+32|0;do{b[u>>1]=0;u=u+2|0}while((u|0)<(L|0));u=c[p>>2]|0;b[I+(c[f+(u<<2)+2908>>2]<<2)+2>>1]=0;p=u+1|0;d:do{if((p|0)<573){u=f+5800|0;L=f+5804|0;if((l|0)==0){M=p;J=0;while(1){K=c[f+(M<<2)+2908>>2]|0;t=I+(K<<2)+2|0;n=e[I+(e[t>>1]<<2)+2>>1]|0;H=(n|0)<(m|0);o=H?n+1|0:m;n=(H&1^1)+J|0;b[t>>1]=o;if((K|0)<=(g|0)){t=f+(o<<1)+2876|0;b[t>>1]=(b[t>>1]|0)+1<<16>>16;if((K|0)<(s|0)){N=0}else{N=c[r+(K-s<<2)>>2]|0}t=ba(e[I+(K<<2)>>1]|0,N+o|0)|0;c[u>>2]=t+(c[u>>2]|0)}t=M+1|0;if((t|0)==573){O=n;break}else{M=t;J=n}}}else{J=p;M=0;while(1){w=c[f+(J<<2)+2908>>2]|0;n=I+(w<<2)+2|0;t=e[I+(e[n>>1]<<2)+2>>1]|0;o=(t|0)<(m|0);K=o?t+1|0:m;t=(o&1^1)+M|0;b[n>>1]=K;if((w|0)<=(g|0)){n=f+(K<<1)+2876|0;b[n>>1]=(b[n>>1]|0)+1<<16>>16;if((w|0)<(s|0)){P=0}else{P=c[r+(w-s<<2)>>2]|0}n=e[I+(w<<2)>>1]|0;o=ba(n,P+K|0)|0;c[u>>2]=o+(c[u>>2]|0);o=ba((e[l+(w<<2)+2>>1]|0)+P|0,n)|0;c[L>>2]=o+(c[L>>2]|0)}o=J+1|0;if((o|0)==573){O=t;break}else{J=o;M=t}}}if((O|0)!=0){M=f+(m<<1)+2876|0;J=O;do{L=m;while(1){t=L+ -1|0;Q=f+(t<<1)+2876|0;R=b[Q>>1]|0;if(R<<16>>16==0){L=t}else{break}}b[Q>>1]=R+ -1<<16>>16;t=f+(L<<1)+2876|0;b[t>>1]=(e[t>>1]|0)+2;S=(b[M>>1]|0)+ -1<<16>>16;b[M>>1]=S;J=J+ -2|0}while((J|0)>0);if((m|0)!=0){J=S;M=m;t=573;while(1){o=M&65535;if(J<<16>>16==0){T=t}else{n=t;w=J&65535;while(1){K=n;do{K=K+ -1|0;U=c[f+(K<<2)+2908>>2]|0}while((U|0)>(g|0));H=I+(U<<2)+2|0;B=e[H>>1]|0;if((B|0)!=(M|0)){A=ba(e[I+(U<<2)>>1]|0,M-B|0)|0;c[u>>2]=A+(c[u>>2]|0);b[H>>1]=o}H=w+ -1|0;if((H|0)==0){T=K;break}else{n=K;w=H}}}w=M+ -1|0;if((w|0)==0){break d}J=b[f+(w<<1)+2876>>1]|0;M=w;t=T}}}}}while(0);T=1;U=0;do{U=(e[f+(T+ -1<<1)+2876>>1]|0)+(U&65534)<<1;b[j+(T<<1)>>1]=U;T=T+1|0}while((T|0)!=16);if((x|0)<0){i=h;return}else{V=0}while(1){T=b[k+(V<<2)+2>>1]|0;U=T&65535;if(!(T<<16>>16==0)){T=j+(U<<1)|0;f=b[T>>1]|0;b[T>>1]=f+1<<16>>16;T=U;U=f&65535;f=0;while(1){W=f|U&1;T=T+ -1|0;if((T|0)<=0){break}else{U=U>>>1;f=W<<1}}b[k+(V<<2)>>1]=W}if((V|0)==(x|0)){break}else{V=V+1|0}}i=h;return}function oi(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;j=i;k=f+5792|0;if((c[k>>2]|0)==0){l=c[f+5820>>2]|0;m=b[f+5816>>1]|0}else{n=f+5796|0;o=f+5784|0;p=f+5820|0;q=f+5816|0;r=f+20|0;s=f+8|0;t=0;while(1){u=b[(c[n>>2]|0)+(t<<1)>>1]|0;v=u&65535;w=t+1|0;x=d[(c[o>>2]|0)+t|0]|0;do{if(u<<16>>16==0){y=e[g+(x<<2)+2>>1]|0;z=c[p>>2]|0;A=e[g+(x<<2)>>1]|0;B=e[q>>1]|0|A<<z;C=B&65535;b[q>>1]=C;if((z|0)>(16-y|0)){D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=B;B=(e[q>>1]|0)>>>8&255;D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=B;B=c[p>>2]|0;D=A>>>(16-B|0)&65535;b[q>>1]=D;A=y+ -16+B|0;c[p>>2]=A;E=D;F=A;break}else{A=z+y|0;c[p>>2]=A;E=C;F=A;break}}else{A=d[137592+x|0]|0;C=(A|256)+1|0;y=e[g+(C<<2)+2>>1]|0;z=c[p>>2]|0;D=e[g+(C<<2)>>1]|0;C=e[q>>1]|0|D<<z;B=C&65535;b[q>>1]=B;if((z|0)>(16-y|0)){G=c[r>>2]|0;c[r>>2]=G+1;a[(c[s>>2]|0)+G|0]=C;C=(e[q>>1]|0)>>>8&255;G=c[r>>2]|0;c[r>>2]=G+1;a[(c[s>>2]|0)+G|0]=C;C=c[p>>2]|0;G=D>>>(16-C|0)&65535;b[q>>1]=G;H=G;I=y+ -16+C|0}else{H=B;I=z+y|0}c[p>>2]=I;y=c[139192+(A<<2)>>2]|0;do{if((A+ -8|0)>>>0<20){z=x-(c[139312+(A<<2)>>2]|0)&65535;B=z<<I|H&65535;C=B&65535;b[q>>1]=C;if((I|0)>(16-y|0)){G=c[r>>2]|0;c[r>>2]=G+1;a[(c[s>>2]|0)+G|0]=B;B=(e[q>>1]|0)>>>8&255;G=c[r>>2]|0;c[r>>2]=G+1;a[(c[s>>2]|0)+G|0]=B;B=c[p>>2]|0;G=z>>>(16-B|0)&65535;b[q>>1]=G;z=y+ -16+B|0;c[p>>2]=z;J=z;K=G;break}else{G=I+y|0;c[p>>2]=G;J=G;K=C;break}}else{J=I;K=H}}while(0);y=v+ -1|0;if(y>>>0<256){L=y}else{L=(y>>>7)+256|0}A=d[137080+L|0]|0;C=e[h+(A<<2)+2>>1]|0;G=e[h+(A<<2)>>1]|0;z=K&65535|G<<J;B=z&65535;b[q>>1]=B;if((J|0)>(16-C|0)){D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=z;z=(e[q>>1]|0)>>>8&255;D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=z;z=c[p>>2]|0;D=G>>>(16-z|0)&65535;b[q>>1]=D;M=C+ -16+z|0;N=D}else{M=J+C|0;N=B}c[p>>2]=M;B=c[139432+(A<<2)>>2]|0;if((A+ -4|0)>>>0<26){C=y-(c[139552+(A<<2)>>2]|0)&65535;A=C<<M|N&65535;y=A&65535;b[q>>1]=y;if((M|0)>(16-B|0)){D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=A;A=(e[q>>1]|0)>>>8&255;D=c[r>>2]|0;c[r>>2]=D+1;a[(c[s>>2]|0)+D|0]=A;A=c[p>>2]|0;D=C>>>(16-A|0)&65535;b[q>>1]=D;C=B+ -16+A|0;c[p>>2]=C;E=D;F=C;break}else{C=M+B|0;c[p>>2]=C;E=y;F=C;break}}else{E=N;F=M}}}while(0);if(w>>>0<(c[k>>2]|0)>>>0){t=w}else{l=F;m=E;break}}}E=e[g+1026>>1]|0;F=f+5820|0;t=e[g+1024>>1]|0;g=f+5816|0;k=m&65535|t<<l;b[g>>1]=k;if((l|0)>(16-E|0)){m=f+20|0;M=c[m>>2]|0;c[m>>2]=M+1;N=f+8|0;a[(c[N>>2]|0)+M|0]=k;k=(e[g>>1]|0)>>>8&255;M=c[m>>2]|0;c[m>>2]=M+1;a[(c[N>>2]|0)+M|0]=k;k=c[F>>2]|0;b[g>>1]=t>>>(16-k|0);O=E+ -16+k|0;c[F>>2]=O;i=j;return}else{O=l+E|0;c[F>>2]=O;i=j;return}}function pi(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;h=i;j=b[f+2>>1]|0;k=j<<16>>16==0;l=d+2754|0;m=d+5820|0;n=d+2752|0;o=d+5816|0;p=d+20|0;q=d+8|0;r=d+2758|0;s=d+2756|0;t=d+2750|0;u=d+2748|0;v=k?138:7;w=k?3:4;k=0;x=j&65535;j=-1;a:while(1){y=0;z=k;while(1){if((z|0)>(g|0)){break a}z=z+1|0;A=b[f+(z<<2)+2>>1]|0;B=A&65535;C=y+1|0;D=(x|0)==(B|0);if(!((C|0)<(v|0)&D)){break}else{y=C}}do{if((C|0)>=(w|0)){if((x|0)!=0){if((x|0)==(j|0)){E=b[o>>1]|0;F=c[m>>2]|0;G=C}else{H=e[d+(x<<2)+2686>>1]|0;I=c[m>>2]|0;J=e[d+(x<<2)+2684>>1]|0;K=e[o>>1]|0|J<<I;L=K&65535;b[o>>1]=L;if((I|0)>(16-H|0)){M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=K;K=(e[o>>1]|0)>>>8&255;M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=K;K=c[m>>2]|0;M=J>>>(16-K|0)&65535;b[o>>1]=M;N=M;O=H+ -16+K|0}else{N=L;O=I+H|0}c[m>>2]=O;E=N;F=O;G=y}H=e[t>>1]|0;I=e[u>>1]|0;L=E&65535|I<<F;b[o>>1]=L;if((F|0)>(16-H|0)){K=c[p>>2]|0;c[p>>2]=K+1;a[(c[q>>2]|0)+K|0]=L;K=(e[o>>1]|0)>>>8&255;M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=K;K=c[m>>2]|0;M=I>>>(16-K|0);b[o>>1]=M;P=H+ -16+K|0;Q=M}else{P=F+H|0;Q=L}c[m>>2]=P;L=G+65533&65535;H=Q&65535|L<<P;b[o>>1]=H;if((P|0)>14){M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=H;H=(e[o>>1]|0)>>>8&255;M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=H;H=c[m>>2]|0;b[o>>1]=L>>>(16-H|0);c[m>>2]=H+ -14;break}else{c[m>>2]=P+2;break}}if((C|0)<11){H=e[l>>1]|0;L=c[m>>2]|0;M=e[n>>1]|0;K=e[o>>1]|0|M<<L;b[o>>1]=K;if((L|0)>(16-H|0)){I=c[p>>2]|0;c[p>>2]=I+1;a[(c[q>>2]|0)+I|0]=K;I=(e[o>>1]|0)>>>8&255;J=c[p>>2]|0;c[p>>2]=J+1;a[(c[q>>2]|0)+J|0]=I;I=c[m>>2]|0;J=M>>>(16-I|0);b[o>>1]=J;R=H+ -16+I|0;S=J}else{R=L+H|0;S=K}c[m>>2]=R;K=y+65534&65535;H=S&65535|K<<R;b[o>>1]=H;if((R|0)>13){L=c[p>>2]|0;c[p>>2]=L+1;a[(c[q>>2]|0)+L|0]=H;H=(e[o>>1]|0)>>>8&255;L=c[p>>2]|0;c[p>>2]=L+1;a[(c[q>>2]|0)+L|0]=H;H=c[m>>2]|0;b[o>>1]=K>>>(16-H|0);c[m>>2]=H+ -13;break}else{c[m>>2]=R+3;break}}else{H=e[r>>1]|0;K=c[m>>2]|0;L=e[s>>1]|0;J=e[o>>1]|0|L<<K;b[o>>1]=J;if((K|0)>(16-H|0)){I=c[p>>2]|0;c[p>>2]=I+1;a[(c[q>>2]|0)+I|0]=J;I=(e[o>>1]|0)>>>8&255;M=c[p>>2]|0;c[p>>2]=M+1;a[(c[q>>2]|0)+M|0]=I;I=c[m>>2]|0;M=L>>>(16-I|0);b[o>>1]=M;T=H+ -16+I|0;U=M}else{T=K+H|0;U=J}c[m>>2]=T;J=y+65526&65535;H=U&65535|J<<T;b[o>>1]=H;if((T|0)>9){K=c[p>>2]|0;c[p>>2]=K+1;a[(c[q>>2]|0)+K|0]=H;H=(e[o>>1]|0)>>>8&255;K=c[p>>2]|0;c[p>>2]=K+1;a[(c[q>>2]|0)+K|0]=H;H=c[m>>2]|0;b[o>>1]=J>>>(16-H|0);c[m>>2]=H+ -9;break}else{c[m>>2]=T+7;break}}}else{H=d+(x<<2)+2686|0;J=d+(x<<2)+2684|0;K=c[m>>2]|0;M=b[o>>1]|0;I=C;while(1){L=e[H>>1]|0;V=e[J>>1]|0;W=M&65535|V<<K;X=W&65535;b[o>>1]=X;if((K|0)>(16-L|0)){Y=c[p>>2]|0;c[p>>2]=Y+1;a[(c[q>>2]|0)+Y|0]=W;W=(e[o>>1]|0)>>>8&255;Y=c[p>>2]|0;c[p>>2]=Y+1;a[(c[q>>2]|0)+Y|0]=W;W=c[m>>2]|0;Y=V>>>(16-W|0)&65535;b[o>>1]=Y;Z=Y;_=L+ -16+W|0}else{Z=X;_=K+L|0}c[m>>2]=_;I=I+ -1|0;if((I|0)==0){break}else{K=_;M=Z}}}}while(0);if(A<<16>>16==0){$=x;v=138;w=3;k=z;x=B;j=$;continue}$=x;v=D?6:7;w=D?3:4;k=z;x=B;j=$}i=h;return}function qi(a,c,d){a=a|0;c=c|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;g=b[c+2>>1]|0;h=g<<16>>16==0;b[c+(d+1<<2)+2>>1]=-1;j=a+2752|0;k=a+2756|0;l=a+2748|0;m=h?138:7;n=h?3:4;h=0;o=g&65535;g=-1;a:while(1){p=0;q=h;do{if((q|0)>(d|0)){break a}q=q+1|0;r=b[c+(q<<2)+2>>1]|0;s=r&65535;p=p+1|0;t=(o|0)==(s|0)}while((p|0)<(m|0)&t);do{if((p|0)>=(n|0)){if((o|0)==0){if((p|0)<11){b[j>>1]=(b[j>>1]|0)+1<<16>>16;break}else{b[k>>1]=(b[k>>1]|0)+1<<16>>16;break}}else{if((o|0)!=(g|0)){u=a+(o<<2)+2684|0;b[u>>1]=(b[u>>1]|0)+1<<16>>16}b[l>>1]=(b[l>>1]|0)+1<<16>>16;break}}else{u=a+(o<<2)+2684|0;b[u>>1]=(e[u>>1]|0)+p}}while(0);if(r<<16>>16==0){v=o;m=138;n=3;h=q;o=s;g=v;continue}v=o;m=t?6:7;n=t?3:4;h=q;o=s;g=v}i=f;return}function ri(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=i;d=zi(ba(c,b)|0)|0;i=a;return d|0}function si(a,b){a=a|0;b=b|0;a=i;Ai(b);i=a;return}function ti(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;e=i;f=a>>>16;g=a&65535;if((c|0)==1){a=(d[b]|0)+g|0;h=a>>>0>65520?a+ -65521|0:a;a=h+f|0;j=(a>>>0>65520?a+15|0:a)<<16|h;i=e;return j|0}if((b|0)==0){j=1;i=e;return j|0}if(c>>>0<16){if((c|0)==0){k=g;l=f}else{h=b;a=c;m=g;n=f;while(1){o=a+ -1|0;p=(d[h]|0)+m|0;q=p+n|0;if((o|0)==0){k=p;l=q;break}else{h=h+1|0;a=o;m=p;n=q}}}j=((l>>>0)%65521|0)<<16|(k>>>0>65520?k+ -65521|0:k);i=e;return j|0}if(c>>>0>5551){k=b;l=c;n=g;m=f;do{l=l+ -5552|0;a=k;h=n;q=347;p=m;while(1){o=(d[a]|0)+h|0;r=o+(d[a+1|0]|0)|0;s=r+(d[a+2|0]|0)|0;t=s+(d[a+3|0]|0)|0;u=t+(d[a+4|0]|0)|0;v=u+(d[a+5|0]|0)|0;w=v+(d[a+6|0]|0)|0;x=w+(d[a+7|0]|0)|0;y=x+(d[a+8|0]|0)|0;z=y+(d[a+9|0]|0)|0;A=z+(d[a+10|0]|0)|0;B=A+(d[a+11|0]|0)|0;C=B+(d[a+12|0]|0)|0;D=C+(d[a+13|0]|0)|0;E=D+(d[a+14|0]|0)|0;h=E+(d[a+15|0]|0)|0;p=o+p+r+s+t+u+v+w+x+y+z+A+B+C+D+E+h|0;q=q+ -1|0;if((q|0)==0){break}else{a=a+16|0}}k=k+5552|0;n=(h>>>0)%65521|0;m=(p>>>0)%65521|0}while(l>>>0>5551);if((l|0)!=0){if(l>>>0>15){F=l;G=k;H=n;I=m;J=15}else{K=l;L=k;M=n;N=m;J=16}}else{O=n;P=m}}else{F=c;G=b;H=g;I=f;J=15}if((J|0)==15){while(1){J=0;F=F+ -16|0;f=(d[G]|0)+H|0;g=f+(d[G+1|0]|0)|0;b=g+(d[G+2|0]|0)|0;c=b+(d[G+3|0]|0)|0;m=c+(d[G+4|0]|0)|0;n=m+(d[G+5|0]|0)|0;k=n+(d[G+6|0]|0)|0;l=k+(d[G+7|0]|0)|0;a=l+(d[G+8|0]|0)|0;q=a+(d[G+9|0]|0)|0;E=q+(d[G+10|0]|0)|0;D=E+(d[G+11|0]|0)|0;C=D+(d[G+12|0]|0)|0;B=C+(d[G+13|0]|0)|0;A=B+(d[G+14|0]|0)|0;H=A+(d[G+15|0]|0)|0;I=f+I+g+b+c+m+n+k+l+a+q+E+D+C+B+A+H|0;G=G+16|0;if(!(F>>>0>15)){break}else{J=15}}if((F|0)==0){Q=H;R=I;J=17}else{K=F;L=G;M=H;N=I;J=16}}if((J|0)==16){while(1){J=0;I=K+ -1|0;H=(d[L]|0)+M|0;G=H+N|0;if((I|0)==0){Q=H;R=G;J=17;break}else{K=I;L=L+1|0;M=H;N=G;J=16}}}if((J|0)==17){O=(Q>>>0)%65521|0;P=(R>>>0)%65521|0}j=P<<16|O;i=e;return j|0}function ui(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;f=i;if((b|0)==0){g=0;i=f;return g|0}h=~a;a:do{if((e|0)!=0){a=b;j=e;k=h;while(1){if((a&3|0)==0){break}l=c[139968+(((d[a]|0)^k&255)<<2)>>2]^k>>>8;m=j+ -1|0;if((m|0)==0){n=l;break a}else{a=a+1|0;j=m;k=l}}if(j>>>0>31){l=j;m=a;o=k;while(1){p=c[m>>2]^o;q=c[142016+((p>>>8&255)<<2)>>2]^c[143040+((p&255)<<2)>>2]^c[140992+((p>>>16&255)<<2)>>2]^c[139968+(p>>>24<<2)>>2]^c[m+4>>2];p=c[142016+((q>>>8&255)<<2)>>2]^c[143040+((q&255)<<2)>>2]^c[140992+((q>>>16&255)<<2)>>2]^c[139968+(q>>>24<<2)>>2]^c[m+8>>2];q=c[142016+((p>>>8&255)<<2)>>2]^c[143040+((p&255)<<2)>>2]^c[140992+((p>>>16&255)<<2)>>2]^c[139968+(p>>>24<<2)>>2]^c[m+12>>2];p=c[142016+((q>>>8&255)<<2)>>2]^c[143040+((q&255)<<2)>>2]^c[140992+((q>>>16&255)<<2)>>2]^c[139968+(q>>>24<<2)>>2]^c[m+16>>2];q=c[142016+((p>>>8&255)<<2)>>2]^c[143040+((p&255)<<2)>>2]^c[140992+((p>>>16&255)<<2)>>2]^c[139968+(p>>>24<<2)>>2]^c[m+20>>2];p=c[142016+((q>>>8&255)<<2)>>2]^c[143040+((q&255)<<2)>>2]^c[140992+((q>>>16&255)<<2)>>2]^c[139968+(q>>>24<<2)>>2]^c[m+24>>2];q=m+32|0;r=c[142016+((p>>>8&255)<<2)>>2]^c[143040+((p&255)<<2)>>2]^c[140992+((p>>>16&255)<<2)>>2]^c[139968+(p>>>24<<2)>>2]^c[m+28>>2];p=c[142016+((r>>>8&255)<<2)>>2]^c[143040+((r&255)<<2)>>2]^c[140992+((r>>>16&255)<<2)>>2]^c[139968+(r>>>24<<2)>>2];r=l+ -32|0;if(r>>>0>31){l=r;m=q;o=p}else{s=r;t=q;u=p;break}}}else{s=j;t=a;u=k}if(s>>>0>3){o=s;m=t;l=u;while(1){p=m+4|0;q=c[m>>2]^l;r=c[142016+((q>>>8&255)<<2)>>2]^c[143040+((q&255)<<2)>>2]^c[140992+((q>>>16&255)<<2)>>2]^c[139968+(q>>>24<<2)>>2];q=o+ -4|0;if(q>>>0>3){o=q;m=p;l=r}else{v=q;w=p;x=r;break}}}else{v=s;w=t;x=u}if((v|0)==0){n=x}else{l=w;m=v;o=x;while(1){k=c[139968+(((d[l]|0)^o&255)<<2)>>2]^o>>>8;a=m+ -1|0;if((a|0)==0){n=k;break}else{l=l+1|0;m=a;o=k}}}}else{n=h}}while(0);g=~n;i=f;return g|0}function vi(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0;g=i;h=c[e+28>>2]|0;j=c[e>>2]|0;k=e+4|0;l=j+((c[k>>2]|0)+ -6)|0;m=e+12|0;n=c[m>>2]|0;o=e+16|0;p=c[o>>2]|0;q=n+(p+ -258)|0;r=c[h+44>>2]|0;s=c[h+48>>2]|0;t=c[h+52>>2]|0;u=h+56|0;v=h+60|0;w=c[h+76>>2]|0;x=c[h+80>>2]|0;y=(1<<c[h+84>>2])+ -1|0;z=(1<<c[h+88>>2])+ -1|0;A=n+(p+~f)|0;f=h+7104|0;p=t+ -1|0;B=(s|0)==0;C=(c[h+40>>2]|0)+ -1|0;D=C+s|0;E=s+ -1|0;F=A+ -1|0;G=A-s|0;H=c[v>>2]|0;I=c[u>>2]|0;J=j+ -1|0;j=n+ -1|0;a:while(1){if(H>>>0<15){n=J+2|0;K=H+16|0;L=((d[J+1|0]|0)<<H)+I+((d[n]|0)<<H+8)|0;M=n}else{K=H;L=I;M=J}n=L&y;N=a[w+(n<<2)|0]|0;O=b[w+(n<<2)+2>>1]|0;P=d[w+(n<<2)+1|0]|0;n=L>>>P;Q=K-P|0;do{if(!(N<<24>>24==0)){R=N&255;S=Q;T=n;P=O;while(1){if((R&16|0)!=0){break}if((R&64|0)!=0){U=55;break a}V=(T&(1<<R)+ -1)+(P&65535)|0;W=a[w+(V<<2)|0]|0;X=b[w+(V<<2)+2>>1]|0;Y=d[w+(V<<2)+1|0]|0;Z=T>>>Y;_=S-Y|0;if(W<<24>>24==0){U=6;break}else{R=W&255;S=_;T=Z;P=X}}if((U|0)==6){U=0;$=Z;aa=_;ba=X&255;U=7;break}W=P&65535;Y=R&15;if((Y|0)==0){ca=S;da=T;ea=M;fa=W}else{if(S>>>0<Y>>>0){V=M+1|0;ga=S+8|0;ha=((d[V]|0)<<S)+T|0;ia=V}else{ga=S;ha=T;ia=M}ca=ga-Y|0;da=ha>>>Y;ea=ia;fa=(ha&(1<<Y)+ -1)+W|0}if(ca>>>0<15){W=ea+2|0;ja=ca+16|0;ka=((d[ea+1|0]|0)<<ca)+da+((d[W]|0)<<ca+8)|0;la=W}else{ja=ca;ka=da;la=ea}W=ka&z;Y=b[x+(W<<2)+2>>1]|0;V=d[x+(W<<2)+1|0]|0;ma=ka>>>V;na=ja-V|0;V=d[x+(W<<2)|0]|0;if((V&16|0)==0){W=V;oa=ma;pa=na;qa=Y;while(1){if((W&64|0)!=0){U=52;break a}ra=(oa&(1<<W)+ -1)+(qa&65535)|0;sa=b[x+(ra<<2)+2>>1]|0;ta=d[x+(ra<<2)+1|0]|0;ua=oa>>>ta;va=pa-ta|0;ta=d[x+(ra<<2)|0]|0;if((ta&16|0)==0){W=ta;oa=ua;pa=va;qa=sa}else{wa=ua;xa=va;ya=ta;za=sa;break}}}else{wa=ma;xa=na;ya=V;za=Y}qa=za&65535;W=ya&15;if(xa>>>0<W>>>0){P=la+1|0;sa=((d[P]|0)<<xa)+wa|0;ta=xa+8|0;if(ta>>>0<W>>>0){va=la+2|0;Aa=xa+16|0;Ba=((d[va]|0)<<ta)+sa|0;Ca=va}else{Aa=ta;Ba=sa;Ca=P}}else{Aa=xa;Ba=wa;Ca=la}P=(Ba&(1<<W)+ -1)+qa|0;Da=Ba>>>W;Ea=Aa-W|0;W=j;qa=W-A|0;if(!(P>>>0>qa>>>0)){sa=j+(0-P)|0;ta=fa;va=j;while(1){a[va+1|0]=a[sa+1|0]|0;a[va+2|0]=a[sa+2|0]|0;ua=sa+3|0;Fa=va+3|0;a[Fa]=a[ua]|0;ta=ta+ -3|0;if(!(ta>>>0>2)){break}else{sa=ua;va=Fa}}if((ta|0)==0){Ga=Ea;Ha=Da;Ia=Ca;Ja=Fa;break}Y=va+4|0;a[Y]=a[sa+4|0]|0;if(!(ta>>>0>1)){Ga=Ea;Ha=Da;Ia=Ca;Ja=Y;break}Y=va+5|0;a[Y]=a[sa+5|0]|0;Ga=Ea;Ha=Da;Ia=Ca;Ja=Y;break}Y=P-qa|0;if(Y>>>0>r>>>0?(c[f>>2]|0)!=0:0){U=22;break a}do{if(B){V=t+(C-Y)|0;if(Y>>>0<fa>>>0){na=fa-Y|0;ma=P-W|0;ua=V;ra=Y;Ka=j;do{ua=ua+1|0;Ka=Ka+1|0;a[Ka]=a[ua]|0;ra=ra+ -1|0}while((ra|0)!=0);La=j+(F+ma+(1-P))|0;Ma=na;Na=j+(A+ma)|0}else{La=V;Ma=fa;Na=j}}else{if(!(s>>>0<Y>>>0)){ra=t+(E-Y)|0;if(!(Y>>>0<fa>>>0)){La=ra;Ma=fa;Na=j;break}ua=fa-Y|0;Ka=P-W|0;Oa=ra;ra=Y;Pa=j;do{Oa=Oa+1|0;Pa=Pa+1|0;a[Pa]=a[Oa]|0;ra=ra+ -1|0}while((ra|0)!=0);La=j+(F+Ka+(1-P))|0;Ma=ua;Na=j+(A+Ka)|0;break}ra=t+(D-Y)|0;Oa=Y-s|0;if(Oa>>>0<fa>>>0){Pa=fa-Oa|0;V=P-W|0;ma=ra;na=Oa;Oa=j;do{ma=ma+1|0;Oa=Oa+1|0;a[Oa]=a[ma]|0;na=na+ -1|0}while((na|0)!=0);na=j+(G+V)|0;if(s>>>0<Pa>>>0){ma=Pa-s|0;Oa=p;Ka=s;ua=na;do{Oa=Oa+1|0;ua=ua+1|0;a[ua]=a[Oa]|0;Ka=Ka+ -1|0}while((Ka|0)!=0);La=j+(F+V+(1-P))|0;Ma=ma;Na=j+(A+V)|0}else{La=p;Ma=Pa;Na=na}}else{La=ra;Ma=fa;Na=j}}}while(0);if(Ma>>>0>2){P=La;W=Ma;Y=Na;while(1){a[Y+1|0]=a[P+1|0]|0;a[Y+2|0]=a[P+2|0]|0;qa=P+3|0;sa=Y+3|0;a[sa]=a[qa]|0;va=W+ -3|0;if(va>>>0>2){P=qa;W=va;Y=sa}else{Qa=qa;Ra=va;Sa=sa;break}}}else{Qa=La;Ra=Ma;Sa=Na}if((Ra|0)!=0){Y=Sa+1|0;a[Y]=a[Qa+1|0]|0;if(Ra>>>0>1){W=Sa+2|0;a[W]=a[Qa+2|0]|0;Ga=Ea;Ha=Da;Ia=Ca;Ja=W}else{Ga=Ea;Ha=Da;Ia=Ca;Ja=Y}}else{Ga=Ea;Ha=Da;Ia=Ca;Ja=Sa}}else{$=n;aa=Q;ba=O&255;U=7}}while(0);if((U|0)==7){U=0;O=j+1|0;a[O]=ba;Ga=aa;Ha=$;Ia=M;Ja=O}if(Ia>>>0<l>>>0&Ja>>>0<q>>>0){H=Ga;I=Ha;J=Ia;j=Ja}else{Ta=Ga;Ua=Ha;Va=Ia;Wa=Ja;break}}do{if((U|0)==22){c[e+24>>2]=148160;c[h>>2]=29;Ta=Ea;Ua=Da;Va=Ca;Wa=j}else if((U|0)==52){c[e+24>>2]=148192;c[h>>2]=29;Ta=pa;Ua=oa;Va=la;Wa=j}else if((U|0)==55){if((R&32|0)==0){c[e+24>>2]=148216;c[h>>2]=29;Ta=S;Ua=T;Va=M;Wa=j;break}else{c[h>>2]=11;Ta=S;Ua=T;Va=M;Wa=j;break}}}while(0);j=Ta>>>3;M=Va+(0-j)|0;T=Ta-(j<<3)|0;Ta=(1<<T)+ -1&Ua;c[e>>2]=Va+(1-j);c[m>>2]=Wa+1;if(M>>>0<l>>>0){Xa=l-M|0}else{Xa=l-M|0}c[k>>2]=Xa+5;if(Wa>>>0<q>>>0){Ya=q-Wa|0;Za=Ya+257|0;c[o>>2]=Za;c[u>>2]=Ta;c[v>>2]=T;i=g;return}else{Ya=q-Wa|0;Za=Ya+257|0;c[o>>2]=Za;c[u>>2]=Ta;c[v>>2]=T;i=g;return}}function wi(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;a:do{if((c|0)==0){g=0}else{h=b;j=c;while(1){k=j>>>1;l=h+(ba(k,d)|0)|0;m=nb[e&31](a,l)|0;if((m|0)==0){g=l;break a}if((j|0)==1){g=0;break a}n=(m|0)<0;m=n?k:j-k|0;if((m|0)==0){g=0;break}else{h=n?h:l;j=m}}}}while(0);i=f;return g|0}function xi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0;f=i;i=i+944|0;g=f+680|0;h=f+424|0;j=f+192|0;k=f;l=ba(d,b)|0;if((l|0)==0){i=f;return}b=l-d|0;c[k+4>>2]=d;c[k>>2]=d;m=d;n=d;o=2;while(1){p=m+d+n|0;c[k+(o<<2)>>2]=p;if(p>>>0<l>>>0){q=n;n=p;o=o+1|0;m=q}else{break}}m=0-d|0;o=a+b|0;if((b|0)>0){b=(d|0)==0;n=d>>>0>256?256:d;l=(n|0)==(d|0);q=o;p=1;r=0;s=a;t=1;while(1){do{if((p&3|0)!=3){u=t+ -1|0;a:do{if((c[k+(u<<2)>>2]|0)>>>0<(q-s|0)>>>0){c[j>>2]=s;if((t|0)>1){v=t;w=s;x=s;y=1;while(1){z=w+m|0;A=v+ -2|0;B=w+(0-((c[k+(A<<2)>>2]|0)+d))|0;if((nb[e&31](x,B)|0)>-1?(nb[e&31](x,z)|0)>-1:0){C=y;break}D=y+1|0;E=j+(y<<2)|0;if((nb[e&31](B,z)|0)>-1){c[E>>2]=B;F=B;G=v+ -1|0}else{c[E>>2]=z;F=z;G=A}if((G|0)<=1){C=D;break}v=G;w=F;x=c[j>>2]|0;y=D}if((C|0)>=2?(y=j+(C<<2)|0,c[y>>2]=g,!b):0){if((C|0)>0){H=d;I=g}else{x=c[j>>2]|0;Qi(g|0,x|0,n|0)|0;if(l){break}else{J=d;K=n}while(1){J=J-K|0;K=J>>>0>256?256:J;Qi(g|0,x|0,K|0)|0;if((J|0)==(K|0)){break a}}}while(1){x=H>>>0>256?256:H;w=c[j>>2]|0;Qi(I|0,w|0,x|0)|0;v=w;w=0;while(1){D=w+1|0;A=c[j+(D<<2)>>2]|0;Qi(v|0,A|0,x|0)|0;c[j+(w<<2)>>2]=v+x;if((D|0)==(C|0)){break}else{v=A;w=D}}if((H|0)==(x|0)){break a}H=H-x|0;I=c[y>>2]|0}}}}else{yi(s,d,e,p,r,t,0,k)}}while(0);if((t|0)==1){L=p<<1;M=p>>>31|r<<1;N=0;break}else{y=u>>>0>31;w=y?0:p;v=y?t+ -33|0:u;L=w<<v;M=w>>>(32-v|0)|(y?p:r)<<v;N=1;break}}else{c[j>>2]=s;b:do{if((t|0)>1){v=t;y=s;w=s;D=1;while(1){A=y+m|0;z=v+ -2|0;E=y+(0-((c[k+(z<<2)>>2]|0)+d))|0;if((nb[e&31](w,E)|0)>-1?(nb[e&31](w,A)|0)>-1:0){O=D;break}B=D+1|0;P=j+(D<<2)|0;if((nb[e&31](E,A)|0)>-1){c[P>>2]=E;Q=E;R=v+ -1|0}else{c[P>>2]=A;Q=A;R=z}if((R|0)<=1){O=B;break}v=R;y=Q;w=c[j>>2]|0;D=B}if((O|0)>=2?(D=j+(O<<2)|0,c[D>>2]=h,!b):0){if((O|0)>0){S=d;T=h}else{w=c[j>>2]|0;Qi(h|0,w|0,n|0)|0;if(l){break}else{U=d;V=n}while(1){U=U-V|0;V=U>>>0>256?256:U;Qi(h|0,w|0,V|0)|0;if((U|0)==(V|0)){break b}}}while(1){w=S>>>0>256?256:S;y=c[j>>2]|0;Qi(T|0,y|0,w|0)|0;v=y;y=0;while(1){B=y+1|0;z=c[j+(B<<2)>>2]|0;Qi(v|0,z|0,w|0)|0;c[j+(y<<2)>>2]=v+w;if((B|0)==(O|0)){break}else{v=z;y=B}}if((S|0)==(w|0)){break b}S=S-w|0;T=c[D>>2]|0}}}}while(0);L=p>>>2|r<<30;M=r>>>2;N=t+2|0}}while(0);u=L|1;D=s+d|0;if(D>>>0<o>>>0){p=u;r=M;s=D;t=N}else{W=M;X=u;Y=D;Z=N;break}}}else{W=0;X=1;Y=a;Z=1}yi(Y,d,e,X,W,Z,0,k);a=X;X=W;W=Y;Y=Z;while(1){if((Y|0)==1){if((a|0)==1){if((X|0)==0){break}else{_=52}}}else{_=52}if((_|0)==52?(_=0,(Y|0)>=2):0){Z=a>>>30;N=Y+ -2|0;M=(a<<1&2147483646|Z<<31)^3;t=(Z|X<<2)>>>1;yi(W+(0-((c[k+(N<<2)>>2]|0)+d))|0,d,e,M,t,Y+ -1|0,1,k);s=t<<1|Z&1;Z=M<<1|1;M=W+m|0;yi(M,d,e,Z,s,N,1,k);a=Z;X=s;W=M;Y=N;continue}N=a+ -1|0;if((N|0)!=0){if((N&1|0)==0){M=N;N=0;do{N=N+1|0;M=M>>>1}while((M&1|0)==0);if((N|0)!=0){$=N}else{_=57}}else{_=57}if((_|0)==57){_=0;if((X|0)!=0){if((X&1|0)==0){M=X;s=0;while(1){Z=s+1|0;t=M>>>1;if((t&1|0)==0){M=t;s=Z}else{aa=Z;break}}}else{aa=0}}else{aa=32}$=(aa|0)==0?0:aa+32|0}if($>>>0>31){ca=$;_=62}else{da=$;ea=a;fa=X;ga=$}}else{ca=32;_=62}if((_|0)==62){_=0;da=ca+ -32|0;ea=X;fa=0;ga=ca}a=fa<<32-da|ea>>>da;X=fa>>>da;W=W+m|0;Y=ga+Y|0}i=f;return}function yi(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0;k=i;i=i+752|0;l=k+232|0;m=k+488|0;n=k;c[n>>2]=a;o=0-b|0;a:do{if((e|0)==1&(f|0)==0){p=a;q=g;r=h;s=1;t=18}else{u=g;v=a;w=h;x=e;y=f;z=a;A=1;while(1){B=v+(0-(c[j+(u<<2)>>2]|0))|0;if((nb[d&31](B,z)|0)<1){p=v;q=u;r=w;s=A;t=18;break a}if((w|0)==0&(u|0)>1){C=c[j+(u+ -2<<2)>>2]|0;if((nb[d&31](v+o|0,B)|0)>-1){D=v;E=u;F=A;break a}if((nb[d&31](v+(0-(C+b))|0,B)|0)>-1){D=v;E=u;F=A;break a}}C=A+1|0;c[n+(A<<2)>>2]=B;G=x+ -1|0;if((G|0)!=0){if((G&1|0)==0){H=G;G=0;do{G=G+1|0;H=H>>>1}while((H&1|0)==0);if((G|0)!=0){I=G}else{t=10}}else{t=10}if((t|0)==10){t=0;if((y|0)!=0){if((y&1|0)==0){H=y;J=0;while(1){K=J+1|0;L=H>>>1;if((L&1|0)==0){H=L;J=K}else{M=K;break}}}else{M=0}}else{M=32}I=(M|0)==0?0:M+32|0}if(I>>>0>31){N=I;t=15}else{O=I;P=x;Q=y;R=I}}else{N=32;t=15}if((t|0)==15){t=0;O=N+ -32|0;P=y;Q=0;R=N}J=Q<<32-O|P>>>O;H=Q>>>O;G=R+u|0;if((J|0)==1&(H|0)==0){D=B;E=G;F=C;break a}u=G;v=B;w=0;x=J;y=H;z=c[n>>2]|0;A=C}}}while(0);if((t|0)==18){if((r|0)==0){D=p;E=q;F=s}else{i=k;return}}b:do{if((F|0)>=2?(s=n+(F<<2)|0,c[s>>2]=l,(b|0)!=0):0){if((F|0)>0){S=b;T=l}else{q=b>>>0>256?256:b;p=c[n>>2]|0;Qi(l|0,p|0,q|0)|0;if((q|0)==(b|0)){break}else{U=b;V=q}while(1){U=U-V|0;V=U>>>0>256?256:U;Qi(l|0,p|0,V|0)|0;if((U|0)==(V|0)){break b}}}while(1){p=S>>>0>256?256:S;q=c[n>>2]|0;Qi(T|0,q|0,p|0)|0;r=q;q=0;while(1){t=q+1|0;R=c[n+(t<<2)>>2]|0;Qi(r|0,R|0,p|0)|0;c[n+(q<<2)>>2]=r+p;if((t|0)==(F|0)){break}else{r=R;q=t}}if((S|0)==(p|0)){break b}S=S-p|0;T=c[s>>2]|0}}}while(0);c[l>>2]=D;c:do{if((E|0)>1){T=E;S=D;F=D;n=1;while(1){V=S+o|0;U=T+ -2|0;s=S+(0-((c[j+(U<<2)>>2]|0)+b))|0;if((nb[d&31](F,s)|0)>-1?(nb[d&31](F,V)|0)>-1:0){W=n;break}q=n+1|0;r=l+(n<<2)|0;if((nb[d&31](s,V)|0)>-1){c[r>>2]=s;X=s;Y=T+ -1|0}else{c[r>>2]=V;X=V;Y=U}if((Y|0)<=1){W=q;break}T=Y;S=X;F=c[l>>2]|0;n=q}if((W|0)>=2?(n=l+(W<<2)|0,c[n>>2]=m,(b|0)!=0):0){if((W|0)>0){Z=b;_=m}else{F=b>>>0>256?256:b;S=c[l>>2]|0;Qi(m|0,S|0,F|0)|0;if((F|0)==(b|0)){$=m;break}else{aa=b;ba=F}while(1){F=aa-ba|0;T=F>>>0>256?256:F;Qi(m|0,S|0,T|0)|0;if((F|0)==(T|0)){$=m;break c}else{aa=F;ba=T}}}while(1){S=Z>>>0>256?256:Z;T=c[l>>2]|0;Qi(_|0,T|0,S|0)|0;F=T;T=0;while(1){q=T+1|0;U=c[l+(q<<2)>>2]|0;Qi(F|0,U|0,S|0)|0;c[l+(T<<2)>>2]=F+S;if((q|0)==(W|0)){break}else{F=U;T=q}}if((Z|0)==(S|0)){$=m;break c}Z=Z-S|0;_=c[n>>2]|0}}else{$=m}}else{$=m}}while(0);i=k;return}function zi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Ga=0,Ha=0,Ia=0,Ja=0,La=0,Ma=0;b=i;do{if(a>>>0<245){if(a>>>0<11){d=16}else{d=a+11&-8}e=d>>>3;f=c[37062]|0;g=f>>>e;if((g&3|0)!=0){h=(g&1^1)+e|0;j=h<<1;k=148288+(j<<2)|0;l=148288+(j+2<<2)|0;j=c[l>>2]|0;m=j+8|0;n=c[m>>2]|0;do{if((k|0)!=(n|0)){if(n>>>0<(c[148264>>2]|0)>>>0){Ya()}o=n+12|0;if((c[o>>2]|0)==(j|0)){c[o>>2]=k;c[l>>2]=n;break}else{Ya()}}else{c[37062]=f&~(1<<h)}}while(0);n=h<<3;c[j+4>>2]=n|3;l=j+(n|4)|0;c[l>>2]=c[l>>2]|1;p=m;i=b;return p|0}if(d>>>0>(c[148256>>2]|0)>>>0){if((g|0)!=0){l=2<<e;n=g<<e&(l|0-l);l=(n&0-n)+ -1|0;n=l>>>12&16;k=l>>>n;l=k>>>5&8;o=k>>>l;k=o>>>2&4;q=o>>>k;o=q>>>1&2;r=q>>>o;q=r>>>1&1;s=(l|n|k|o|q)+(r>>>q)|0;q=s<<1;r=148288+(q<<2)|0;o=148288+(q+2<<2)|0;q=c[o>>2]|0;k=q+8|0;n=c[k>>2]|0;do{if((r|0)!=(n|0)){if(n>>>0<(c[148264>>2]|0)>>>0){Ya()}l=n+12|0;if((c[l>>2]|0)==(q|0)){c[l>>2]=r;c[o>>2]=n;break}else{Ya()}}else{c[37062]=f&~(1<<s)}}while(0);f=s<<3;n=f-d|0;c[q+4>>2]=d|3;o=q+d|0;c[q+(d|4)>>2]=n|1;c[q+f>>2]=n;f=c[148256>>2]|0;if((f|0)!=0){r=c[148268>>2]|0;e=f>>>3;f=e<<1;g=148288+(f<<2)|0;m=c[37062]|0;j=1<<e;if((m&j|0)!=0){e=148288+(f+2<<2)|0;h=c[e>>2]|0;if(h>>>0<(c[148264>>2]|0)>>>0){Ya()}else{t=e;u=h}}else{c[37062]=m|j;t=148288+(f+2<<2)|0;u=g}c[t>>2]=r;c[u+12>>2]=r;c[r+8>>2]=u;c[r+12>>2]=g}c[148256>>2]=n;c[148268>>2]=o;p=k;i=b;return p|0}o=c[148252>>2]|0;if((o|0)!=0){n=(o&0-o)+ -1|0;o=n>>>12&16;g=n>>>o;n=g>>>5&8;r=g>>>n;g=r>>>2&4;f=r>>>g;r=f>>>1&2;j=f>>>r;f=j>>>1&1;m=c[148552+((n|o|g|r|f)+(j>>>f)<<2)>>2]|0;f=(c[m+4>>2]&-8)-d|0;j=m;r=m;while(1){m=c[j+16>>2]|0;if((m|0)==0){g=c[j+20>>2]|0;if((g|0)==0){break}else{v=g}}else{v=m}m=(c[v+4>>2]&-8)-d|0;g=m>>>0<f>>>0;f=g?m:f;j=v;r=g?v:r}j=c[148264>>2]|0;if(r>>>0<j>>>0){Ya()}k=r+d|0;if(!(r>>>0<k>>>0)){Ya()}q=c[r+24>>2]|0;s=c[r+12>>2]|0;do{if((s|0)==(r|0)){g=r+20|0;m=c[g>>2]|0;if((m|0)==0){o=r+16|0;n=c[o>>2]|0;if((n|0)==0){w=0;break}else{x=n;y=o}}else{x=m;y=g}while(1){g=x+20|0;m=c[g>>2]|0;if((m|0)!=0){x=m;y=g;continue}g=x+16|0;m=c[g>>2]|0;if((m|0)==0){break}else{x=m;y=g}}if(y>>>0<j>>>0){Ya()}else{c[y>>2]=0;w=x;break}}else{g=c[r+8>>2]|0;if(g>>>0<j>>>0){Ya()}m=g+12|0;if((c[m>>2]|0)!=(r|0)){Ya()}o=s+8|0;if((c[o>>2]|0)==(r|0)){c[m>>2]=s;c[o>>2]=g;w=s;break}else{Ya()}}}while(0);do{if((q|0)!=0){s=c[r+28>>2]|0;j=148552+(s<<2)|0;if((r|0)==(c[j>>2]|0)){c[j>>2]=w;if((w|0)==0){c[148252>>2]=c[148252>>2]&~(1<<s);break}}else{if(q>>>0<(c[148264>>2]|0)>>>0){Ya()}s=q+16|0;if((c[s>>2]|0)==(r|0)){c[s>>2]=w}else{c[q+20>>2]=w}if((w|0)==0){break}}if(w>>>0<(c[148264>>2]|0)>>>0){Ya()}c[w+24>>2]=q;s=c[r+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[w+16>>2]=s;c[s+24>>2]=w;break}}}while(0);s=c[r+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[w+20>>2]=s;c[s+24>>2]=w;break}}}}while(0);if(f>>>0<16){q=f+d|0;c[r+4>>2]=q|3;s=r+(q+4)|0;c[s>>2]=c[s>>2]|1}else{c[r+4>>2]=d|3;c[r+(d|4)>>2]=f|1;c[r+(f+d)>>2]=f;s=c[148256>>2]|0;if((s|0)!=0){q=c[148268>>2]|0;j=s>>>3;s=j<<1;g=148288+(s<<2)|0;o=c[37062]|0;m=1<<j;if((o&m|0)!=0){j=148288+(s+2<<2)|0;n=c[j>>2]|0;if(n>>>0<(c[148264>>2]|0)>>>0){Ya()}else{z=j;A=n}}else{c[37062]=o|m;z=148288+(s+2<<2)|0;A=g}c[z>>2]=q;c[A+12>>2]=q;c[q+8>>2]=A;c[q+12>>2]=g}c[148256>>2]=f;c[148268>>2]=k}p=r+8|0;i=b;return p|0}else{B=d}}else{B=d}}else{if(!(a>>>0>4294967231)){g=a+11|0;q=g&-8;s=c[148252>>2]|0;if((s|0)!=0){m=0-q|0;o=g>>>8;if((o|0)!=0){if(q>>>0>16777215){C=31}else{g=(o+1048320|0)>>>16&8;n=o<<g;o=(n+520192|0)>>>16&4;j=n<<o;n=(j+245760|0)>>>16&2;h=14-(o|g|n)+(j<<n>>>15)|0;C=q>>>(h+7|0)&1|h<<1}}else{C=0}h=c[148552+(C<<2)>>2]|0;a:do{if((h|0)==0){D=m;E=0;F=0}else{if((C|0)==31){G=0}else{G=25-(C>>>1)|0}n=m;j=0;g=q<<G;o=h;e=0;while(1){l=c[o+4>>2]&-8;H=l-q|0;if(H>>>0<n>>>0){if((l|0)==(q|0)){D=H;E=o;F=o;break a}else{I=H;J=o}}else{I=n;J=e}H=c[o+20>>2]|0;l=c[o+(g>>>31<<2)+16>>2]|0;K=(H|0)==0|(H|0)==(l|0)?j:H;if((l|0)==0){D=I;E=K;F=J;break}else{n=I;j=K;g=g<<1;o=l;e=J}}}}while(0);if((E|0)==0&(F|0)==0){h=2<<C;m=s&(h|0-h);if((m|0)==0){B=q;break}h=(m&0-m)+ -1|0;m=h>>>12&16;r=h>>>m;h=r>>>5&8;k=r>>>h;r=k>>>2&4;f=k>>>r;k=f>>>1&2;e=f>>>k;f=e>>>1&1;L=c[148552+((h|m|r|k|f)+(e>>>f)<<2)>>2]|0}else{L=E}if((L|0)==0){M=D;N=F}else{f=D;e=L;k=F;while(1){r=(c[e+4>>2]&-8)-q|0;m=r>>>0<f>>>0;h=m?r:f;r=m?e:k;m=c[e+16>>2]|0;if((m|0)!=0){f=h;e=m;k=r;continue}m=c[e+20>>2]|0;if((m|0)==0){M=h;N=r;break}else{f=h;e=m;k=r}}}if((N|0)!=0?M>>>0<((c[148256>>2]|0)-q|0)>>>0:0){k=c[148264>>2]|0;if(N>>>0<k>>>0){Ya()}e=N+q|0;if(!(N>>>0<e>>>0)){Ya()}f=c[N+24>>2]|0;s=c[N+12>>2]|0;do{if((s|0)==(N|0)){r=N+20|0;m=c[r>>2]|0;if((m|0)==0){h=N+16|0;o=c[h>>2]|0;if((o|0)==0){O=0;break}else{P=o;Q=h}}else{P=m;Q=r}while(1){r=P+20|0;m=c[r>>2]|0;if((m|0)!=0){P=m;Q=r;continue}r=P+16|0;m=c[r>>2]|0;if((m|0)==0){break}else{P=m;Q=r}}if(Q>>>0<k>>>0){Ya()}else{c[Q>>2]=0;O=P;break}}else{r=c[N+8>>2]|0;if(r>>>0<k>>>0){Ya()}m=r+12|0;if((c[m>>2]|0)!=(N|0)){Ya()}h=s+8|0;if((c[h>>2]|0)==(N|0)){c[m>>2]=s;c[h>>2]=r;O=s;break}else{Ya()}}}while(0);do{if((f|0)!=0){s=c[N+28>>2]|0;k=148552+(s<<2)|0;if((N|0)==(c[k>>2]|0)){c[k>>2]=O;if((O|0)==0){c[148252>>2]=c[148252>>2]&~(1<<s);break}}else{if(f>>>0<(c[148264>>2]|0)>>>0){Ya()}s=f+16|0;if((c[s>>2]|0)==(N|0)){c[s>>2]=O}else{c[f+20>>2]=O}if((O|0)==0){break}}if(O>>>0<(c[148264>>2]|0)>>>0){Ya()}c[O+24>>2]=f;s=c[N+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[O+16>>2]=s;c[s+24>>2]=O;break}}}while(0);s=c[N+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[O+20>>2]=s;c[s+24>>2]=O;break}}}}while(0);b:do{if(!(M>>>0<16)){c[N+4>>2]=q|3;c[N+(q|4)>>2]=M|1;c[N+(M+q)>>2]=M;f=M>>>3;if(M>>>0<256){s=f<<1;k=148288+(s<<2)|0;r=c[37062]|0;h=1<<f;if((r&h|0)!=0){f=148288+(s+2<<2)|0;m=c[f>>2]|0;if(m>>>0<(c[148264>>2]|0)>>>0){Ya()}else{R=f;S=m}}else{c[37062]=r|h;R=148288+(s+2<<2)|0;S=k}c[R>>2]=e;c[S+12>>2]=e;c[N+(q+8)>>2]=S;c[N+(q+12)>>2]=k;break}k=M>>>8;if((k|0)!=0){if(M>>>0>16777215){T=31}else{s=(k+1048320|0)>>>16&8;h=k<<s;k=(h+520192|0)>>>16&4;r=h<<k;h=(r+245760|0)>>>16&2;m=14-(k|s|h)+(r<<h>>>15)|0;T=M>>>(m+7|0)&1|m<<1}}else{T=0}m=148552+(T<<2)|0;c[N+(q+28)>>2]=T;c[N+(q+20)>>2]=0;c[N+(q+16)>>2]=0;h=c[148252>>2]|0;r=1<<T;if((h&r|0)==0){c[148252>>2]=h|r;c[m>>2]=e;c[N+(q+24)>>2]=m;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break}r=c[m>>2]|0;if((T|0)==31){U=0}else{U=25-(T>>>1)|0}c:do{if((c[r+4>>2]&-8|0)!=(M|0)){m=M<<U;h=r;while(1){V=h+(m>>>31<<2)+16|0;s=c[V>>2]|0;if((s|0)==0){break}if((c[s+4>>2]&-8|0)==(M|0)){W=s;break c}else{m=m<<1;h=s}}if(V>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[V>>2]=e;c[N+(q+24)>>2]=h;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break b}}else{W=r}}while(0);r=W+8|0;m=c[r>>2]|0;s=c[148264>>2]|0;if(W>>>0<s>>>0){Ya()}if(m>>>0<s>>>0){Ya()}else{c[m+12>>2]=e;c[r>>2]=e;c[N+(q+8)>>2]=m;c[N+(q+12)>>2]=W;c[N+(q+24)>>2]=0;break}}else{m=M+q|0;c[N+4>>2]=m|3;r=N+(m+4)|0;c[r>>2]=c[r>>2]|1}}while(0);p=N+8|0;i=b;return p|0}else{B=q}}else{B=q}}else{B=-1}}}while(0);N=c[148256>>2]|0;if(!(B>>>0>N>>>0)){M=N-B|0;W=c[148268>>2]|0;if(M>>>0>15){c[148268>>2]=W+B;c[148256>>2]=M;c[W+(B+4)>>2]=M|1;c[W+N>>2]=M;c[W+4>>2]=B|3}else{c[148256>>2]=0;c[148268>>2]=0;c[W+4>>2]=N|3;M=W+(N+4)|0;c[M>>2]=c[M>>2]|1}p=W+8|0;i=b;return p|0}W=c[148260>>2]|0;if(B>>>0<W>>>0){M=W-B|0;c[148260>>2]=M;W=c[148272>>2]|0;c[148272>>2]=W+B;c[W+(B+4)>>2]=M|1;c[W+4>>2]=B|3;p=W+8|0;i=b;return p|0}do{if((c[37180]|0)==0){W=Ka(30)|0;if((W+ -1&W|0)==0){c[148728>>2]=W;c[148724>>2]=W;c[148732>>2]=-1;c[148736>>2]=-1;c[148740>>2]=0;c[148692>>2]=0;c[37180]=(_a(0)|0)&-16^1431655768;break}else{Ya()}}}while(0);W=B+48|0;M=c[148728>>2]|0;N=B+47|0;V=M+N|0;U=0-M|0;M=V&U;if(!(M>>>0>B>>>0)){p=0;i=b;return p|0}T=c[148688>>2]|0;if((T|0)!=0?(S=c[148680>>2]|0,R=S+M|0,R>>>0<=S>>>0|R>>>0>T>>>0):0){p=0;i=b;return p|0}d:do{if((c[148692>>2]&4|0)==0){T=c[148272>>2]|0;e:do{if((T|0)!=0){R=148696|0;while(1){S=c[R>>2]|0;if(!(S>>>0>T>>>0)?(X=R+4|0,(S+(c[X>>2]|0)|0)>>>0>T>>>0):0){break}S=c[R+8>>2]|0;if((S|0)==0){Y=182;break e}else{R=S}}if((R|0)!=0){S=V-(c[148260>>2]|0)&U;if(S>>>0<2147483647){O=Fa(S|0)|0;P=(O|0)==((c[R>>2]|0)+(c[X>>2]|0)|0);Z=O;_=S;$=P?O:-1;aa=P?S:0;Y=191}else{ba=0}}else{Y=182}}else{Y=182}}while(0);do{if((Y|0)==182){T=Fa(0)|0;if((T|0)!=(-1|0)){q=T;S=c[148724>>2]|0;P=S+ -1|0;if((P&q|0)==0){ca=M}else{ca=M-q+(P+q&0-S)|0}S=c[148680>>2]|0;q=S+ca|0;if(ca>>>0>B>>>0&ca>>>0<2147483647){P=c[148688>>2]|0;if((P|0)!=0?q>>>0<=S>>>0|q>>>0>P>>>0:0){ba=0;break}P=Fa(ca|0)|0;q=(P|0)==(T|0);Z=P;_=ca;$=q?T:-1;aa=q?ca:0;Y=191}else{ba=0}}else{ba=0}}}while(0);f:do{if((Y|0)==191){q=0-_|0;if(($|0)!=(-1|0)){da=$;ea=aa;Y=202;break d}do{if((Z|0)!=(-1|0)&_>>>0<2147483647&_>>>0<W>>>0?(T=c[148728>>2]|0,P=N-_+T&0-T,P>>>0<2147483647):0){if((Fa(P|0)|0)==(-1|0)){Fa(q|0)|0;ba=aa;break f}else{fa=P+_|0;break}}else{fa=_}}while(0);if((Z|0)==(-1|0)){ba=aa}else{da=Z;ea=fa;Y=202;break d}}}while(0);c[148692>>2]=c[148692>>2]|4;ga=ba;Y=199}else{ga=0;Y=199}}while(0);if((((Y|0)==199?M>>>0<2147483647:0)?(ba=Fa(M|0)|0,M=Fa(0)|0,(M|0)!=(-1|0)&(ba|0)!=(-1|0)&ba>>>0<M>>>0):0)?(fa=M-ba|0,M=fa>>>0>(B+40|0)>>>0,M):0){da=ba;ea=M?fa:ga;Y=202}if((Y|0)==202){ga=(c[148680>>2]|0)+ea|0;c[148680>>2]=ga;if(ga>>>0>(c[148684>>2]|0)>>>0){c[148684>>2]=ga}ga=c[148272>>2]|0;g:do{if((ga|0)!=0){fa=148696|0;while(1){ha=c[fa>>2]|0;ia=fa+4|0;ja=c[ia>>2]|0;if((da|0)==(ha+ja|0)){Y=214;break}M=c[fa+8>>2]|0;if((M|0)==0){break}else{fa=M}}if(((Y|0)==214?(c[fa+12>>2]&8|0)==0:0)?ga>>>0>=ha>>>0&ga>>>0<da>>>0:0){c[ia>>2]=ja+ea;M=(c[148260>>2]|0)+ea|0;ba=ga+8|0;if((ba&7|0)==0){ka=0}else{ka=0-ba&7}ba=M-ka|0;c[148272>>2]=ga+ka;c[148260>>2]=ba;c[ga+(ka+4)>>2]=ba|1;c[ga+(M+4)>>2]=40;c[148276>>2]=c[148736>>2];break}if(da>>>0<(c[148264>>2]|0)>>>0){c[148264>>2]=da}M=da+ea|0;ba=148696|0;while(1){if((c[ba>>2]|0)==(M|0)){Y=224;break}Z=c[ba+8>>2]|0;if((Z|0)==0){break}else{ba=Z}}if((Y|0)==224?(c[ba+12>>2]&8|0)==0:0){c[ba>>2]=da;M=ba+4|0;c[M>>2]=(c[M>>2]|0)+ea;M=da+8|0;if((M&7|0)==0){la=0}else{la=0-M&7}M=da+(ea+8)|0;if((M&7|0)==0){ma=0}else{ma=0-M&7}M=da+(ma+ea)|0;fa=la+B|0;Z=da+fa|0;aa=M-(da+la)-B|0;c[da+(la+4)>>2]=B|3;h:do{if((M|0)!=(c[148272>>2]|0)){if((M|0)==(c[148268>>2]|0)){_=(c[148256>>2]|0)+aa|0;c[148256>>2]=_;c[148268>>2]=Z;c[da+(fa+4)>>2]=_|1;c[da+(_+fa)>>2]=_;break}_=ea+4|0;N=c[da+(_+ma)>>2]|0;if((N&3|0)==1){W=N&-8;$=N>>>3;do{if(!(N>>>0<256)){ca=c[da+((ma|24)+ea)>>2]|0;X=c[da+(ea+12+ma)>>2]|0;do{if((X|0)==(M|0)){U=ma|16;V=da+(_+U)|0;q=c[V>>2]|0;if((q|0)==0){R=da+(U+ea)|0;U=c[R>>2]|0;if((U|0)==0){na=0;break}else{oa=U;pa=R}}else{oa=q;pa=V}while(1){V=oa+20|0;q=c[V>>2]|0;if((q|0)!=0){oa=q;pa=V;continue}V=oa+16|0;q=c[V>>2]|0;if((q|0)==0){break}else{oa=q;pa=V}}if(pa>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[pa>>2]=0;na=oa;break}}else{V=c[da+((ma|8)+ea)>>2]|0;if(V>>>0<(c[148264>>2]|0)>>>0){Ya()}q=V+12|0;if((c[q>>2]|0)!=(M|0)){Ya()}R=X+8|0;if((c[R>>2]|0)==(M|0)){c[q>>2]=X;c[R>>2]=V;na=X;break}else{Ya()}}}while(0);if((ca|0)!=0){X=c[da+(ea+28+ma)>>2]|0;h=148552+(X<<2)|0;if((M|0)==(c[h>>2]|0)){c[h>>2]=na;if((na|0)==0){c[148252>>2]=c[148252>>2]&~(1<<X);break}}else{if(ca>>>0<(c[148264>>2]|0)>>>0){Ya()}X=ca+16|0;if((c[X>>2]|0)==(M|0)){c[X>>2]=na}else{c[ca+20>>2]=na}if((na|0)==0){break}}if(na>>>0<(c[148264>>2]|0)>>>0){Ya()}c[na+24>>2]=ca;X=ma|16;h=c[da+(X+ea)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[na+16>>2]=h;c[h+24>>2]=na;break}}}while(0);h=c[da+(_+X)>>2]|0;if((h|0)!=0){if(h>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[na+20>>2]=h;c[h+24>>2]=na;break}}}}else{h=c[da+((ma|8)+ea)>>2]|0;ca=c[da+(ea+12+ma)>>2]|0;V=148288+($<<1<<2)|0;if((h|0)!=(V|0)){if(h>>>0<(c[148264>>2]|0)>>>0){Ya()}if((c[h+12>>2]|0)!=(M|0)){Ya()}}if((ca|0)==(h|0)){c[37062]=c[37062]&~(1<<$);break}if((ca|0)!=(V|0)){if(ca>>>0<(c[148264>>2]|0)>>>0){Ya()}V=ca+8|0;if((c[V>>2]|0)==(M|0)){qa=V}else{Ya()}}else{qa=ca+8|0}c[h+12>>2]=ca;c[qa>>2]=h}}while(0);ra=da+((W|ma)+ea)|0;sa=W+aa|0}else{ra=M;sa=aa}$=ra+4|0;c[$>>2]=c[$>>2]&-2;c[da+(fa+4)>>2]=sa|1;c[da+(sa+fa)>>2]=sa;$=sa>>>3;if(sa>>>0<256){_=$<<1;N=148288+(_<<2)|0;h=c[37062]|0;ca=1<<$;if((h&ca|0)!=0){$=148288+(_+2<<2)|0;V=c[$>>2]|0;if(V>>>0<(c[148264>>2]|0)>>>0){Ya()}else{ta=$;ua=V}}else{c[37062]=h|ca;ta=148288+(_+2<<2)|0;ua=N}c[ta>>2]=Z;c[ua+12>>2]=Z;c[da+(fa+8)>>2]=ua;c[da+(fa+12)>>2]=N;break}N=sa>>>8;if((N|0)!=0){if(sa>>>0>16777215){va=31}else{_=(N+1048320|0)>>>16&8;ca=N<<_;N=(ca+520192|0)>>>16&4;h=ca<<N;ca=(h+245760|0)>>>16&2;V=14-(N|_|ca)+(h<<ca>>>15)|0;va=sa>>>(V+7|0)&1|V<<1}}else{va=0}V=148552+(va<<2)|0;c[da+(fa+28)>>2]=va;c[da+(fa+20)>>2]=0;c[da+(fa+16)>>2]=0;ca=c[148252>>2]|0;h=1<<va;if((ca&h|0)==0){c[148252>>2]=ca|h;c[V>>2]=Z;c[da+(fa+24)>>2]=V;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break}h=c[V>>2]|0;if((va|0)==31){wa=0}else{wa=25-(va>>>1)|0}i:do{if((c[h+4>>2]&-8|0)!=(sa|0)){V=sa<<wa;ca=h;while(1){xa=ca+(V>>>31<<2)+16|0;_=c[xa>>2]|0;if((_|0)==0){break}if((c[_+4>>2]&-8|0)==(sa|0)){ya=_;break i}else{V=V<<1;ca=_}}if(xa>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[xa>>2]=Z;c[da+(fa+24)>>2]=ca;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break h}}else{ya=h}}while(0);h=ya+8|0;W=c[h>>2]|0;V=c[148264>>2]|0;if(ya>>>0<V>>>0){Ya()}if(W>>>0<V>>>0){Ya()}else{c[W+12>>2]=Z;c[h>>2]=Z;c[da+(fa+8)>>2]=W;c[da+(fa+12)>>2]=ya;c[da+(fa+24)>>2]=0;break}}else{W=(c[148260>>2]|0)+aa|0;c[148260>>2]=W;c[148272>>2]=Z;c[da+(fa+4)>>2]=W|1}}while(0);p=da+(la|8)|0;i=b;return p|0}fa=148696|0;while(1){za=c[fa>>2]|0;if(!(za>>>0>ga>>>0)?(Aa=c[fa+4>>2]|0,Ba=za+Aa|0,Ba>>>0>ga>>>0):0){break}fa=c[fa+8>>2]|0}fa=za+(Aa+ -39)|0;if((fa&7|0)==0){Ca=0}else{Ca=0-fa&7}fa=za+(Aa+ -47+Ca)|0;Z=fa>>>0<(ga+16|0)>>>0?ga:fa;fa=Z+8|0;aa=da+8|0;if((aa&7|0)==0){Da=0}else{Da=0-aa&7}aa=ea+ -40-Da|0;c[148272>>2]=da+Da;c[148260>>2]=aa;c[da+(Da+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[148276>>2]=c[148736>>2];c[Z+4>>2]=27;c[fa+0>>2]=c[148696>>2];c[fa+4>>2]=c[148700>>2];c[fa+8>>2]=c[148704>>2];c[fa+12>>2]=c[148708>>2];c[148696>>2]=da;c[148700>>2]=ea;c[148708>>2]=0;c[148704>>2]=fa;fa=Z+28|0;c[fa>>2]=7;if((Z+32|0)>>>0<Ba>>>0){aa=fa;while(1){fa=aa+4|0;c[fa>>2]=7;if((aa+8|0)>>>0<Ba>>>0){aa=fa}else{break}}}if((Z|0)!=(ga|0)){aa=Z-ga|0;fa=ga+(aa+4)|0;c[fa>>2]=c[fa>>2]&-2;c[ga+4>>2]=aa|1;c[ga+aa>>2]=aa;fa=aa>>>3;if(aa>>>0<256){M=fa<<1;ba=148288+(M<<2)|0;W=c[37062]|0;h=1<<fa;if((W&h|0)!=0){fa=148288+(M+2<<2)|0;V=c[fa>>2]|0;if(V>>>0<(c[148264>>2]|0)>>>0){Ya()}else{Ea=fa;Ga=V}}else{c[37062]=W|h;Ea=148288+(M+2<<2)|0;Ga=ba}c[Ea>>2]=ga;c[Ga+12>>2]=ga;c[ga+8>>2]=Ga;c[ga+12>>2]=ba;break}ba=aa>>>8;if((ba|0)!=0){if(aa>>>0>16777215){Ha=31}else{M=(ba+1048320|0)>>>16&8;h=ba<<M;ba=(h+520192|0)>>>16&4;W=h<<ba;h=(W+245760|0)>>>16&2;V=14-(ba|M|h)+(W<<h>>>15)|0;Ha=aa>>>(V+7|0)&1|V<<1}}else{Ha=0}V=148552+(Ha<<2)|0;c[ga+28>>2]=Ha;c[ga+20>>2]=0;c[ga+16>>2]=0;h=c[148252>>2]|0;W=1<<Ha;if((h&W|0)==0){c[148252>>2]=h|W;c[V>>2]=ga;c[ga+24>>2]=V;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break}W=c[V>>2]|0;if((Ha|0)==31){Ia=0}else{Ia=25-(Ha>>>1)|0}j:do{if((c[W+4>>2]&-8|0)!=(aa|0)){V=aa<<Ia;h=W;while(1){Ja=h+(V>>>31<<2)+16|0;M=c[Ja>>2]|0;if((M|0)==0){break}if((c[M+4>>2]&-8|0)==(aa|0)){La=M;break j}else{V=V<<1;h=M}}if(Ja>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[Ja>>2]=ga;c[ga+24>>2]=h;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break g}}else{La=W}}while(0);W=La+8|0;aa=c[W>>2]|0;Z=c[148264>>2]|0;if(La>>>0<Z>>>0){Ya()}if(aa>>>0<Z>>>0){Ya()}else{c[aa+12>>2]=ga;c[W>>2]=ga;c[ga+8>>2]=aa;c[ga+12>>2]=La;c[ga+24>>2]=0;break}}}else{aa=c[148264>>2]|0;if((aa|0)==0|da>>>0<aa>>>0){c[148264>>2]=da}c[148696>>2]=da;c[148700>>2]=ea;c[148708>>2]=0;c[148284>>2]=c[37180];c[148280>>2]=-1;aa=0;do{W=aa<<1;Z=148288+(W<<2)|0;c[148288+(W+3<<2)>>2]=Z;c[148288+(W+2<<2)>>2]=Z;aa=aa+1|0}while((aa|0)!=32);aa=da+8|0;if((aa&7|0)==0){Ma=0}else{Ma=0-aa&7}aa=ea+ -40-Ma|0;c[148272>>2]=da+Ma;c[148260>>2]=aa;c[da+(Ma+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[148276>>2]=c[148736>>2]}}while(0);ea=c[148260>>2]|0;if(ea>>>0>B>>>0){da=ea-B|0;c[148260>>2]=da;ea=c[148272>>2]|0;c[148272>>2]=ea+B;c[ea+(B+4)>>2]=da|1;c[ea+4>>2]=B|3;p=ea+8|0;i=b;return p|0}}c[(Ua()|0)>>2]=12;p=0;i=b;return p|0}function Ai(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;if((a|0)==0){i=b;return}d=a+ -8|0;e=c[148264>>2]|0;if(d>>>0<e>>>0){Ya()}f=c[a+ -4>>2]|0;g=f&3;if((g|0)==1){Ya()}h=f&-8;j=a+(h+ -8)|0;do{if((f&1|0)==0){k=c[d>>2]|0;if((g|0)==0){i=b;return}l=-8-k|0;m=a+l|0;n=k+h|0;if(m>>>0<e>>>0){Ya()}if((m|0)==(c[148268>>2]|0)){o=a+(h+ -4)|0;if((c[o>>2]&3|0)!=3){p=m;q=n;break}c[148256>>2]=n;c[o>>2]=c[o>>2]&-2;c[a+(l+4)>>2]=n|1;c[j>>2]=n;i=b;return}o=k>>>3;if(k>>>0<256){k=c[a+(l+8)>>2]|0;r=c[a+(l+12)>>2]|0;s=148288+(o<<1<<2)|0;if((k|0)!=(s|0)){if(k>>>0<e>>>0){Ya()}if((c[k+12>>2]|0)!=(m|0)){Ya()}}if((r|0)==(k|0)){c[37062]=c[37062]&~(1<<o);p=m;q=n;break}if((r|0)!=(s|0)){if(r>>>0<e>>>0){Ya()}s=r+8|0;if((c[s>>2]|0)==(m|0)){t=s}else{Ya()}}else{t=r+8|0}c[k+12>>2]=r;c[t>>2]=k;p=m;q=n;break}k=c[a+(l+24)>>2]|0;r=c[a+(l+12)>>2]|0;do{if((r|0)==(m|0)){s=a+(l+20)|0;o=c[s>>2]|0;if((o|0)==0){u=a+(l+16)|0;v=c[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=o;y=s}while(1){s=x+20|0;o=c[s>>2]|0;if((o|0)!=0){x=o;y=s;continue}s=x+16|0;o=c[s>>2]|0;if((o|0)==0){break}else{x=o;y=s}}if(y>>>0<e>>>0){Ya()}else{c[y>>2]=0;w=x;break}}else{s=c[a+(l+8)>>2]|0;if(s>>>0<e>>>0){Ya()}o=s+12|0;if((c[o>>2]|0)!=(m|0)){Ya()}u=r+8|0;if((c[u>>2]|0)==(m|0)){c[o>>2]=r;c[u>>2]=s;w=r;break}else{Ya()}}}while(0);if((k|0)!=0){r=c[a+(l+28)>>2]|0;s=148552+(r<<2)|0;if((m|0)==(c[s>>2]|0)){c[s>>2]=w;if((w|0)==0){c[148252>>2]=c[148252>>2]&~(1<<r);p=m;q=n;break}}else{if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}r=k+16|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=w}else{c[k+20>>2]=w}if((w|0)==0){p=m;q=n;break}}if(w>>>0<(c[148264>>2]|0)>>>0){Ya()}c[w+24>>2]=k;r=c[a+(l+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[w+16>>2]=r;c[r+24>>2]=w;break}}}while(0);r=c[a+(l+20)>>2]|0;if((r|0)!=0){if(r>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[w+20>>2]=r;c[r+24>>2]=w;p=m;q=n;break}}else{p=m;q=n}}else{p=m;q=n}}else{p=d;q=h}}while(0);if(!(p>>>0<j>>>0)){Ya()}d=a+(h+ -4)|0;w=c[d>>2]|0;if((w&1|0)==0){Ya()}if((w&2|0)==0){if((j|0)==(c[148272>>2]|0)){e=(c[148260>>2]|0)+q|0;c[148260>>2]=e;c[148272>>2]=p;c[p+4>>2]=e|1;if((p|0)!=(c[148268>>2]|0)){i=b;return}c[148268>>2]=0;c[148256>>2]=0;i=b;return}if((j|0)==(c[148268>>2]|0)){e=(c[148256>>2]|0)+q|0;c[148256>>2]=e;c[148268>>2]=p;c[p+4>>2]=e|1;c[p+e>>2]=e;i=b;return}e=(w&-8)+q|0;x=w>>>3;do{if(!(w>>>0<256)){y=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(j|0)){g=a+(h+12)|0;f=c[g>>2]|0;if((f|0)==0){r=a+(h+8)|0;k=c[r>>2]|0;if((k|0)==0){z=0;break}else{A=k;B=r}}else{A=f;B=g}while(1){g=A+20|0;f=c[g>>2]|0;if((f|0)!=0){A=f;B=g;continue}g=A+16|0;f=c[g>>2]|0;if((f|0)==0){break}else{A=f;B=g}}if(B>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[B>>2]=0;z=A;break}}else{g=c[a+h>>2]|0;if(g>>>0<(c[148264>>2]|0)>>>0){Ya()}f=g+12|0;if((c[f>>2]|0)!=(j|0)){Ya()}r=t+8|0;if((c[r>>2]|0)==(j|0)){c[f>>2]=t;c[r>>2]=g;z=t;break}else{Ya()}}}while(0);if((y|0)!=0){t=c[a+(h+20)>>2]|0;n=148552+(t<<2)|0;if((j|0)==(c[n>>2]|0)){c[n>>2]=z;if((z|0)==0){c[148252>>2]=c[148252>>2]&~(1<<t);break}}else{if(y>>>0<(c[148264>>2]|0)>>>0){Ya()}t=y+16|0;if((c[t>>2]|0)==(j|0)){c[t>>2]=z}else{c[y+20>>2]=z}if((z|0)==0){break}}if(z>>>0<(c[148264>>2]|0)>>>0){Ya()}c[z+24>>2]=y;t=c[a+(h+8)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[z+16>>2]=t;c[t+24>>2]=z;break}}}while(0);t=c[a+(h+12)>>2]|0;if((t|0)!=0){if(t>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[z+20>>2]=t;c[t+24>>2]=z;break}}}}else{t=c[a+h>>2]|0;y=c[a+(h|4)>>2]|0;n=148288+(x<<1<<2)|0;if((t|0)!=(n|0)){if(t>>>0<(c[148264>>2]|0)>>>0){Ya()}if((c[t+12>>2]|0)!=(j|0)){Ya()}}if((y|0)==(t|0)){c[37062]=c[37062]&~(1<<x);break}if((y|0)!=(n|0)){if(y>>>0<(c[148264>>2]|0)>>>0){Ya()}n=y+8|0;if((c[n>>2]|0)==(j|0)){C=n}else{Ya()}}else{C=y+8|0}c[t+12>>2]=y;c[C>>2]=t}}while(0);c[p+4>>2]=e|1;c[p+e>>2]=e;if((p|0)==(c[148268>>2]|0)){c[148256>>2]=e;i=b;return}else{D=e}}else{c[d>>2]=w&-2;c[p+4>>2]=q|1;c[p+q>>2]=q;D=q}q=D>>>3;if(D>>>0<256){w=q<<1;d=148288+(w<<2)|0;e=c[37062]|0;C=1<<q;if((e&C|0)!=0){q=148288+(w+2<<2)|0;j=c[q>>2]|0;if(j>>>0<(c[148264>>2]|0)>>>0){Ya()}else{E=q;F=j}}else{c[37062]=e|C;E=148288+(w+2<<2)|0;F=d}c[E>>2]=p;c[F+12>>2]=p;c[p+8>>2]=F;c[p+12>>2]=d;i=b;return}d=D>>>8;if((d|0)!=0){if(D>>>0>16777215){G=31}else{F=(d+1048320|0)>>>16&8;E=d<<F;d=(E+520192|0)>>>16&4;w=E<<d;E=(w+245760|0)>>>16&2;C=14-(d|F|E)+(w<<E>>>15)|0;G=D>>>(C+7|0)&1|C<<1}}else{G=0}C=148552+(G<<2)|0;c[p+28>>2]=G;c[p+20>>2]=0;c[p+16>>2]=0;E=c[148252>>2]|0;w=1<<G;a:do{if((E&w|0)!=0){F=c[C>>2]|0;if((G|0)==31){H=0}else{H=25-(G>>>1)|0}b:do{if((c[F+4>>2]&-8|0)!=(D|0)){d=D<<H;e=F;while(1){I=e+(d>>>31<<2)+16|0;j=c[I>>2]|0;if((j|0)==0){break}if((c[j+4>>2]&-8|0)==(D|0)){J=j;break b}else{d=d<<1;e=j}}if(I>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[I>>2]=p;c[p+24>>2]=e;c[p+12>>2]=p;c[p+8>>2]=p;break a}}else{J=F}}while(0);F=J+8|0;d=c[F>>2]|0;j=c[148264>>2]|0;if(J>>>0<j>>>0){Ya()}if(d>>>0<j>>>0){Ya()}else{c[d+12>>2]=p;c[F>>2]=p;c[p+8>>2]=d;c[p+12>>2]=J;c[p+24>>2]=0;break}}else{c[148252>>2]=E|w;c[C>>2]=p;c[p+24>>2]=C;c[p+12>>2]=p;c[p+8>>2]=p}}while(0);p=(c[148280>>2]|0)+ -1|0;c[148280>>2]=p;if((p|0)==0){K=148704|0}else{i=b;return}while(1){p=c[K>>2]|0;if((p|0)==0){break}else{K=p+8|0}}c[148280>>2]=-1;i=b;return}function Bi(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;do{if((a|0)!=0){if(b>>>0>4294967231){c[(Ua()|0)>>2]=12;e=0;break}if(b>>>0<11){f=16}else{f=b+11&-8}g=Ci(a+ -8|0,f)|0;if((g|0)!=0){e=g+8|0;break}g=zi(b)|0;if((g|0)==0){e=0}else{h=c[a+ -4>>2]|0;j=(h&-8)-((h&3|0)==0?8:4)|0;Qi(g|0,a|0,(j>>>0<b>>>0?j:b)|0)|0;Ai(a);e=g}}else{e=zi(b)|0}}while(0);i=d;return e|0}function Ci(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;e=a+4|0;f=c[e>>2]|0;g=f&-8;h=a+g|0;j=c[148264>>2]|0;if(a>>>0<j>>>0){Ya()}k=f&3;if(!((k|0)!=1&a>>>0<h>>>0)){Ya()}l=a+(g|4)|0;m=c[l>>2]|0;if((m&1|0)==0){Ya()}if((k|0)==0){if(b>>>0<256){n=0;i=d;return n|0}if(!(g>>>0<(b+4|0)>>>0)?!((g-b|0)>>>0>c[148728>>2]<<1>>>0):0){n=a;i=d;return n|0}n=0;i=d;return n|0}if(!(g>>>0<b>>>0)){k=g-b|0;if(!(k>>>0>15)){n=a;i=d;return n|0}c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=k|3;c[l>>2]=c[l>>2]|1;Di(a+b|0,k);n=a;i=d;return n|0}if((h|0)==(c[148272>>2]|0)){k=(c[148260>>2]|0)+g|0;if(!(k>>>0>b>>>0)){n=0;i=d;return n|0}l=k-b|0;c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=l|1;c[148272>>2]=a+b;c[148260>>2]=l;n=a;i=d;return n|0}if((h|0)==(c[148268>>2]|0)){l=(c[148256>>2]|0)+g|0;if(l>>>0<b>>>0){n=0;i=d;return n|0}k=l-b|0;if(k>>>0>15){c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=k|1;c[a+l>>2]=k;o=a+(l+4)|0;c[o>>2]=c[o>>2]&-2;p=a+b|0;q=k}else{c[e>>2]=f&1|l|2;f=a+(l+4)|0;c[f>>2]=c[f>>2]|1;p=0;q=0}c[148256>>2]=q;c[148268>>2]=p;n=a;i=d;return n|0}if((m&2|0)!=0){n=0;i=d;return n|0}p=(m&-8)+g|0;if(p>>>0<b>>>0){n=0;i=d;return n|0}q=p-b|0;f=m>>>3;do{if(!(m>>>0<256)){l=c[a+(g+24)>>2]|0;k=c[a+(g+12)>>2]|0;do{if((k|0)==(h|0)){o=a+(g+20)|0;r=c[o>>2]|0;if((r|0)==0){s=a+(g+16)|0;t=c[s>>2]|0;if((t|0)==0){u=0;break}else{v=t;w=s}}else{v=r;w=o}while(1){o=v+20|0;r=c[o>>2]|0;if((r|0)!=0){v=r;w=o;continue}o=v+16|0;r=c[o>>2]|0;if((r|0)==0){break}else{v=r;w=o}}if(w>>>0<j>>>0){Ya()}else{c[w>>2]=0;u=v;break}}else{o=c[a+(g+8)>>2]|0;if(o>>>0<j>>>0){Ya()}r=o+12|0;if((c[r>>2]|0)!=(h|0)){Ya()}s=k+8|0;if((c[s>>2]|0)==(h|0)){c[r>>2]=k;c[s>>2]=o;u=k;break}else{Ya()}}}while(0);if((l|0)!=0){k=c[a+(g+28)>>2]|0;o=148552+(k<<2)|0;if((h|0)==(c[o>>2]|0)){c[o>>2]=u;if((u|0)==0){c[148252>>2]=c[148252>>2]&~(1<<k);break}}else{if(l>>>0<(c[148264>>2]|0)>>>0){Ya()}k=l+16|0;if((c[k>>2]|0)==(h|0)){c[k>>2]=u}else{c[l+20>>2]=u}if((u|0)==0){break}}if(u>>>0<(c[148264>>2]|0)>>>0){Ya()}c[u+24>>2]=l;k=c[a+(g+16)>>2]|0;do{if((k|0)!=0){if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[u+16>>2]=k;c[k+24>>2]=u;break}}}while(0);k=c[a+(g+20)>>2]|0;if((k|0)!=0){if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[u+20>>2]=k;c[k+24>>2]=u;break}}}}else{k=c[a+(g+8)>>2]|0;l=c[a+(g+12)>>2]|0;o=148288+(f<<1<<2)|0;if((k|0)!=(o|0)){if(k>>>0<j>>>0){Ya()}if((c[k+12>>2]|0)!=(h|0)){Ya()}}if((l|0)==(k|0)){c[37062]=c[37062]&~(1<<f);break}if((l|0)!=(o|0)){if(l>>>0<j>>>0){Ya()}o=l+8|0;if((c[o>>2]|0)==(h|0)){x=o}else{Ya()}}else{x=l+8|0}c[k+12>>2]=l;c[x>>2]=k}}while(0);if(q>>>0<16){c[e>>2]=p|c[e>>2]&1|2;x=a+(p|4)|0;c[x>>2]=c[x>>2]|1;n=a;i=d;return n|0}else{c[e>>2]=c[e>>2]&1|b|2;c[a+(b+4)>>2]=q|3;e=a+(p|4)|0;c[e>>2]=c[e>>2]|1;Di(a+b|0,q);n=a;i=d;return n|0}return 0}function Di(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;e=a+b|0;f=c[a+4>>2]|0;do{if((f&1|0)==0){g=c[a>>2]|0;if((f&3|0)==0){i=d;return}h=a+(0-g)|0;j=g+b|0;k=c[148264>>2]|0;if(h>>>0<k>>>0){Ya()}if((h|0)==(c[148268>>2]|0)){l=a+(b+4)|0;if((c[l>>2]&3|0)!=3){m=h;n=j;break}c[148256>>2]=j;c[l>>2]=c[l>>2]&-2;c[a+(4-g)>>2]=j|1;c[e>>2]=j;i=d;return}l=g>>>3;if(g>>>0<256){o=c[a+(8-g)>>2]|0;p=c[a+(12-g)>>2]|0;q=148288+(l<<1<<2)|0;if((o|0)!=(q|0)){if(o>>>0<k>>>0){Ya()}if((c[o+12>>2]|0)!=(h|0)){Ya()}}if((p|0)==(o|0)){c[37062]=c[37062]&~(1<<l);m=h;n=j;break}if((p|0)!=(q|0)){if(p>>>0<k>>>0){Ya()}q=p+8|0;if((c[q>>2]|0)==(h|0)){r=q}else{Ya()}}else{r=p+8|0}c[o+12>>2]=p;c[r>>2]=o;m=h;n=j;break}o=c[a+(24-g)>>2]|0;p=c[a+(12-g)>>2]|0;do{if((p|0)==(h|0)){q=16-g|0;l=a+(q+4)|0;s=c[l>>2]|0;if((s|0)==0){t=a+q|0;q=c[t>>2]|0;if((q|0)==0){u=0;break}else{v=q;w=t}}else{v=s;w=l}while(1){l=v+20|0;s=c[l>>2]|0;if((s|0)!=0){v=s;w=l;continue}l=v+16|0;s=c[l>>2]|0;if((s|0)==0){break}else{v=s;w=l}}if(w>>>0<k>>>0){Ya()}else{c[w>>2]=0;u=v;break}}else{l=c[a+(8-g)>>2]|0;if(l>>>0<k>>>0){Ya()}s=l+12|0;if((c[s>>2]|0)!=(h|0)){Ya()}t=p+8|0;if((c[t>>2]|0)==(h|0)){c[s>>2]=p;c[t>>2]=l;u=p;break}else{Ya()}}}while(0);if((o|0)!=0){p=c[a+(28-g)>>2]|0;k=148552+(p<<2)|0;if((h|0)==(c[k>>2]|0)){c[k>>2]=u;if((u|0)==0){c[148252>>2]=c[148252>>2]&~(1<<p);m=h;n=j;break}}else{if(o>>>0<(c[148264>>2]|0)>>>0){Ya()}p=o+16|0;if((c[p>>2]|0)==(h|0)){c[p>>2]=u}else{c[o+20>>2]=u}if((u|0)==0){m=h;n=j;break}}if(u>>>0<(c[148264>>2]|0)>>>0){Ya()}c[u+24>>2]=o;p=16-g|0;k=c[a+p>>2]|0;do{if((k|0)!=0){if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[u+16>>2]=k;c[k+24>>2]=u;break}}}while(0);k=c[a+(p+4)>>2]|0;if((k|0)!=0){if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[u+20>>2]=k;c[k+24>>2]=u;m=h;n=j;break}}else{m=h;n=j}}else{m=h;n=j}}else{m=a;n=b}}while(0);u=c[148264>>2]|0;if(e>>>0<u>>>0){Ya()}v=a+(b+4)|0;w=c[v>>2]|0;if((w&2|0)==0){if((e|0)==(c[148272>>2]|0)){r=(c[148260>>2]|0)+n|0;c[148260>>2]=r;c[148272>>2]=m;c[m+4>>2]=r|1;if((m|0)!=(c[148268>>2]|0)){i=d;return}c[148268>>2]=0;c[148256>>2]=0;i=d;return}if((e|0)==(c[148268>>2]|0)){r=(c[148256>>2]|0)+n|0;c[148256>>2]=r;c[148268>>2]=m;c[m+4>>2]=r|1;c[m+r>>2]=r;i=d;return}r=(w&-8)+n|0;f=w>>>3;do{if(!(w>>>0<256)){k=c[a+(b+24)>>2]|0;g=c[a+(b+12)>>2]|0;do{if((g|0)==(e|0)){o=a+(b+20)|0;l=c[o>>2]|0;if((l|0)==0){t=a+(b+16)|0;s=c[t>>2]|0;if((s|0)==0){x=0;break}else{y=s;z=t}}else{y=l;z=o}while(1){o=y+20|0;l=c[o>>2]|0;if((l|0)!=0){y=l;z=o;continue}o=y+16|0;l=c[o>>2]|0;if((l|0)==0){break}else{y=l;z=o}}if(z>>>0<u>>>0){Ya()}else{c[z>>2]=0;x=y;break}}else{o=c[a+(b+8)>>2]|0;if(o>>>0<u>>>0){Ya()}l=o+12|0;if((c[l>>2]|0)!=(e|0)){Ya()}t=g+8|0;if((c[t>>2]|0)==(e|0)){c[l>>2]=g;c[t>>2]=o;x=g;break}else{Ya()}}}while(0);if((k|0)!=0){g=c[a+(b+28)>>2]|0;j=148552+(g<<2)|0;if((e|0)==(c[j>>2]|0)){c[j>>2]=x;if((x|0)==0){c[148252>>2]=c[148252>>2]&~(1<<g);break}}else{if(k>>>0<(c[148264>>2]|0)>>>0){Ya()}g=k+16|0;if((c[g>>2]|0)==(e|0)){c[g>>2]=x}else{c[k+20>>2]=x}if((x|0)==0){break}}if(x>>>0<(c[148264>>2]|0)>>>0){Ya()}c[x+24>>2]=k;g=c[a+(b+16)>>2]|0;do{if((g|0)!=0){if(g>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[x+16>>2]=g;c[g+24>>2]=x;break}}}while(0);g=c[a+(b+20)>>2]|0;if((g|0)!=0){if(g>>>0<(c[148264>>2]|0)>>>0){Ya()}else{c[x+20>>2]=g;c[g+24>>2]=x;break}}}}else{g=c[a+(b+8)>>2]|0;k=c[a+(b+12)>>2]|0;j=148288+(f<<1<<2)|0;if((g|0)!=(j|0)){if(g>>>0<u>>>0){Ya()}if((c[g+12>>2]|0)!=(e|0)){Ya()}}if((k|0)==(g|0)){c[37062]=c[37062]&~(1<<f);break}if((k|0)!=(j|0)){if(k>>>0<u>>>0){Ya()}j=k+8|0;if((c[j>>2]|0)==(e|0)){A=j}else{Ya()}}else{A=k+8|0}c[g+12>>2]=k;c[A>>2]=g}}while(0);c[m+4>>2]=r|1;c[m+r>>2]=r;if((m|0)==(c[148268>>2]|0)){c[148256>>2]=r;i=d;return}else{B=r}}else{c[v>>2]=w&-2;c[m+4>>2]=n|1;c[m+n>>2]=n;B=n}n=B>>>3;if(B>>>0<256){w=n<<1;v=148288+(w<<2)|0;r=c[37062]|0;A=1<<n;if((r&A|0)!=0){n=148288+(w+2<<2)|0;e=c[n>>2]|0;if(e>>>0<(c[148264>>2]|0)>>>0){Ya()}else{C=n;D=e}}else{c[37062]=r|A;C=148288+(w+2<<2)|0;D=v}c[C>>2]=m;c[D+12>>2]=m;c[m+8>>2]=D;c[m+12>>2]=v;i=d;return}v=B>>>8;if((v|0)!=0){if(B>>>0>16777215){E=31}else{D=(v+1048320|0)>>>16&8;C=v<<D;v=(C+520192|0)>>>16&4;w=C<<v;C=(w+245760|0)>>>16&2;A=14-(v|D|C)+(w<<C>>>15)|0;E=B>>>(A+7|0)&1|A<<1}}else{E=0}A=148552+(E<<2)|0;c[m+28>>2]=E;c[m+20>>2]=0;c[m+16>>2]=0;C=c[148252>>2]|0;w=1<<E;if((C&w|0)==0){c[148252>>2]=C|w;c[A>>2]=m;c[m+24>>2]=A;c[m+12>>2]=m;c[m+8>>2]=m;i=d;return}w=c[A>>2]|0;if((E|0)==31){F=0}else{F=25-(E>>>1)|0}a:do{if((c[w+4>>2]&-8|0)==(B|0)){G=w}else{E=B<<F;A=w;while(1){H=A+(E>>>31<<2)+16|0;C=c[H>>2]|0;if((C|0)==0){break}if((c[C+4>>2]&-8|0)==(B|0)){G=C;break a}else{E=E<<1;A=C}}if(H>>>0<(c[148264>>2]|0)>>>0){Ya()}c[H>>2]=m;c[m+24>>2]=A;c[m+12>>2]=m;c[m+8>>2]=m;i=d;return}}while(0);H=G+8|0;B=c[H>>2]|0;w=c[148264>>2]|0;if(G>>>0<w>>>0){Ya()}if(B>>>0<w>>>0){Ya()}c[B+12>>2]=m;c[H>>2]=m;c[m+8>>2]=B;c[m+12>>2]=G;c[m+24>>2]=0;i=d;return}function Ei(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;a:do{if((d|0)==0){f=0}else{g=d;h=b;j=c;while(1){k=a[h]|0;l=a[j]|0;if(!(k<<24>>24==l<<24>>24)){break}m=g+ -1|0;if((m|0)==0){f=0;break a}else{g=m;h=h+1|0;j=j+1|0}}f=(k&255)-(l&255)|0}}while(0);i=e;return f|0}function Fi(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=a[b]|0;f=a[c]|0;if(e<<24>>24!=f<<24>>24|e<<24>>24==0|f<<24>>24==0){g=e;h=f;j=g&255;k=h&255;l=j-k|0;i=d;return l|0}else{m=b;n=c}while(1){c=m+1|0;b=n+1|0;f=a[c]|0;e=a[b]|0;if(f<<24>>24!=e<<24>>24|f<<24>>24==0|e<<24>>24==0){g=f;h=e;break}else{m=c;n=b}}j=g&255;k=h&255;l=j-k|0;i=d;return l|0}function Gi(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;if((e|0)==0){g=0;i=f;return g|0}h=a[b]|0;a:do{if(h<<24>>24==0){j=0;k=c}else{l=e;m=h;n=b;o=c;while(1){p=l+ -1|0;q=a[o]|0;if(!((p|0)!=0&q<<24>>24!=0&m<<24>>24==q<<24>>24)){j=m;k=o;break a}q=n+1|0;r=o+1|0;s=a[q]|0;if(s<<24>>24==0){j=0;k=r;break}else{l=p;m=s;n=q;o=r}}}}while(0);g=(j&255)-(d[k]|0)|0;i=f;return g|0}function Hi(){}function Ii(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(F=e,a-c>>>0|0)|0}function Ji(a){a=a|0;var b=0;b=(ba(c[a>>2]|0,31010991)|0)+1735287159&2147483647;c[a>>2]=b;return b|0}function Ki(){return Ji(o)|0}function Li(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function Mi(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}F=a<<c-32;return 0}function Ni(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function Oi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(F=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function Pi(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=0;return b>>>c-32|0}function Qi(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ia(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Ri(b,c){b=b|0;c=c|0;var d=0;do{a[b+d|0]=a[c+d|0];d=d+1|0}while(a[c+(d-1)|0]|0);return b|0}function Si(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=(b|0)<0?-1:0;return b>>c-32|0}function Ti(b){b=b|0;var c=0;c=a[n+(b>>>24)|0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)|0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)|0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)|0]|0)+24|0}function Ui(b){b=b|0;var c=0;c=a[m+(b&255)|0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)|0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)|0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)|0]|0)+24|0}function Vi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=ba(d,c)|0;f=a>>>16;a=(e>>>16)+(ba(d,f)|0)|0;d=b>>>16;b=ba(d,c)|0;return(F=(a>>>16)+(ba(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function Wi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=Ii(e^a,f^b,e,f)|0;b=F;a=g^e;e=h^f;f=Ii(($i(i,b,Ii(g^c,h^d,g,h)|0,F,0)|0)^a,F^e,a,e)|0;return f|0}function Xi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+8|0;g=f|0;h=b>>31|((b|0)<0?-1:0)<<1;j=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;l=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;m=Ii(h^a,j^b,h,j)|0;b=F;$i(m,b,Ii(k^d,l^e,k,l)|0,F,g)|0;l=Ii(c[g>>2]^h,c[g+4>>2]^j,h,j)|0;j=F;i=f;return(F=j,l)|0}function Yi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=Vi(e,a)|0;f=F;return(F=(ba(b,a)|0)+(ba(d,e)|0)+f|f&0,c|0|0)|0}function Zi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=$i(a,b,c,d,0)|0;return e|0}function _i(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+8|0;g=f|0;$i(a,b,d,e,g)|0;i=f;return(F=c[g+4>>2]|0,c[g>>2]|0)|0}



function pb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function qb(){return i|0}function rb(a){a=a|0;i=a}function sb(a,b){a=a|0;b=b|0;if((q|0)==0){q=a;r=b}}function tb(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function ub(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function vb(a){a=a|0;F=a}function wb(a){a=a|0;G=a}function xb(a){a=a|0;H=a}function yb(a){a=a|0;I=a}function zb(a){a=a|0;J=a}function Ab(a){a=a|0;K=a}function Bb(a){a=a|0;L=a}function Cb(a){a=a|0;M=a}function Db(a){a=a|0;N=a}function Eb(a){a=a|0;O=a}function Fb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+16|0;e=d;f=d+4|0;c[f>>2]=0;c[e>>2]=f;Kb(a,b,e)|0;i=d;return c[f>>2]|0}function Gb(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;if((c[a+8>>2]|0)!=0){tc(a)|0}gb[c[a+564>>2]&15](a);Mb(a);e=c[a+32>>2]|0;if((e|0)!=0){ne(e)}e=a+680|0;f=c[e>>2]|0;if((f|0)!=0){g=f;do{c[e>>2]=c[g>>2];ne(c[g+8>>2]|0);ne(g);g=c[e>>2]|0}while((g|0)!=0)}g=c[a+588>>2]|0;e=a+12|0;if((g|0)!=0?(c[e>>2]&512|0)!=0:0){ne(g)}if((c[e>>2]&2048|0)!=0){e=c[a+616>>2]|0;ob[c[a+624>>2]&3](c[a+628>>2]|0,c[a+612>>2]|0,e,((e|0)<0)<<31>>31)}e=a+656|0;g=c[e>>2]|0;if((g|0)!=0?(f=a+660|0,h=c[f>>2]|0,(h|0)!=0):0){j=g;g=h;h=0;while(1){k=c[j+(h<<2)>>2]|0;if((b[k+24>>1]|0)==65?(l=c[k+28>>2]|0,(Gi(8,l,4)|0)==0):0){ne(l);ne(k);m=c[f>>2]|0;n=c[e>>2]|0}else{m=g;n=j}h=h+1|0;if(!(h>>>0<m>>>0)){break}else{j=n;g=m}}ne(n)}n=a+688|0;m=c[n>>2]|0;if((m|0)==0){ne(a);i=d;return}g=a+684|0;j=c[g>>2]|0;h=m;m=0;while(1){if((c[j+(m<<4)+4>>2]|0)==0){o=h;p=j}else{ne(c[j+(m<<4)+12>>2]|0);o=c[n>>2]|0;p=c[g>>2]|0}m=m+1|0;if(!(m>>>0<o>>>0)){break}else{j=p;h=o}}ne(p);ne(a);i=d;return}function Hb(a){a=a|0;var b=0,d=0,e=0;b=i;d=c[a+644>>2]|0;e=c[a+628>>2]|0;Gb(a);jb[d&31](e)|0;i=b;return}function Ib(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;d=Jb(a,b,f)|0;i=e;return d|0}function Jb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+16|0;g=f;h=Wb(b,d,0)|0;if((h|0)==0){j=c[b+628>>2]|0;c[g>>2]=c[b>>2];c[g+4>>2]=d>>>0>65535?312:320;c[g+8>>2]=d;sc(j,760,840,g);k=0;i=f;return k|0}if(((d|0)!=257?(c[b+12>>2]&64|0)!=0:0)?(a[h+26|0]|0)==0:0){j=c[b+628>>2]|0;l=c[h+28>>2]|0;c[g>>2]=c[b>>2];c[g+4>>2]=l;sc(j,760,864,g);k=0;i=f;return k|0}k=fb[c[b+668>>2]&31](b,d,e)|0;i=f;return k|0}function Kb(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0,j=0;f=i;i=i+16|0;g=f;c[g>>2]=d;d=Wb(a,b,0)|0;if((d|0)==0){h=0;i=f;return h|0}if(!(b>>>0>65535)?(j=e[d+24>>1]|0,(1<<(j&31)&c[a+(j>>>5<<2)+40>>2]|0)==0):0){h=0;i=f;return h|0}h=fb[c[a+672>>2]&31](a,b,g)|0;i=f;return h|0}function Lb(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0,j=0;f=i;g=Wb(a,b,0)|0;if((g|0)==0){h=0;i=f;return h|0}if(!(b>>>0>65535)?(j=e[g+24>>1]|0,(1<<(j&31)&c[a+(j>>>5<<2)+40>>2]|0)==0):0){h=0;i=f;return h|0}h=fb[c[a+672>>2]&31](a,b,d)|0;i=f;return h|0}function Mb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;pe(a+40|0,0,4);d=a+108|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+112|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+140|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+144|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+148|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+160|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+188|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+220|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+212|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+200|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+204|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+208|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+172|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+176|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+44|0;c[d>>2]=c[d>>2]&-385;d=a+224|0;e=c[d>>2]|0;f=a+228|0;if((e|0)>0){a=e;e=0;while(1){g=c[(c[f>>2]|0)+(e*12|0)+8>>2]|0;if((g|0)==0){h=a}else{ne(g);h=c[d>>2]|0}e=e+1|0;if((e|0)>=(h|0)){break}else{a=h}}}c[d>>2]=0;d=c[f>>2]|0;if((d|0)==0){i=b;return}ne(d);c[f>>2]=0;i=b;return}function Nb(a){a=a|0;var b=0,d=0,e=0;b=i;Ob(a)|0;d=a+16|0;e=a+456|0;c[e>>2]=0;c[e+4>>2]=0;e=a+444|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[e>>2]=-1;c[a+452>>2]=-1;i=b;return 0}function Ob(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+16|0;e=d;Ub(a,Tb()|0);pe(a+40|0,0,192);b[a+94>>1]=1;b[a+84>>1]=1;b[a+92>>1]=1;b[a+96>>1]=1;b[a+98>>1]=1;c[a+100>>2]=-1;c[a+68>>2]=0;c[a+72>>2]=0;c[a+76>>2]=1;c[a+180>>2]=1;b[a+124>>1]=2;b[a+86>>1]=1;c[a+64>>2]=1;b[a+192>>1]=2;b[a+194>>1]=2;b[a+196>>1]=1;c[a+652>>2]=3;c[a+664>>2]=0;c[a+668>>2]=1;c[a+672>>2]=2;c[a+676>>2]=0;f=c[4]|0;if((f|0)==0){c[e>>2]=1;Ib(a,259,e)|0;g=a+12|0;h=c[g>>2]|0;j=h&-1033;c[g>>2]=j;i=d;return 1}gb[f&15](a);c[e>>2]=1;Ib(a,259,e)|0;g=a+12|0;h=c[g>>2]|0;j=h&-1033;c[g>>2]=j;i=d;return 1}function Pb(f,j,k){f=f|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0.0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0;l=i;i=i+80|0;m=l+24|0;n=l+64|0;o=l+60|0;p=l+67|0;q=l+66|0;r=l+58|0;s=l+56|0;t=l+52|0;u=l+48|0;v=l+16|0;w=l+8|0;x=l+44|0;y=l;z=f+40|0;A=Wb(f,j,0)|0;B=(b[A+24>>1]|0)==65;C=B?0:j;a:do{if((C|0)==259){D=c[k>>2]|0;E=c[D>>2]|0;c[k>>2]=D+4;D=E&65535;if((c[z>>2]&128|0)!=0){if((b[f+88>>1]|0)==(E&65535)<<16>>16){F=1;G=218;break}gb[c[f+564>>2]&15](f);H=f+12|0;c[H>>2]=c[H>>2]&-33}H=Ue(f,D)|0;if((H|0)==0){I=0}else{b[f+88>>1]=E;F=H;G=218}}else if((C|0)==266){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;H=E&65535;if((H+ -1|0)>>>0>1){J=H;G=222}else{b[f+94>>1]=E;F=1;G=218}}else if((C|0)==274){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;E=H&65535;if((E|0)==0|E>>>0>8){J=E;G=222}else{b[f+96>>1]=H;F=1;G=218}}else if((C|0)==277){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;if((E&65535|0)==0){J=0;G=222}else{b[f+98>>1]=E;F=1;G=218}}else if((C|0)==258){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;b[f+84>>1]=H;if((c[f+12>>2]&128|0)==0){F=1;G=218}else{switch(H&65535|0){case 8:{c[f+652>>2]=3;F=1;G=218;break a;break};case 16:{c[f+652>>2]=4;F=1;G=218;break a;break};case 24:{c[f+652>>2]=5;F=1;G=218;break a;break};case 32:{c[f+652>>2]=6;F=1;G=218;break a;break};case 64:{c[f+652>>2]=7;F=1;G=218;break a;break};case 128:{c[f+652>>2]=7;F=1;G=218;break a;break};default:{F=1;G=218;break a}}}}else if((C|0)==254){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;c[f+80>>2]=E;F=1;G=218}else if((C|0)==262){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;b[f+90>>1]=H;F=1;G=218}else if((C|0)==263){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;b[f+92>>1]=E;F=1;G=218}else if((C|0)==256){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;c[f+56>>2]=H;F=1;G=218}else if((C|0)==257){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;c[f+60>>2]=E;F=1;G=218}else if((C|0)==278){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;if((H|0)!=0){c[f+100>>2]=H;if((c[z>>2]&4|0)==0){c[f+72>>2]=H;c[f+68>>2]=c[f+56>>2];F=1;G=218}else{F=1;G=218}}else{K=0;G=225}}else if((C|0)==280){H=c[k>>2]|0;E=c[H>>2]|0;c[k>>2]=H+4;b[f+104>>1]=E;F=1;G=218}else if((C|0)==281){E=c[k>>2]|0;H=c[E>>2]|0;c[k>>2]=E+4;b[f+106>>1]=H;F=1;G=218}else if((C|0)==340){H=f+108|0;if((c[f+12>>2]&4194304|0)==0){E=c[k>>2]|0;L=+h[E>>3];c[k>>2]=E+8;E=b[f+98>>1]|0;D=E&65535;M=c[H>>2]|0;if((M|0)!=0){ne(M)}M=me(D<<3)|0;c[H>>2]=M;if((M|0)==0|E<<16>>16==0){F=1;G=218;break}else{N=D}while(1){D=N+ -1|0;h[M+(D<<3)>>3]=L;if((D|0)==0){F=1;G=218;break a}else{N=D}}}M=c[k>>2]|0;D=c[M>>2]|0;c[k>>2]=M+4;M=e[f+98>>1]|0;E=c[H>>2]|0;if((E|0)!=0){ne(E);c[H>>2]=0}if((D|0)!=0?(E=M<<3,M=me(E)|0,c[H>>2]=M,(M|0)!=0):0){qe(M,D,E);F=1;G=218}else{F=1;G=218}}else if((C|0)==341){E=f+112|0;if((c[f+12>>2]&4194304|0)==0){D=c[k>>2]|0;L=+h[D>>3];c[k>>2]=D+8;D=b[f+98>>1]|0;M=D&65535;O=c[E>>2]|0;if((O|0)!=0){ne(O)}O=me(M<<3)|0;c[E>>2]=O;if((O|0)==0|D<<16>>16==0){F=1;G=218;break}else{P=M}while(1){M=P+ -1|0;h[O+(M<<3)>>3]=L;if((M|0)==0){F=1;G=218;break a}else{P=M}}}O=c[k>>2]|0;H=c[O>>2]|0;c[k>>2]=O+4;O=e[f+98>>1]|0;M=c[E>>2]|0;if((M|0)!=0){ne(M);c[E>>2]=0}if((H|0)!=0?(M=O<<3,O=me(M)|0,c[E>>2]=O,(O|0)!=0):0){qe(O,H,M);F=1;G=218}else{F=1;G=218}}else if((C|0)==282){M=c[k>>2]|0;L=+h[M>>3];c[k>>2]=M+8;g[f+116>>2]=L;F=1;G=218}else if((C|0)==283){M=c[k>>2]|0;L=+h[M>>3];c[k>>2]=M+8;g[f+120>>2]=L;F=1;G=218}else if((C|0)==284){M=c[k>>2]|0;H=c[M>>2]|0;c[k>>2]=M+4;M=H&65535;if((M+ -1|0)>>>0>1){J=M;G=222}else{b[f+126>>1]=H;F=1;G=218}}else if((C|0)==297){H=c[k>>2]|0;M=c[H>>2]|0;c[k>>2]=H+4;b[f+136>>1]=M;M=c[k>>2]|0;H=c[M>>2]|0;c[k>>2]=M+4;b[f+138>>1]=H;F=1;G=218}else if((C|0)==321){H=c[k>>2]|0;M=c[H>>2]|0;c[k>>2]=H+4;b[f+152>>1]=M;M=c[k>>2]|0;H=c[M>>2]|0;c[k>>2]=M+4;b[f+154>>1]=H;F=1;G=218}else if((C|0)==286){H=c[k>>2]|0;L=+h[H>>3];c[k>>2]=H+8;g[f+128>>2]=L;F=1;G=218}else if((C|0)==287){H=c[k>>2]|0;L=+h[H>>3];c[k>>2]=H+8;g[f+132>>2]=L;F=1;G=218}else if((C|0)==296){H=c[k>>2]|0;M=c[H>>2]|0;c[k>>2]=H+4;H=M&65535;if((H|0)==0|H>>>0>3){J=H;G=222}else{b[f+124>>1]=M;F=1;G=218}}else if((C|0)==320){M=1<<e[f+84>>1];H=f+140|0;O=c[k>>2]|0;D=c[O>>2]|0;c[k>>2]=O+4;O=c[H>>2]|0;if((O|0)!=0){ne(O);c[H>>2]=0}if(((D|0)!=0?(O=M<<1,(M&2147483647|0)==(M|0)):0)?(Q=me(O)|0,c[H>>2]=Q,(Q|0)!=0):0){qe(Q,D,O)}O=f+144|0;D=c[k>>2]|0;Q=c[D>>2]|0;c[k>>2]=D+4;D=c[O>>2]|0;if((D|0)!=0){ne(D);c[O>>2]=0}if(((Q|0)!=0?(D=M<<1,(M&2147483647|0)==(M|0)):0)?(H=me(D)|0,c[O>>2]=H,(H|0)!=0):0){qe(H,Q,D)}D=f+148|0;Q=c[k>>2]|0;H=c[Q>>2]|0;c[k>>2]=Q+4;Q=c[D>>2]|0;if((Q|0)!=0){ne(Q);c[D>>2]=0}if(((H|0)!=0?(Q=M<<1,(M&2147483647|0)==(M|0)):0)?(M=me(Q)|0,c[D>>2]=M,(M|0)!=0):0){qe(M,H,Q);F=1;G=218}else{F=1;G=218}}else if((C|0)==338){Q=c[k>>2]|0;H=c[Q>>2]|0;c[k>>2]=Q+4;Q=H&65535;if(!(Q>>>0>(e[f+98>>1]|0)>>>0)?(H=c[k>>2]|0,M=c[H>>2]|0,c[k>>2]=H+4,H=(M|0)==0,!((Q|0)!=0&H)):0){if((Q|0)==0){R=0}else{D=0;while(1){O=M+(D<<1)|0;S=b[O>>1]|0;if((S&65535)>2){if(!(S<<16>>16==999)){J=Q;G=222;break a}b[O>>1]=2}O=D+1|0;if(O>>>0<Q>>>0){D=O}else{R=Q;break}}}b[f+156>>1]=R;D=f+160|0;E=c[D>>2]|0;if((E|0)!=0){ne(E);c[D>>2]=0}if(!H?(E=R<<1,O=me(E)|0,c[D>>2]=O,(O|0)!=0):0){qe(O,M,E);F=1;G=218}else{F=1;G=218}}else{J=Q;G=222}}else if((C|0)==32995){E=c[k>>2]|0;O=c[E>>2]|0;c[k>>2]=E+4;E=(O&65535|0)!=0;b[f+156>>1]=E&1;if(E){b[n>>1]=1;E=f+160|0;O=c[E>>2]|0;if((O|0)!=0){ne(O);c[E>>2]=0}O=me(2)|0;c[E>>2]=O;if((O|0)!=0){qe(O,n,2);F=1;G=218}else{F=1;G=218}}else{F=1;G=218}}else if((C|0)==322){O=c[k>>2]|0;E=c[O>>2]|0;c[k>>2]=O+4;if((E&15|0)!=0){if((c[f+8>>2]|0)!=0){K=E;G=225;break}O=c[f+628>>2]|0;D=c[f>>2]|0;c[m>>2]=E;ue(O,D,368,m)}c[f+68>>2]=E;E=f+12|0;c[E>>2]=c[E>>2]|1024;F=1;G=218}else if((C|0)==32998){E=c[k>>2]|0;D=c[E>>2]|0;c[k>>2]=E+4;if((D|0)==0){K=0;G=225}else{c[f+76>>2]=D;F=1;G=218}}else if((C|0)==32996){D=c[k>>2]|0;E=c[D>>2]|0;c[k>>2]=D+4;D=E&65535;if((D|0)==1){T=2}else if((D|0)==2){T=1}else if((D|0)==3){T=3}else if((D|0)==0){T=4}else{J=D;G=222;break}b[f+86>>1]=T;F=1;G=218}else if((C|0)==339){D=c[k>>2]|0;E=c[D>>2]|0;c[k>>2]=D+4;D=E&65535;if(!((D|0)==0|D>>>0>6)){O=E&65535;b[f+86>>1]=O;if(((D|0)==5?(b[f+84>>1]|0)==32:0)?(E=f+652|0,(c[E>>2]|0)==6):0){c[E>>2]=4;F=1;G=218;break}if(((O+ -5<<16>>16&65535)<2?(b[f+84>>1]|0)==64:0)?(O=f+652|0,(c[O>>2]|0)==7):0){c[O>>2]=6;F=1;G=218}else{F=1;G=218}}else{J=D;G=222}}else if((C|0)==323){D=c[k>>2]|0;O=c[D>>2]|0;c[k>>2]=D+4;if((O&15|0)!=0){if((c[f+8>>2]|0)!=0){K=O;G=225;break}D=c[f+628>>2]|0;E=c[f>>2]|0;c[m>>2]=O;ue(D,E,408,m)}c[f+72>>2]=O;O=f+12|0;c[O>>2]=c[O>>2]|1024;F=1;G=218}else if((C|0)==32997){O=c[k>>2]|0;E=c[O>>2]|0;c[k>>2]=O+4;c[f+64>>2]=E;F=1;G=218}else if((C|0)==330){if((c[f+12>>2]&8192|0)!=0){E=c[f+628>>2]|0;c[m>>2]=c[f>>2];sc(E,616,456,m);I=0;break}E=c[k>>2]|0;O=c[E>>2]|0;c[k>>2]=E+4;E=f+184|0;b[E>>1]=O;O=f+188|0;D=c[k>>2]|0;S=c[D>>2]|0;c[k>>2]=D+4;D=e[E>>1]|0;E=c[O>>2]|0;if((E|0)!=0){ne(E);c[O>>2]=0}if((S|0)!=0?(E=D<<3,D=me(E)|0,c[O>>2]=D,(D|0)!=0):0){qe(D,S,E);F=1;G=218}else{F=1;G=218}}else if((C|0)==531){E=c[k>>2]|0;S=c[E>>2]|0;c[k>>2]=E+4;b[f+196>>1]=S;F=1;G=218}else if((C|0)==530){S=c[k>>2]|0;E=c[S>>2]|0;c[k>>2]=S+4;b[f+192>>1]=E;E=c[k>>2]|0;S=c[E>>2]|0;c[k>>2]=E+4;b[f+194>>1]=S;F=1;G=218}else if((C|0)==532){S=f+212|0;E=c[k>>2]|0;D=c[E>>2]|0;c[k>>2]=E+4;E=c[S>>2]|0;if((E|0)!=0){ne(E);c[S>>2]=0}if((D|0)!=0?(E=me(24)|0,c[S>>2]=E,(E|0)!=0):0){qe(E,D,24);F=1;G=218}else{F=1;G=218}}else if((C|0)==301){D=((e[f+98>>1]|0)-(e[f+156>>1]|0)|0)>1?3:1;E=f+84|0;S=0;while(1){O=f+(S<<2)+200|0;U=c[k>>2]|0;V=c[U>>2]|0;c[k>>2]=U+4;U=1<<e[E>>1];W=c[O>>2]|0;if((W|0)!=0){ne(W);c[O>>2]=0}if(((V|0)!=0?(W=U<<1,(U&2147483647|0)==(U|0)):0)?(U=me(W)|0,c[O>>2]=U,(U|0)!=0):0){qe(U,V,W)}W=S+1|0;if((W|0)==(D|0)){F=1;G=218;break}else{S=W}}}else if((C|0)==333){S=c[k>>2]|0;D=c[S>>2]|0;c[k>>2]=S+4;S=D&65535;D=c[k>>2]|0;E=c[D>>2]|0;c[k>>2]=D+4;D=b[f+98>>1]|0;b:do{if((S|0)==0){X=D}else{Q=E+S|0;if(D<<16>>16==0){I=0;break a}else{Y=E;Z=D}while(1){M=Y;while(1){if(!(M>>>0<Q>>>0)){X=Z;break b}_=M+1|0;if((a[M]|0)==0){break}else{M=_}}M=Z+ -1<<16>>16;if(M<<16>>16==0){break}else{Y=_;Z=M}}Q=_-E|0;M=(_|0)!=(E|0);H=M&1;if(!M){I=0;break a}M=f+220|0;W=c[M>>2]|0;if((W|0)!=0){ne(W);c[M>>2]=0}if((E|0)!=0?(W=me(Q)|0,c[M>>2]=W,(W|0)!=0):0){qe(W,E,Q)}c[f+216>>2]=Q;F=H;G=218;break a}}while(0);E=c[f+628>>2]|0;S=D&65535;c[m>>2]=c[f>>2];c[m+4>>2]=S;c[m+8>>2]=S-(X&65535);sc(E,760,776,m);I=0}else if((C|0)==65563){E=c[k>>2]|0;S=c[E>>2]|0;c[k>>2]=E+4;E=f+12|0;H=c[E>>2]|0;if((S&65535|0)==1){c[E>>2]=H|4194304;F=1;G=218;break}else{c[E>>2]=H&-4194305;F=1;G=218;break}}else{if(!((A|0)!=0&B)){H=c[f+628>>2]|0;if((A|0)==0){$=328}else{$=c[A+28>>2]|0}c[m>>2]=c[f>>2];c[m+4>>2]=j>>>0>65535?312:320;c[m+8>>2]=$;sc(H,616,264,m);I=0;break}H=f+224|0;E=c[H>>2]|0;S=f+228|0;c:do{if((E|0)>0){Q=c[S>>2]|0;W=0;while(1){aa=Q+(W*12|0)|0;M=W+1|0;if((c[c[aa>>2]>>2]|0)==(j|0)){break}if((M|0)<(E|0)){W=M}else{ca=E;G=172;break c}}M=Q+(W*12|0)+8|0;V=c[M>>2]|0;if((V|0)!=0){ne(V);c[M>>2]=0;da=aa;break}if((aa|0)==0){ca=c[H>>2]|0;G=172}else{da=aa}}else{ca=E;G=172}}while(0);do{if((G|0)==172){E=ca+1|0;c[H>>2]=E;D=oe(c[S>>2]|0,E*12|0)|0;if((D|0)==0){E=c[f+628>>2]|0;c[m>>2]=c[f>>2];sc(E,616,488,m);I=0;break a}else{c[S>>2]=D;E=(c[H>>2]|0)+ -1|0;M=D+(E*12|0)|0;c[M>>2]=A;c[D+(E*12|0)+8>>2]=0;c[D+(E*12|0)+4>>2]=0;da=M;break}}}while(0);H=A+8|0;S=Zb(c[H>>2]|0)|0;if((S|0)==0){M=c[f+628>>2]|0;E=c[H>>2]|0;D=c[A+28>>2]|0;c[m>>2]=c[f>>2];c[m+4>>2]=E;c[m+8>>2]=D;sc(M,616,544,m);I=0;break}M=A+27|0;D=(a[M]|0)!=0;if((c[H>>2]|0)==2){do{if(D){if((b[A+6>>1]|0)==-3){E=c[k>>2]|0;V=c[E>>2]|0;c[k>>2]=E+4;E=c[k>>2]|0;U=c[E>>2]|0;c[k>>2]=E+4;ea=V;fa=U;break}else{za(576,24,521,616)}}else{U=c[k>>2]|0;V=c[U>>2]|0;c[k>>2]=U+4;ea=(Ni(V|0)|0)+1|0;fa=V}}while(0);c[da+4>>2]=ea;V=da+8|0;U=c[V>>2]|0;if((U|0)!=0){ne(U);c[V>>2]=0}if((fa|0)==0){F=1;G=218;break}U=me(ea)|0;c[V>>2]=U;if((U|0)==0){F=1;G=218;break}qe(U,fa,ea);F=1;G=218;break}U=A+6|0;V=b[U>>1]|0;E=V<<16>>16;do{if(!D){if(V<<16>>16==-3|V<<16>>16==-1){c[da+4>>2]=1;ga=1;break}else if(V<<16>>16==-2){O=e[f+98>>1]|0;c[da+4>>2]=O;ha=O;G=194;break}else{c[da+4>>2]=E;ha=E;G=194;break}}else{O=c[k>>2]|0;ia=c[O>>2]|0;c[k>>2]=O+4;c[da+4>>2]=ia;ha=ia;G=194}}while(0);if((G|0)==194){if((ha|0)==0){E=c[f+628>>2]|0;V=c[A+28>>2]|0;D=c[H>>2]|0;ia=b[U>>1]|0;O=d[M]|0;c[m>>2]=c[f>>2];c[m+4>>2]=V;c[m+8>>2]=D;c[m+12>>2]=ia;c[m+16>>2]=O;sc(E,616,632,m);I=0;break}else{ga=ha}}E=da+4|0;O=Ae(f,ga,S,696)|0;ia=da+8|0;c[ia>>2]=O;if((O|0)==0){I=0}else{if((c[A>>2]|0)==336?(Fi(c[A+28>>2]|0,336)|0)==0:0){D=c[k>>2]|0;V=c[D>>2]|0;c[k>>2]=D+4;b[o>>1]=V;V=c[k>>2]|0;D=c[V>>2]|0;c[k>>2]=V+4;b[o+2>>1]=D;qe(c[ia>>2]|0,o,4);F=1;G=218;break}if(((a[M]|0)==0?(e[U>>1]|0)<=65532:0)?(ia=c[E>>2]|0,(ia|0)<=1):0){if((ia|0)!=1){za(352,24,589,616)}switch(c[H>>2]|0){case 7:case 1:{ia=c[k>>2]|0;D=c[ia>>2]|0;c[k>>2]=ia+4;a[p]=D;qe(O,p,S);F=1;G=218;break a;break};case 6:{D=c[k>>2]|0;ia=c[D>>2]|0;c[k>>2]=D+4;a[q]=ia;qe(O,q,S);F=1;G=218;break a;break};case 3:{ia=c[k>>2]|0;D=c[ia>>2]|0;c[k>>2]=ia+4;b[r>>1]=D;qe(O,r,S);F=1;G=218;break a;break};case 8:{D=c[k>>2]|0;ia=c[D>>2]|0;c[k>>2]=D+4;b[s>>1]=ia;qe(O,s,S);F=1;G=218;break a;break};case 13:case 4:{ia=c[k>>2]|0;D=c[ia>>2]|0;c[k>>2]=ia+4;c[t>>2]=D;qe(O,t,S);F=1;G=218;break a;break};case 9:{D=c[k>>2]|0;ia=c[D>>2]|0;c[k>>2]=D+4;c[u>>2]=ia;qe(O,u,S);F=1;G=218;break a;break};case 18:case 16:{ia=c[k>>2]|0;D=ia;V=c[D>>2]|0;ja=c[D+4>>2]|0;c[k>>2]=ia+8;ia=v;c[ia>>2]=V;c[ia+4>>2]=ja;qe(O,v,S);F=1;G=218;break a;break};case 17:{ja=c[k>>2]|0;ia=ja;V=c[ia>>2]|0;D=c[ia+4>>2]|0;c[k>>2]=ja+8;ja=w;c[ja>>2]=V;c[ja+4>>2]=D;qe(O,w,S);F=1;G=218;break a;break};case 11:case 10:case 5:{D=c[k>>2]|0;L=+h[D>>3];c[k>>2]=D+8;g[x>>2]=L;qe(O,x,S);F=1;G=218;break a;break};case 12:{D=c[k>>2]|0;L=+h[D>>3];c[k>>2]=D+8;h[y>>3]=L;qe(O,y,S);F=1;G=218;break a;break};default:{pe(O,0,S);I=0;break a}}}D=c[k>>2]|0;ja=c[D>>2]|0;c[k>>2]=D+4;qe(O,ja,ba(c[E>>2]|0,S)|0);F=1;G=218}}}while(0);if((G|0)==218){k=_b(f,j)|0;if((k|0)!=0){y=e[k+24>>1]|0;k=f+(y>>>5<<2)+40|0;c[k>>2]=1<<(y&31)|c[k>>2]}k=f+12|0;c[k>>2]=c[k>>2]|8;I=F}else if((G|0)==222){F=_b(f,j)|0;k=c[f+628>>2]|0;if((F|0)==0){ka=328}else{ka=c[F+28>>2]|0}c[m>>2]=c[f>>2];c[m+4>>2]=J;c[m+8>>2]=ka;sc(k,616,728,m);la=0;i=l;return la|0}else if((G|0)==225){G=_b(f,j)|0;j=c[f+628>>2]|0;if((G|0)==0){ma=328}else{ma=c[G+28>>2]|0}c[m>>2]=c[f>>2];c[m+4>>2]=K;c[m+8>>2]=ma;sc(j,616,728,m);la=0;i=l;return la|0}la=I;i=l;return la|0}function Qb(d,f,j){d=d|0;f=f|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0,B=0,C=0,D=0,E=0;k=i;i=i+16|0;l=k;m=Wb(d,f,0)|0;n=(b[m+24>>1]|0)==65;o=n?0:f;if((o|0)==277){p=b[d+98>>1]|0;q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;b[r>>1]=p;s=1;i=k;return s|0}else if((o|0)==278){p=c[d+100>>2]|0;r=c[j>>2]|0;q=c[r>>2]|0;c[j>>2]=r+4;c[q>>2]=p;s=1;i=k;return s|0}else if((o|0)==280){p=b[d+104>>1]|0;q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;b[r>>1]=p;s=1;i=k;return s|0}else if((o|0)==254){p=c[d+80>>2]|0;r=c[j>>2]|0;q=c[r>>2]|0;c[j>>2]=r+4;c[q>>2]=p;s=1;i=k;return s|0}else if((o|0)==341){p=c[d+112>>2]|0;if((c[d+12>>2]&4194304|0)!=0){q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;c[r>>2]=p;s=1;i=k;return s|0}t=+h[p>>3];r=b[d+98>>1]|0;if((r&65535)>1){q=1;u=t;while(1){v=+h[p+(q<<3)>>3];w=v>u?v:u;x=q+1|0;if((x&65535)<(r&65535)){q=x;u=w}else{y=w;break}}}else{y=t}q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;h[r>>3]=y;s=1;i=k;return s|0}else if((o|0)==263){r=b[d+92>>1]|0;q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=r;s=1;i=k;return s|0}else if((o|0)==262){r=b[d+90>>1]|0;p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;b[q>>1]=r;s=1;i=k;return s|0}else if((o|0)==266){r=b[d+94>>1]|0;q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=r;s=1;i=k;return s|0}else if((o|0)==274){r=b[d+96>>1]|0;p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;b[q>>1]=r;s=1;i=k;return s|0}else if((o|0)==256){r=c[d+56>>2]|0;q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;c[p>>2]=r;s=1;i=k;return s|0}else if((o|0)==259){r=b[d+88>>1]|0;p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;b[q>>1]=r;s=1;i=k;return s|0}else if((o|0)==281){r=b[d+106>>1]|0;q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=r;s=1;i=k;return s|0}else if((o|0)==340){r=c[d+108>>2]|0;if((c[d+12>>2]&4194304|0)!=0){p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;c[q>>2]=r;s=1;i=k;return s|0}y=+h[r>>3];q=b[d+98>>1]|0;if((q&65535)>1){p=1;t=y;while(1){u=+h[r+(p<<3)>>3];w=u<t?u:t;x=p+1|0;if((x&65535)<(q&65535)){p=x;t=w}else{z=w;break}}}else{z=y}p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;h[q>>3]=z;s=1;i=k;return s|0}else if((o|0)==258){q=b[d+84>>1]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;b[r>>1]=q;s=1;i=k;return s|0}else if((o|0)==257){q=c[d+60>>2]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;c[p>>2]=q;s=1;i=k;return s|0}else if((o|0)==338){q=b[d+156>>1]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;b[r>>1]=q;q=c[d+160>>2]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;c[p>>2]=q;s=1;i=k;return s|0}else if((o|0)==322){q=c[d+68>>2]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;c[r>>2]=q;s=1;i=k;return s|0}else if((o|0)==282){z=+g[d+116>>2];q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;g[r>>2]=z;s=1;i=k;return s|0}else if((o|0)==283){z=+g[d+120>>2];r=c[j>>2]|0;q=c[r>>2]|0;c[j>>2]=r+4;g[q>>2]=z;s=1;i=k;return s|0}else if((o|0)==284){q=b[d+126>>1]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;b[p>>1]=q;s=1;i=k;return s|0}else if((o|0)==286){z=+g[d+128>>2];q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;g[p>>2]=z;s=1;i=k;return s|0}else if((o|0)==287){z=+g[d+132>>2];p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;g[q>>2]=z;s=1;i=k;return s|0}else if((o|0)==296){q=b[d+124>>1]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;b[r>>1]=q;s=1;i=k;return s|0}else if((o|0)==297){q=b[d+136>>1]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;b[p>>1]=q;q=b[d+138>>1]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;b[r>>1]=q;s=1;i=k;return s|0}else if((o|0)==321){q=b[d+152>>1]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;b[p>>1]=q;q=b[d+154>>1]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;b[r>>1]=q;s=1;i=k;return s|0}else if((o|0)==320){q=c[d+140>>2]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;c[p>>2]=q;q=c[d+144>>2]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;c[r>>2]=q;q=c[d+148>>2]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;c[p>>2]=q;s=1;i=k;return s|0}else if((o|0)==324|(o|0)==273){fc(d)|0;q=c[d+172>>2]|0;p=c[j>>2]|0;r=c[p>>2]|0;c[j>>2]=p+4;c[r>>2]=q;s=1;i=k;return s|0}else if((o|0)==325|(o|0)==279){fc(d)|0;q=c[d+176>>2]|0;r=c[j>>2]|0;p=c[r>>2]|0;c[j>>2]=r+4;c[p>>2]=q;s=1;i=k;return s|0}else if((o|0)==32995){if((b[d+156>>1]|0)==1){A=(b[c[d+160>>2]>>1]|0)==1|0}else{A=0}q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=A;s=1;i=k;return s|0}else if((o|0)==339){A=b[d+86>>1]|0;p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;b[q>>1]=A;s=1;i=k;return s|0}else if((o|0)==323){A=c[d+72>>2]|0;q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;c[p>>2]=A;s=1;i=k;return s|0}else if((o|0)==32998){A=c[d+76>>2]|0;p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;c[q>>2]=A;s=1;i=k;return s|0}else if((o|0)==32996){A=e[d+86>>1]|0;if((A|0)==1){q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=2;s=1;i=k;return s|0}else if((A|0)==2){p=c[j>>2]|0;q=c[p>>2]|0;c[j>>2]=p+4;b[q>>1]=1;s=1;i=k;return s|0}else if((A|0)==3){q=c[j>>2]|0;p=c[q>>2]|0;c[j>>2]=q+4;b[p>>1]=3;s=1;i=k;return s|0}else if((A|0)==4){A=c[j>>2]|0;p=c[A>>2]|0;c[j>>2]=A+4;b[p>>1]=0;s=1;i=k;return s|0}else{s=1;i=k;return s|0}}else if((o|0)==32997){p=c[d+64>>2]|0;A=c[j>>2]|0;q=c[A>>2]|0;c[j>>2]=A+4;c[q>>2]=p;s=1;i=k;return s|0}else if((o|0)==330){p=b[d+184>>1]|0;q=c[j>>2]|0;A=c[q>>2]|0;c[j>>2]=q+4;b[A>>1]=p;p=c[d+188>>2]|0;A=c[j>>2]|0;q=c[A>>2]|0;c[j>>2]=A+4;c[q>>2]=p;s=1;i=k;return s|0}else if((o|0)==531){p=b[d+196>>1]|0;q=c[j>>2]|0;A=c[q>>2]|0;c[j>>2]=q+4;b[A>>1]=p;s=1;i=k;return s|0}else if((o|0)==530){p=b[d+192>>1]|0;A=c[j>>2]|0;q=c[A>>2]|0;c[j>>2]=A+4;b[q>>1]=p;p=b[d+194>>1]|0;q=c[j>>2]|0;A=c[q>>2]|0;c[j>>2]=q+4;b[A>>1]=p;s=1;i=k;return s|0}else if((o|0)==301){p=c[d+200>>2]|0;A=c[j>>2]|0;q=c[A>>2]|0;c[j>>2]=A+4;c[q>>2]=p;if(((e[d+98>>1]|0)-(e[d+156>>1]|0)|0)<=1){s=1;i=k;return s|0}p=c[d+204>>2]|0;q=c[j>>2]|0;A=c[q>>2]|0;c[j>>2]=q+4;c[A>>2]=p;p=c[d+208>>2]|0;A=c[j>>2]|0;q=c[A>>2]|0;c[j>>2]=A+4;c[q>>2]=p;s=1;i=k;return s|0}else if((o|0)==532){p=c[d+212>>2]|0;q=c[j>>2]|0;A=c[q>>2]|0;c[j>>2]=q+4;c[A>>2]=p;s=1;i=k;return s|0}else if((o|0)==333){o=c[d+220>>2]|0;p=c[j>>2]|0;A=c[p>>2]|0;c[j>>2]=p+4;c[A>>2]=o;s=1;i=k;return s|0}else{do{if((m|0)==0){B=f>>>0>65535?312:320;C=328}else{if(!n){B=f>>>0>65535?312:320;C=c[m+28>>2]|0;break}o=c[d+224>>2]|0;if((o|0)<=0){s=0;i=k;return s|0}A=c[d+228>>2]|0;p=0;while(1){q=p+1|0;if((c[c[A+(p*12|0)>>2]>>2]|0)==(f|0)){break}if((q|0)<(o|0)){p=q}else{s=0;D=91;break}}if((D|0)==91){i=k;return s|0}if((a[m+27|0]|0)!=0){o=c[A+(p*12|0)+4>>2]|0;if((b[m+4>>1]|0)==-3){q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;c[r>>2]=o}else{r=c[j>>2]|0;q=c[r>>2]|0;c[j>>2]=r+4;b[q>>1]=o}o=c[A+(p*12|0)+8>>2]|0;q=c[j>>2]|0;r=c[q>>2]|0;c[j>>2]=q+4;c[r>>2]=o;s=1;i=k;return s|0}if((c[m>>2]|0)==336?(Fi(c[m+28>>2]|0,336)|0)==0:0){o=A+(p*12|0)+8|0;r=b[c[o>>2]>>1]|0;q=c[j>>2]|0;x=c[q>>2]|0;c[j>>2]=q+4;b[x>>1]=r;r=b[(c[o>>2]|0)+2>>1]|0;o=c[j>>2]|0;x=c[o>>2]|0;c[j>>2]=o+4;b[x>>1]=r;s=1;i=k;return s|0}r=c[m+8>>2]|0;if(((r|0)!=2?(e[m+4>>1]|0)<=65532:0)?(x=c[A+(p*12|0)+4>>2]|0,(x|0)<=1):0){o=c[A+(p*12|0)+8>>2]|0;if((x|0)!=1){za(352,24,1057,248)}switch(r|0){case 7:case 1:{r=a[o]|0;x=c[j>>2]|0;q=c[x>>2]|0;c[j>>2]=x+4;a[q]=r;s=1;i=k;return s|0};case 3:{r=b[o>>1]|0;q=c[j>>2]|0;x=c[q>>2]|0;c[j>>2]=q+4;b[x>>1]=r;s=1;i=k;return s|0};case 8:{r=b[o>>1]|0;x=c[j>>2]|0;q=c[x>>2]|0;c[j>>2]=x+4;b[q>>1]=r;s=1;i=k;return s|0};case 13:case 4:{r=c[o>>2]|0;q=c[j>>2]|0;x=c[q>>2]|0;c[j>>2]=q+4;c[x>>2]=r;s=1;i=k;return s|0};case 9:{r=c[o>>2]|0;x=c[j>>2]|0;q=c[x>>2]|0;c[j>>2]=x+4;c[q>>2]=r;s=1;i=k;return s|0};case 6:{r=a[o]|0;q=c[j>>2]|0;x=c[q>>2]|0;c[j>>2]=q+4;a[x]=r;s=1;i=k;return s|0};case 18:case 16:{r=o;x=c[r>>2]|0;q=c[r+4>>2]|0;r=c[j>>2]|0;E=c[r>>2]|0;c[j>>2]=r+4;r=E;c[r>>2]=x;c[r+4>>2]=q;s=1;i=k;return s|0};case 17:{q=o;r=c[q>>2]|0;x=c[q+4>>2]|0;q=c[j>>2]|0;E=c[q>>2]|0;c[j>>2]=q+4;q=E;c[q>>2]=r;c[q+4>>2]=x;s=1;i=k;return s|0};case 11:case 10:case 5:{z=+g[o>>2];x=c[j>>2]|0;q=c[x>>2]|0;c[j>>2]=x+4;g[q>>2]=z;s=1;i=k;return s|0};case 12:{z=+h[o>>3];o=c[j>>2]|0;q=c[o>>2]|0;c[j>>2]=o+4;h[q>>3]=z;s=1;i=k;return s|0};default:{s=0;i=k;return s|0}}}q=c[A+(p*12|0)+8>>2]|0;o=c[j>>2]|0;x=c[o>>2]|0;c[j>>2]=o+4;c[x>>2]=q;s=1;i=k;return s|0}}while(0);j=c[d+628>>2]|0;c[l>>2]=c[d>>2];c[l+4>>2]=B;c[l+8>>2]=C;sc(j,248,264,l);s=0;i=k;return s|0}return 0}function Rb(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;i=i+32|0;g=f+16|0;h=f+30|0;j=f+24|0;k=f+8|0;l=f+28|0;m=f+20|0;n=f;o=a+12|0;p=c[o>>2]|0;if((p&2048|0)==0){q=a+640|0;r=a+628|0;s=b;t=mb[c[q>>2]&63](c[r>>2]|0,c[s>>2]|0,c[s+4>>2]|0,0)|0;s=b;u=(t|0)==(c[s>>2]|0)&(F|0)==(c[s+4>>2]|0);if((p&524288|0)==0){if(u?(s=a+632|0,(fb[c[s>>2]&31](c[r>>2]|0,l,2)|0)==2):0){if((c[o>>2]&128|0)!=0){Nd(l)}t=mb[c[q>>2]&63](c[r>>2]|0,(e[l>>1]|0)*12|0,0,1)|0;if((d|0)!=0){l=d;c[l>>2]=t;c[l+4>>2]=F}if((fb[c[s>>2]&31](c[r>>2]|0,m,4)|0)!=4){s=c[r>>2]|0;c[g>>2]=c[a>>2];sc(s,40,208,g);v=0;i=f;return v|0}if((c[o>>2]&128|0)!=0){Od(m)}s=b;c[s>>2]=c[m>>2];c[s+4>>2]=0;v=1;i=f;return v|0}s=c[r>>2]|0;c[g>>2]=c[a>>2];sc(s,40,168,g);v=0;i=f;return v|0}if(u?(u=a+632|0,(fb[c[u>>2]&31](c[r>>2]|0,n,8)|0)==8):0){if((c[o>>2]&128|0)!=0){Pd(n)}s=n;n=c[s>>2]|0;m=c[s+4>>2]|0;if(m>>>0>0|(m|0)==0&n>>>0>65535){sc(c[r>>2]|0,40,64,g);v=0;i=f;return v|0}m=mb[c[q>>2]&63](c[r>>2]|0,(n&65535)*20|0,0,1)|0;if((d|0)!=0){n=d;c[n>>2]=m;c[n+4>>2]=F}if((fb[c[u>>2]&31](c[r>>2]|0,b,8)|0)!=8){u=c[r>>2]|0;c[g>>2]=c[a>>2];sc(u,40,208,g);v=0;i=f;return v|0}if((c[o>>2]&128|0)==0){v=1;i=f;return v|0}Pd(b);v=1;i=f;return v|0}u=c[r>>2]|0;c[g>>2]=c[a>>2];sc(u,40,168,g);v=0;i=f;return v|0}u=b;r=c[u>>2]|0;n=c[u+4>>2]|0;if((p&524288|0)==0){p=r+2|0;if(((r|0)==(r|0)&(((r|0)<0)<<31>>31|0)==(n|0)?!((r|0)>2147483645|(p|0)<2):0)?(u=a+616|0,(p|0)<=(c[u>>2]|0)):0){m=a+612|0;qe(h,(c[m>>2]|0)+r|0,2);if((c[o>>2]&128|0)!=0){Nd(h)}q=((e[h>>1]|0)*12|0)+p|0;h=q+4|0;if(((p|0)>=0?!((q|0)>2147483643|(h|0)<4):0)?(h|0)<=(c[u>>2]|0):0){if((d|0)!=0){u=d;c[u>>2]=q;c[u+4>>2]=((q|0)<0)<<31>>31}qe(j,(c[m>>2]|0)+q|0,4);if((c[o>>2]&128|0)!=0){Od(j)}q=b;c[q>>2]=c[j>>2];c[q+4>>2]=0;v=1;i=f;return v|0}sc(c[a+628>>2]|0,40,96,g);v=0;i=f;return v|0}sc(c[a+628>>2]|0,40,64,g);v=0;i=f;return v|0}q=r+8|0;if(((r|0)==(r|0)&(((r|0)<0)<<31>>31|0)==(n|0)?!((r|0)>2147483639|(q|0)<8):0)?(n=a+616|0,(q|0)<=(c[n>>2]|0)):0){j=a+612|0;qe(k,(c[j>>2]|0)+r|0,8);if((c[o>>2]&128|0)!=0){Pd(k)}r=k;k=c[r>>2]|0;m=c[r+4>>2]|0;if(m>>>0>0|(m|0)==0&k>>>0>65535){sc(c[a+628>>2]|0,40,128,g);v=0;i=f;return v|0}m=((k&65535)*20|0)+q|0;k=m+8|0;if(((q|0)>=0?!((m|0)>2147483639|(k|0)<8):0)?(k|0)<=(c[n>>2]|0):0){if((d|0)!=0){n=d;c[n>>2]=m;c[n+4>>2]=((m|0)<0)<<31>>31}qe(b,(c[j>>2]|0)+m|0,8);if((c[o>>2]&128|0)==0){v=1;i=f;return v|0}Pd(b);v=1;i=f;return v|0}sc(c[a+628>>2]|0,40,96,g);v=0;i=f;return v|0}sc(c[a+628>>2]|0,40,64,g);v=0;i=f;return v|0}function Sb(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;e=i;i=i+16|0;f=e;if((c[a+12>>2]&524288|0)==0){g=c[a+428>>2]|0;h=0}else{j=a+432|0;g=c[j>>2]|0;h=c[j+4>>2]|0}j=f;c[j>>2]=g;c[j+4>>2]=h;j=d&65535;a:do{if(d<<16>>16==0){k=j;l=g;m=h}else{n=g;o=h;p=j;q=d;while(1){if((n|0)==0&(o|0)==0){k=p;l=0;m=0;break a}r=q+ -1<<16>>16;if((Rb(a,f,0)|0)==0){s=0;break}t=r&65535;u=f;v=c[u>>2]|0;w=c[u+4>>2]|0;if(r<<16>>16==0){k=t;l=v;m=w;break a}else{n=v;o=w;p=t;q=r}}i=e;return s|0}}while(0);f=a+24|0;c[f>>2]=l;c[f+4>>2]=m;b[a+448>>1]=j+65535-k;b[a+38>>1]=0;s=ac(a)|0;i=e;return s|0}function Tb(){return 912}function Ub(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;i=i+16|0;f=e;g=a+656|0;h=c[g>>2]|0;if((h|0)!=0?(j=a+660|0,k=c[j>>2]|0,(k|0)!=0):0){l=k;k=h;h=0;while(1){m=c[k+(h<<2)>>2]|0;if((b[m+24>>1]|0)==65?(n=c[m+28>>2]|0,(Gi(944,n,4)|0)==0):0){ne(n);ne(m);o=c[j>>2]|0;p=c[g>>2]|0}else{o=l;p=k}h=h+1|0;if(!(h>>>0<o>>>0)){break}else{l=o;k=p}}ne(p);c[g>>2]=0;c[j>>2]=0}if((Vb(a,c[d+12>>2]|0,c[d+8>>2]|0)|0)!=0){i=e;return}sc(c[a+628>>2]|0,952,976,f);i=e;return}function Vb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;i=i+48|0;f=e;g=e+36|0;h=a+664|0;c[h>>2]=0;j=a+656|0;k=c[j>>2]|0;if((k|0)!=0?(l=c[a+660>>2]|0,(l|0)!=0):0){m=ze(a,k,l+d|0,4,1032)|0}else{m=Ae(a,d,4,1032)|0}c[j>>2]=m;if((m|0)==0){sc(c[a+628>>2]|0,1008,1056,f);n=0;i=e;return n|0}if((d|0)==0){o=a+660|0;p=m}else{m=a+660|0;a=f+8|0;l=0;do{k=b+(l*36|0)|0;q=c[k>>2]|0;r=f+0|0;s=r+36|0;do{c[r>>2]=0;r=r+4|0}while((r|0)<(s|0));c[g>>2]=f;r=c[h>>2]|0;if(!((r|0)!=0?(c[r>>2]|0)==(q|0):0)){t=12}a:do{if((t|0)==12){t=0;r=c[j>>2]|0;do{if((r|0)!=0){c[f>>2]=q;c[a>>2]=0;s=wi(g,r,c[m>>2]|0,4,17)|0;if((s|0)!=0){u=c[s>>2]|0;c[h>>2]=u;if((u|0)==0){break}else{break a}}else{c[h>>2]=0;break}}}while(0);r=c[m>>2]|0;c[(c[j>>2]|0)+(r<<2)>>2]=k;c[m>>2]=r+1}}while(0);l=l+1|0}while((l|0)!=(d|0));o=m;p=c[j>>2]|0}xi(p,c[o>>2]|0,4,17);n=d;i=e;return n|0}function Wb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+48|0;f=e+4|0;g=e;h=f+0|0;j=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[g>>2]=f;h=a+664|0;j=c[h>>2]|0;if((j|0)!=0?(c[j>>2]|0)==(b|0):0){if((d|0)==0){k=j;i=e;return k|0}if((c[j+8>>2]|0)==(d|0)){k=j;i=e;return k|0}}j=c[a+656>>2]|0;if((j|0)==0){k=0;i=e;return k|0}c[f>>2]=b;c[f+8>>2]=d;d=wi(g,j,c[a+660>>2]|0,4,17)|0;if((d|0)==0){l=0}else{l=c[d>>2]|0}c[h>>2]=l;k=l;i=e;return k|0}function Xb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=c[a>>2]|0;a=c[b>>2]|0;b=c[e>>2]|0;f=c[a>>2]|0;if((b|0)==(f|0)){g=c[e+8>>2]|0;if((g|0)==0){h=0}else{h=(c[a+8>>2]|0)-g|0}}else{h=b-f|0}i=d;return h|0}function Yb(a){a=a|0;var b=0;switch(a|0){case 13:case 11:case 9:case 4:{b=4;break};case 18:case 17:case 16:case 12:case 10:case 5:{b=8;break};case 8:case 3:{b=2;break};case 7:case 6:case 2:case 1:case 0:{b=1;break};default:{b=0}}return b|0}function Zb(a){a=a|0;var b=0;switch(a|0){case 10:case 5:case 13:case 11:case 9:case 4:{b=4;break};case 18:case 17:case 16:case 12:{b=8;break};case 8:case 3:{b=2;break};case 7:case 2:case 6:case 1:{b=1;break};default:{b=0}}return b|0}function _b(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+48|0;e=d;f=d+8|0;g=d+4|0;h=f+0|0;j=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[g>>2]=f;h=a+664|0;j=c[h>>2]|0;if((j|0)!=0?(c[j>>2]|0)==(b|0):0){k=j;i=d;return k|0}j=c[a+656>>2]|0;do{if((j|0)!=0){c[f>>2]=b;c[f+8>>2]=0;l=wi(g,j,c[a+660>>2]|0,4,17)|0;if((l|0)==0){c[h>>2]=0;break}m=c[l>>2]|0;c[h>>2]=m;if((m|0)!=0){k=m;i=d;return k|0}}}while(0);h=c[a+628>>2]|0;c[e>>2]=b;sc(h,1088,1112,e);k=0;i=d;return k|0}function $b(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;d=i;i=i+16|0;g=d;h=me(36)|0;if((h|0)==0){j=0;i=d;return j|0}pe(h,0,36);c[h>>2]=e;b[h+4>>1]=-3;b[h+6>>1]=-3;c[h+8>>2]=f;c[h+12>>2]=0;switch(f|0){case 8:{c[h+16>>2]=43;c[h+20>>2]=43;break};case 7:case 1:{c[h+16>>2]=40;c[h+20>>2]=40;break};case 4:{c[h+16>>2]=44;c[h+20>>2]=44;break};case 2:{c[h+16>>2]=39;c[h+20>>2]=39;break};case 3:{c[h+16>>2]=42;c[h+20>>2]=42;break};case 17:{c[h+16>>2]=47;c[h+20>>2]=47;break};case 18:case 13:{c[h+16>>2]=50;c[h+20>>2]=50;break};case 11:case 10:case 5:{c[h+16>>2]=48;c[h+20>>2]=48;break};case 6:{c[h+16>>2]=41;c[h+20>>2]=41;break};case 16:{c[h+16>>2]=46;c[h+20>>2]=46;break};case 12:{c[h+16>>2]=49;c[h+20>>2]=49;break};case 9:{c[h+16>>2]=45;c[h+20>>2]=45;break};default:{c[h+16>>2]=0;c[h+20>>2]=0}}b[h+24>>1]=65;a[h+26|0]=1;a[h+27|0]=1;f=me(32)|0;c[h+28>>2]=f;if((f|0)==0){ne(h);j=0;i=d;return j|0}else{c[h+32>>2]=0;c[g>>2]=e;Ra(f|0,1152,g|0)|0;j=h;i=d;return j|0}return 0}function ac(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0;d=i;i=i+48|0;f=d;g=d+28|0;h=d+24|0;j=d+20|0;k=d+36|0;l=d+34|0;m=d+16|0;n=d+12|0;o=d+32|0;p=a+24|0;q=p;r=c[q>>2]|0;s=c[q+4>>2]|0;q=a+16|0;c[q>>2]=r;c[q+4>>2]=s;if((r|0)==0&(s|0)==0){t=0;i=d;return t|0}q=a+38|0;u=b[q>>1]|0;a:do{if(!(u<<16>>16==0)?(v=c[a+32>>2]|0,(v|0)!=0):0){w=0;x=0;while(1){y=v+(w<<3)|0;z=(x&65535)+1<<16>>16;if((c[y>>2]|0)==(r|0)&(c[y+4>>2]|0)==(s|0)){t=0;break}if((z&65535)<(u&65535)){w=z&65535;x=x+1|0}else{break a}}i=d;return t|0}}while(0);x=u+1<<16>>16;b[q>>1]=x;u=a+36|0;do{if((x&65535)>(e[u>>1]|0)){w=a+32|0;v=ze(a,c[w>>2]|0,x&65535,16,14824)|0;if((v|0)==0){t=0;i=d;return t|0}else{z=b[q>>1]|0;b[u>>1]=(z&65535)<<1;c[w>>2]=v;A=z;B=v;break}}else{A=x;B=c[a+32>>2]|0}}while(0);x=B+((A&65535)+ -1<<3)|0;c[x>>2]=r;c[x+4>>2]=s;gb[c[a+564>>2]&15](a);s=a+448|0;b[s>>1]=(b[s>>1]|0)+1<<16>>16;s=p;x=c[s>>2]|0;r=c[s+4>>2]|0;s=bc(a,x,r,j,p)|0;if(s<<16>>16==0){p=c[a+628>>2]|0;A=f;c[A>>2]=x;c[A+4>>2]=r;sc(p,12600,12400,f);t=0;i=d;return t|0}p=0;r=0;A=c[j>>2]|0;while(1){x=e[A>>1]|0;if(x>>>0<p>>>0){C=14;break}r=r+1<<16>>16;if(!((r&65535)<(s&65535))){break}else{p=x+1&65535;A=A+24|0}}if((C|0)==14){ue(c[a+628>>2]|0,15008,15040,f)}A=0;p=c[j>>2]|0;while(1){r=p+24|0;x=A+1|0;B=x&65535;b:do{if((B&65535)<(s&65535)){u=r;q=B;while(1){if((b[p>>1]|0)==(b[u>>1]|0)){b[u>>1]=0}v=q+1<<16>>16;if(!((v&65535)<(s&65535))){break b}u=u+24|0;q=v}}}while(0);if(B<<16>>16==s<<16>>16){break}else{A=x;p=r}}p=a+12|0;c[p>>2]=c[p>>2]&-1048641;Mb(a);Ob(a)|0;c[f>>2]=1;Ib(a,284,f)|0;A=c[j>>2]|0;q=0;while(1){if((b[A>>1]|0)==277){C=27;break}u=q+1<<16>>16;if((u&65535)<(s&65535)){A=A+24|0;q=u}else{C=30;break}}if((C|0)==27){if((A|0)!=0){if((cc(a,A,0)|0)!=0){b[A>>1]=0;C=30}}else{C=30}}c:do{if((C|0)==30){A=c[j>>2]|0;q=0;while(1){if((b[A>>1]|0)==259){C=33;break}u=q+1<<16>>16;if((u&65535)<(s&65535)){A=A+24|0;q=u}else{C=45;break}}do{if((C|0)==33){if((A|0)==0){C=45}else{q=dc(a,A,k)|0;if((q|0)==1){r=A+8|0;x=c[r+4>>2]|0;B=a+98|0;if(!(x>>>0<0|(x|0)==0&(c[r>>2]|0)>>>0<(e[B>>1]|0)>>>0)){r=ic(a,A,h)|0;if((r|0)==0){x=c[h>>2]|0;u=b[B>>1]|0;B=b[x>>1]|0;b[k>>1]=B;v=x;z=u;while(1){u=z+ -1<<16>>16;w=v+2|0;if(u<<16>>16==0){D=0;break}if((b[w>>1]|0)==B<<16>>16){v=w;z=u}else{D=5;break}}ne(x);E=D;C=41}else{G=r}}else{G=1}}else{E=q;C=41}if((C|0)==41){if((E|0)==0){c[f>>2]=e[k>>1]|0;if((Ib(a,259,f)|0)==0){break c}b[A>>1]=0;break}else{G=E}}ec(a,G,12600,12440,0);break c}}}while(0);if((C|0)==45?(c[f>>2]=1,(Ib(a,259,f)|0)==0):0){break}A=a+660|0;z=a+628|0;v=a+656|0;B=0;u=c[j>>2]|0;d:while(1){w=b[u>>1]|0;e:do{if(!(w<<16>>16==0)){y=c[A>>2]|0;f:do{if((y|0)!=0){H=c[v>>2]|0;I=w&65535;J=-1;K=y;while(1){L=(J+K|0)/2|0;M=c[c[H+(L<<2)>>2]>>2]|0;if((M|0)==(I|0)){N=L;break}O=M>>>0<I>>>0;M=O?L:J;P=O?K:L;if((M+1|0)==(P|0)){Q=I;C=56;break f}else{J=M;K=P}}while(1){if((N|0)==0){R=w;S=H;T=0;break f}K=N+ -1|0;if((c[c[H+(K<<2)>>2]>>2]|0)==(I|0)){N=K}else{break}}if((N|0)==-1){Q=I;C=56}else{R=w;S=H;T=N}}else{Q=w&65535;C=56}}while(0);g:do{if((C|0)==56){C=0;y=c[z>>2]|0;c[f>>2]=Q;c[f+4>>2]=Q;ue(y,12600,12456,f);if((Vb(a,$b(a,e[u>>1]|0,e[u+2>>1]|0)|0,1)|0)==0){y=c[z>>2]|0;K=e[u>>1]|0;c[f>>2]=K;c[f+4>>2]=K;ue(y,12600,12504,f);b[u>>1]=0;break e}y=c[A>>2]|0;if((y|0)==0){C=65;break d}K=b[u>>1]|0;J=c[v>>2]|0;P=K&65535;M=-1;L=y;while(1){y=(M+L|0)/2|0;O=c[c[J+(y<<2)>>2]>>2]|0;if((O|0)==(P|0)){U=y;break}V=O>>>0<P>>>0;O=V?y:M;W=V?L:y;if((O+1|0)==(W|0)){C=65;break d}else{M=O;L=W}}while(1){if((U|0)==0){R=K;S=J;T=0;break g}L=U+ -1|0;if((c[c[J+(L<<2)>>2]>>2]|0)==(P|0)){U=L}else{break}}if((U|0)==-1){C=65;break d}else{R=K;S=J;T=U}}}while(0);P=R&65535;if(!(R<<16>>16==0)){L=b[(c[S+(T<<2)>>2]|0)+24>>1]|0;if(L<<16>>16==0){b[u>>1]=0;break}if((P|0)==325|(P|0)==324|(P|0)==279|(P|0)==273){M=L&65535;L=a+(M>>>5<<2)+40|0;c[L>>2]=1<<(M&31)|c[L>>2];break}else if(!((P|0)==338|(P|0)==278|(P|0)==284|(P|0)==32998|(P|0)==322|(P|0)==323|(P|0)==32997|(P|0)==257|(P|0)==256)){break}if((cc(a,u,0)|0)==0){break c}b[u>>1]=0}}}while(0);w=B+1<<16>>16;if((w&65535)<(s&65535)){B=w;u=u+24|0}else{C=74;break}}if((C|0)==65){za(12560,12584,3559,12600)}else if((C|0)==74){u=a+88|0;h:do{if((b[u>>1]|0)==6?(B=a+126|0,(b[B>>1]|0)==2):0){v=c[j>>2]|0;A=v;z=0;while(1){if((b[A>>1]|0)==273){break}z=z+1<<16>>16;if(!((z&65535)<(s&65535))){break h}else{A=A+24|0}}if((A|0)!=0?(z=A+8|0,(c[z>>2]|0)==1&(c[z+4>>2]|0)==0):0){z=v;w=0;while(1){if((b[z>>1]|0)==279){break}w=w+1<<16>>16;if(!((w&65535)<(s&65535))){break h}else{z=z+24|0}}if((z|0)!=0?(w=z+8|0,(c[w>>2]|0)==1&(c[w+4>>2]|0)==0):0){b[B>>1]=1;ue(c[a+628>>2]|0,12600,12624,f)}}}}while(0);w=a+40|0;v=c[w>>2]|0;if((v&2|0)==0){A=c[a+628>>2]|0;c[f>>2]=12712;sc(A,14840,14856,f);break}if((v&4|0)==0){v=Gd(a)|0;c[a+168>>2]=v;c[a+68>>2]=c[a+56>>2];c[a+72>>2]=c[a+100>>2];c[a+76>>2]=c[a+64>>2];X=c[p>>2]&-1025;Y=v}else{v=_d(a)|0;c[a+168>>2]=v;X=c[p>>2]|1024;Y=v}c[p>>2]=X;v=a+168|0;if((Y|0)==0){A=c[a+628>>2]|0;c[f>>2]=(X&1024|0)!=0?12760:12768;sc(A,12600,12728,f);break}A=a+164|0;c[A>>2]=Y;q=a+126|0;if((b[q>>1]|0)==2){c[A>>2]=(Y>>>0)/((e[a+98>>1]|0)>>>0)|0}r=c[w>>2]|0;do{if((r&33554432|0)==0){x=X&1024;if((b[u>>1]|0)==6&(x|0)==0){if((Y|0)==1){c[w>>2]=r|33554432;break}else{Z=0}}else{Z=x}x=c[a+628>>2]|0;c[f>>2]=(Z|0)!=0?12776:12792;sc(x,14840,14856,f);break c}}while(0);r=a+98|0;x=a+172|0;P=a+176|0;L=a+84|0;M=0;H=c[j>>2]|0;i:while(1){I=b[H>>1]|0;W=I&65535;do{if((W|0)==339|(W|0)==32996|(W|0)==258|(W|0)==281|(W|0)==280){O=dc(a,H,l)|0;if((O|0)==1){y=H+8|0;V=c[y+4>>2]|0;if(V>>>0<0|(V|0)==0&(c[y>>2]|0)>>>0<(e[r>>1]|0)>>>0){_=1;C=109;break i}y=ic(a,H,g)|0;if((y|0)!=0){_=y;C=109;break i}y=c[g>>2]|0;V=b[r>>1]|0;$=b[y>>1]|0;b[l>>1]=$;aa=y;ca=V;while(1){V=ca+ -1<<16>>16;da=aa+2|0;if(V<<16>>16==0){ea=0;break}if((b[da>>1]|0)==$<<16>>16){aa=da;ca=V}else{ea=5;break}}ne(y);fa=ea}else{fa=O}ca=e[H>>1]|0;if((fa|0)!=0){ga=ca;ha=fa;C=111;break i}c[f>>2]=e[l>>1]|0;if((Ib(a,ca,f)|0)==0){break c}}else if((W|0)==324|(W|0)==273){if((hc(a,H,c[v>>2]|0,x)|0)==0){break c}}else if((W|0)==341|(W|0)==340){ca=H+8|0;if(!((c[ca>>2]|0)==(e[r>>1]|0)&(c[ca+4>>2]|0)==0)){ia=I;ja=1;C=118;break i}ka=gc(a,H,m)|0;if((ka|0)!=0){C=117;break i}ca=c[p>>2]|0;c[p>>2]=ca|4194304;aa=e[H>>1]|0;$=c[m>>2]|0;c[f>>2]=$;V=Ib(a,aa,f)|0;c[p>>2]=ca;ne($);if((V|0)==0){break c}}else if((W|0)==255){if((dc(a,H,o)|0)==0){V=e[o>>1]|0;if((V|0)==3){la=2}else if((V|0)==2){la=1}else{break}c[f>>2]=la;Ib(a,254,f)|0}}else if((W|0)==325|(W|0)==279){if((hc(a,H,c[v>>2]|0,P)|0)==0){break c}}else if((W|0)==301|(W|0)==320){c[n>>2]=0;V=e[L>>1]|0;$=1<<V;ca=H+8|0;aa=c[ca>>2]|0;da=c[ca+4>>2]|0;if(I<<16>>16==301?(aa|0)==($|0)&(da|0)==0:0){ma=$;na=0}else{ma=3<<V;na=$}if((aa|0)==(ma|0)&(da|0)==0){da=ic(a,H,n)|0;aa=e[H>>1]|0;if((da|0)==0){$=c[n>>2]|0;c[f>>2]=$;c[f+4>>2]=$+(na<<1);c[f+8>>2]=$+(na<<1<<1);Ib(a,aa,f)|0;ne($);break}else{oa=aa;pa=da}}else{oa=W;pa=1}da=_b(a,oa)|0;if((da|0)==0){qa=12808}else{qa=c[da+28>>2]|0}ec(a,pa,12600,qa,1)}else if((W|0)!=0){cc(a,H,1)|0}}while(0);W=M+1<<16>>16;if((W&65535)<(s&65535)){M=W;H=H+24|0}else{C=139;break}}if((C|0)==109){ga=e[H>>1]|0;ha=_;C=111}else if((C|0)==117){ia=b[H>>1]|0;ja=ka;C=118}else if((C|0)==139){do{if((b[u>>1]|0)==6){if((c[w>>2]&256|0)==0){ue(c[a+628>>2]|0,12600,12824,f);c[f>>2]=6;if((Ib(a,262,f)|0)==0){break c}}else{M=a+90|0;if((b[M>>1]|0)==2){b[M>>1]=6;ue(c[a+628>>2]|0,12600,12880,f)}}M=c[w>>2]|0;if((M&64|0)==0){ue(c[a+628>>2]|0,12600,12960,f);c[f>>2]=8;if((Ib(a,258,f)|0)==0){break c}ra=c[w>>2]|0}else{ra=M}if((ra&65536|0)==0){M=a+90|0;L=b[M>>1]|0;if(L<<16>>16==2){ue(c[a+628>>2]|0,12600,13024,f);c[f>>2]=3;if((Ib(a,277,f)|0)==0){break c}sa=b[M>>1]|0}else{sa=L}if(sa<<16>>16==6){ue(c[a+628>>2]|0,12600,13104,f);c[f>>2]=3;if((Ib(a,277,f)|0)==0){break c}else{break}}else if(sa<<16>>16==1|sa<<16>>16==0?(c[f>>2]=1,(Ib(a,277,f)|0)==0):0){break c}else{break}}}}while(0);H=a+90|0;do{if((b[H>>1]|0)==3?(c[w>>2]&67108864|0)==0:0){if((e[a+84>>1]|0)<=7){L=c[a+628>>2]|0;c[f>>2]=13184;sc(L,14840,14856,f);break c}if((b[a+98>>1]|0)==3){b[H>>1]=2;break}else{b[H>>1]=1;break}}}while(0);L=b[u>>1]|0;j:do{if(!(L<<16>>16==6)){if((c[w>>2]&16777216|0)==0){M=b[q>>1]|0;if(M<<16>>16==2){if((c[v>>2]|0)==(e[a+98>>1]|0)){C=167}else{C=166}}else if(M<<16>>16==1?(c[v>>2]|0)>>>0>1:0){C=166}else{C=167}if((C|0)==166){M=c[a+628>>2]|0;c[f>>2]=13200;sc(M,14840,14856,f);break c}else if((C|0)==167){ue(c[a+628>>2]|0,12600,13216,f);if((jc(a,c[j>>2]|0,s)|0)<0){break c}else{break}}}k:do{if((c[v>>2]|0)==1?(M=a+172|0,P=c[M>>2]|0,!((c[P>>2]|0)==0&(c[P+4>>2]|0)==0)):0){P=a+176|0;r=c[P>>2]|0;x=c[r>>2]|0;W=c[r+4>>2]|0;do{if(!((x|0)==0&(W|0)==0)){if(L<<16>>16==1?(r=jb[c[a+648>>2]&31](c[a+628>>2]|0)|0,I=c[M>>2]|0,B=Ii(r|0,F|0,c[I>>2]|0,c[I+4>>2]|0)|0,I=F,W>>>0>I>>>0|(W|0)==(I|0)&x>>>0>B>>>0):0){break}if((c[a+8>>2]|0)!=0){break k}if((b[u>>1]|0)!=1){break k}B=c[P>>2]|0;I=c[B>>2]|0;r=c[B+4>>2]|0;B=Id(a)|0;z=Yi(c[a+60>>2]|0,0,B|0,F|0)|0;B=F;if(!(r>>>0<B>>>0|(r|0)==(B|0)&I>>>0<z>>>0)){break k}}}while(0);ue(c[a+628>>2]|0,12600,13312,f);if((jc(a,c[j>>2]|0,s)|0)<0){break c}else{break j}}}while(0);if(((((b[q>>1]|0)==1?(c[v>>2]|0)>>>0>2:0)?(b[u>>1]|0)==1:0)?(P=c[a+176>>2]|0,x=P,W=c[x>>2]|0,M=c[x+4>>2]|0,x=P+8|0,P=c[x>>2]|0,O=c[x+4>>2]|0,!((W|0)==(P|0)&(M|0)==(O|0)|(W|0)==0&(M|0)==0|(P|0)==0&(O|0)==0)):0)?(ue(c[a+628>>2]|0,12600,13392,f),(jc(a,c[j>>2]|0,s)|0)<0):0){break c}}}while(0);L=c[j>>2]|0;if((L|0)!=0){ne(L);c[j>>2]=0}do{if((c[w>>2]&524288|0)==0){L=b[a+84>>1]|0;if((L&65535)>15){b[a+106>>1]=-1;break}else{b[a+106>>1]=(1<<(L&65535))+65535;break}}}while(0);w=c[v>>2]|0;l:do{if(w>>>0>1){L=a+180|0;c[L>>2]=1;O=c[a+172>>2]|0;P=O;M=c[P+4>>2]|0;W=c[P>>2]|0;P=1;while(1){x=O+(P<<3)|0;y=c[x>>2]|0;z=c[x+4>>2]|0;x=P+1|0;if(M>>>0>z>>>0|(M|0)==(z|0)&W>>>0>y>>>0){break}if(x>>>0<w>>>0){M=z;W=y;P=x}else{break l}}c[L>>2]=0}}while(0);jb[c[a+504>>2]&31](a)|0;do{if((((b[q>>1]|0)==1?(c[v>>2]|0)==1:0)?(b[u>>1]|0)==1:0)?(w=c[p>>2]|0,(w&33792|0)==32768):0){P=a+176|0;W=c[P>>2]|0;if((W|0)==0){t=0;i=d;return t|0}M=W;W=c[M>>2]|0;O=c[M+4>>2]|0;M=a+172|0;x=c[M>>2]|0;y=c[x>>2]|0;z=c[x+4>>2]|0;if((b[H>>1]|0)==6?(w&16384|0)==0:0){ta=e[a+194>>1]|0}else{ta=1}w=ae(a,ta)|0;x=F;if(x>>>0>0|(x|0)==0&w>>>0>8192){ua=w;va=x;wa=ta}else{if((w|0)==0&(x|0)==0){break}I=Zi(8192,0,w|0,x|0)|0;B=ba(I,ta)|0;r=Yi(I|0,F|0,w|0,x|0)|0;ua=r;va=F;wa=B}if(wa>>>0<(c[a+100>>2]|0)>>>0?(B=Oi(W|0,O|0,-1,-1)|0,r=Oi(B|0,F|0,ua|0,va|0)|0,B=Zi(r|0,F|0,ua|0,va|0)|0,r=F,!((B|0)==0&(r|0)==0|(r>>>0>0|(r|0)==0&B>>>0>4294967295))):0){r=Ae(a,B,8,13576)|0;x=Ae(a,B,8,13616)|0;w=(r|0)==0;I=(x|0)==0;if(!(w|I)){if((B|0)!=0){da=va;aa=O;O=ua;$=W;W=y;y=z;z=0;while(1){V=da>>>0>aa>>>0|(da|0)==(aa|0)&O>>>0>$>>>0;O=V?$:O;da=V?aa:da;V=r+(z<<3)|0;c[V>>2]=O;c[V+4>>2]=da;V=x+(z<<3)|0;c[V>>2]=W;c[V+4>>2]=y;W=Oi(O|0,da|0,W|0,y|0)|0;y=F;$=Ii($|0,aa|0,O|0,da|0)|0;z=z+1|0;if((z|0)==(B|0)){break}else{aa=F}}}c[v>>2]=B;c[A>>2]=B;c[f>>2]=wa;Ib(a,278,f)|0;ne(c[P>>2]|0);ne(c[M>>2]|0);c[P>>2]=r;c[M>>2]=x;c[a+180>>2]=1;break}if(!w){ne(r)}if(!I){ne(x)}}}}while(0);c[p>>2]=c[p>>2]&-2097161;c[a+444>>2]=-1;c[a+452>>2]=-1;c[a+488>>2]=-1;c[a+492>>2]=-1;A=a+496|0;c[A>>2]=-1;v=Md(a)|0;c[a+580>>2]=v;if((v|0)==0){sc(c[a+628>>2]|0,12600,13472,f);t=0;i=d;return t|0}if((c[p>>2]&1024|0)==0){if((Kd(a)|0)!=0){t=1;i=d;return t|0}sc(c[a+628>>2]|0,12600,13544,f);t=0;i=d;return t|0}else{v=ce(a)|0;c[A>>2]=v;if((v|0)!=0){t=1;i=d;return t|0}sc(c[a+628>>2]|0,12600,13512,f);t=0;i=d;return t|0}}if((C|0)==111){v=_b(a,ga)|0;if((v|0)==0){xa=12808}else{xa=c[v+28>>2]|0}ec(a,ha,12600,xa,0);break}else if((C|0)==118){v=_b(a,ia&65535)|0;if((v|0)==0){ya=12808}else{ya=c[v+28>>2]|0}ec(a,ja,12600,ya,0);break}}}}while(0);ya=c[j>>2]|0;if((ya|0)==0){t=0;i=d;return t|0}ne(ya);t=0;i=d;return t|0}function bc(f,g,h,j,k){f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;l=i;i=i+32|0;m=l+16|0;n=l+28|0;o=l+8|0;p=l+24|0;q=l;r=l+20|0;if((j|0)==0){za(14416,12584,4453,14424)}s=f+16|0;t=s;c[t>>2]=g;c[t+4>>2]=h;h=(k|0)!=0;if(h){t=k;c[t>>2]=0;c[t+4>>2]=0}t=f+12|0;g=c[t>>2]|0;do{if((g&2048|0)==0){u=f+628|0;v=s;w=mb[c[f+640>>2]&63](c[u>>2]|0,c[v>>2]|0,c[v+4>>2]|0,0)|0;v=s;if(!((w|0)==(c[v>>2]|0)&(F|0)==(c[v+4>>2]|0))){v=c[u>>2]|0;c[m>>2]=c[f>>2];sc(v,14424,14448,m);x=0;i=l;return x|0}v=f+632|0;w=c[v>>2]|0;y=c[u>>2]|0;do{if((c[t>>2]&524288|0)==0){if((fb[w&31](y,n,2)|0)!=2){z=c[u>>2]|0;c[m>>2]=c[f>>2];sc(z,14424,14488,m);x=0;i=l;return x|0}if((c[t>>2]&128|0)!=0){Nd(n)}z=b[n>>1]|0;if((z&65535)>4096){sc(c[u>>2]|0,14424,14528,m);x=0;i=l;return x|0}else{A=z;B=12}}else{if((fb[w&31](y,o,8)|0)!=8){z=c[u>>2]|0;c[m>>2]=c[f>>2];sc(z,14424,14488,m);x=0;i=l;return x|0}if((c[t>>2]&128|0)!=0){Pd(o)}z=o;C=c[z>>2]|0;D=c[z+4>>2]|0;if(!(D>>>0>0|(D|0)==0&C>>>0>4096)){D=C&65535;b[n>>1]=D;A=D;B=20;break}sc(c[u>>2]|0,14424,14528,m);x=0;i=l;return x|0}}while(0);y=Ae(f,A&65535,B,14608)|0;if((y|0)==0){x=0;i=l;return x|0}w=ba(e[n>>1]|0,B)|0;D=fb[c[v>>2]&31](c[u>>2]|0,y,w)|0;if((D|0)!=(ba(e[n>>1]|0,B)|0)){D=c[u>>2]|0;c[m>>2]=c[f>>2];sc(D,14424,14632,m);ne(y);x=0;i=l;return x|0}if(h){D=c[v>>2]|0;w=c[u>>2]|0;if((c[t>>2]&524288|0)!=0){if((fb[D&31](w,k,8)|0)!=8){C=k;c[C>>2]=0;c[C+4>>2]=0}if((c[t>>2]&128|0)==0){E=y;break}Pd(k);E=y;break}if((fb[D&31](w,p,4)|0)!=4){c[p>>2]=0}if((c[t>>2]&128|0)!=0){Od(p)}w=k;c[w>>2]=c[p>>2];c[w+4>>2]=0;E=y}else{E=y}}else{y=s;w=c[y>>2]|0;if(!((w|0)==(w|0)&(((w|0)<0)<<31>>31|0)==(c[y+4>>2]|0))){sc(c[f+628>>2]|0,14424,14672,m);x=0;i=l;return x|0}do{if((g&524288|0)==0){y=w+2|0;if(!((w|0)>2147483645|(y|0)<2)?(y|0)<=(c[f+616>>2]|0):0){qe(n,(c[f+612>>2]|0)+w|0,2);if((c[t>>2]&128|0)!=0){Nd(n)}D=b[n>>1]|0;if(!((D&65535)>4096)){G=D;H=12;I=y;break}sc(c[f+628>>2]|0,14424,14528,m);x=0;i=l;return x|0}sc(c[f+628>>2]|0,14424,14672,m);x=0;i=l;return x|0}else{y=w+8|0;if(!((w|0)>2147483639|(y|0)<8)?(y|0)<=(c[f+616>>2]|0):0){qe(q,(c[f+612>>2]|0)+w|0,8);if((c[t>>2]&128|0)!=0){Pd(q)}D=q;C=c[D>>2]|0;z=c[D+4>>2]|0;if(!(z>>>0>0|(z|0)==0&C>>>0>4096)){z=C&65535;b[n>>1]=z;G=z;H=20;I=y;break}sc(c[f+628>>2]|0,14424,14528,m);x=0;i=l;return x|0}sc(c[f+628>>2]|0,14424,14672,m);x=0;i=l;return x|0}}while(0);if(G<<16>>16==0){sc(c[f+628>>2]|0,14424,14712,m);x=0;i=l;return x|0}w=Ae(f,G&65535,H,14608)|0;if((w|0)==0){x=0;i=l;return x|0}u=ba(e[n>>1]|0,H)|0;v=u+I|0;if(!((v|0)<(I|0)|(v|0)<(u|0))?(y=f+616|0,(v|0)<=(c[y>>2]|0)):0){v=f+612|0;qe(w,(c[v>>2]|0)+I|0,u);if(!h){E=w;break}u=(ba(e[n>>1]|0,H)|0)+I|0;z=c[t>>2]|0;if((z&524288|0)!=0){C=u+8|0;if(!((u|0)>2147483639|(C|0)<8)?(C|0)<=(c[y>>2]|0):0){qe(k,(c[v>>2]|0)+u|0,8);J=c[t>>2]|0}else{C=k;c[C>>2]=0;c[C+4>>2]=0;J=z}if((J&128|0)==0){E=w;break}Pd(k);E=w;break}C=u+4|0;if(!((u|0)>2147483643|(C|0)<4)?(C|0)<=(c[y>>2]|0):0){qe(r,(c[v>>2]|0)+u|0,4);K=c[t>>2]|0}else{c[r>>2]=0;K=z}if((K&128|0)!=0){Od(r)}z=k;c[z>>2]=c[r>>2];c[z+4>>2]=0;E=w;break}sc(c[f+628>>2]|0,14424,14792,m);ne(w);x=0;i=l;return x|0}}while(0);m=Ae(f,e[n>>1]|0,24,14608)|0;if((m|0)==0){ne(E);x=0;i=l;return x|0}a:do{if((b[n>>1]|0)!=0){f=E;r=m;k=1;while(1){K=c[t>>2]|0;if((K&128|0)==0){L=K}else{Nd(f);L=c[t>>2]|0}b[r>>1]=b[f>>1]|0;K=f+2|0;if((L&128|0)==0){M=L}else{Nd(K);M=c[t>>2]|0}b[r+2>>1]=b[K>>1]|0;K=f+4|0;J=(M&128|0)!=0;if((M&524288|0)==0){if(J){Od(K)}I=r+8|0;c[I>>2]=c[K>>2];c[I+4>>2]=0;c[r+16>>2]=c[f+8>>2];N=f+12|0}else{if(J){Pd(K)}J=a[K]|0;K=a[f+5|0]|0;I=a[f+6|0]|0;H=a[f+7|0]|0;h=a[f+8|0]|0;G=a[f+9|0]|0;q=a[f+10|0]|0;g=Mi(d[f+11|0]|0,0,56)|0;s=F;p=Mi(q&255|0,0,48)|0;q=F;B=Mi(G&255|0,0,40)|0;G=F;A=Mi(H&255|0,0,24)|0;H=F;o=Mi(I&255|0,0,16)|0;I=F;w=Mi(K&255|0,0,8)|0;K=r+8|0;c[K>>2]=w|J&255|o|A|B|p|g;c[K+4>>2]=F|I|H|h&255|G|q|s;s=a[f+12|0]|0;q=a[f+13|0]|0;G=a[f+14|0]|0;h=a[f+15|0]|0;H=a[f+16|0]|0;I=a[f+17|0]|0;K=a[f+18|0]|0;g=Mi(d[f+19|0]|0,0,56)|0;p=F;B=Mi(K&255|0,0,48)|0;K=F;A=Mi(I&255|0,0,40)|0;I=F;o=Mi(h&255|0,0,24)|0;h=F;J=Mi(G&255|0,0,16)|0;G=F;w=Mi(q&255|0,0,8)|0;q=r+16|0;c[q>>2]=w|s&255|J|o|A|B|g;c[q+4>>2]=F|G|h|H&255|I|K|p;N=f+20|0}if(!((k&65535)<(e[n>>1]|0))){break a}f=N;r=r+24|0;k=k+1<<16>>16}}}while(0);ne(E);c[j>>2]=m;x=b[n>>1]|0;i=l;return x|0}function cc(f,j,l){f=f|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0.0,Tb=0.0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,fc=0,hc=0,jc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0;m=i;i=i+288|0;n=m+96|0;o=m+272|0;p=m+268|0;q=m+264|0;r=m+260|0;s=m+256|0;t=m+252|0;u=m+248|0;v=m+244|0;w=m+240|0;x=m+236|0;y=m+232|0;z=m+228|0;A=m+224|0;B=m+220|0;C=m+216|0;D=m+212|0;E=m+88|0;G=m+80|0;H=m+208|0;I=m+72|0;J=m+64|0;K=m+56|0;L=m+48|0;M=m+40|0;N=m+204|0;O=m+32|0;P=m+24|0;Q=m+200|0;R=m+276|0;S=m+196|0;T=m+16|0;U=m+192|0;V=m+8|0;W=m;X=m+188|0;Y=m+184|0;Z=m+180|0;_=m+176|0;$=m+172|0;aa=m+168|0;ba=m+164|0;ca=m+160|0;da=m+156|0;ea=m+152|0;fa=m+148|0;ga=m+144|0;ha=m+140|0;ia=m+136|0;ja=m+132|0;ka=m+128|0;la=m+124|0;ma=m+120|0;na=m+116|0;oa=m+112|0;pa=m+108|0;qa=c[f+660>>2]|0;ra=b[j>>1]|0;a:do{if((qa|0)!=0){sa=c[f+656>>2]|0;ta=ra&65535;ua=-1;va=qa;while(1){wa=(ua+va|0)/2|0;xa=c[c[sa+(wa<<2)>>2]>>2]|0;if((xa|0)==(ta|0)){ya=wa;break}Aa=xa>>>0<ta>>>0;ua=Aa?wa:ua;va=Aa?va:wa;if((ua+1|0)==(va|0)){break a}}while(1){if((ya|0)==0){Ba=0;break}va=ya+ -1|0;if((c[c[sa+(va<<2)>>2]>>2]|0)==(ta|0)){ya=va}else{Ca=7;break}}if((Ca|0)==7){if((ya|0)==-1){break}else{Ba=ya}}ta=c[sa+(Ba<<2)>>2]|0;b:do{switch(c[ta+16>>2]|0){case 2:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4770,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4771,13768)}va=j+8|0;c:do{if((c[va>>2]|0)==1&(c[va+4>>2]|0)==0){switch(e[j+2>>1]|0){case 9:{ua=c[j+16>>2]|0;c[N>>2]=ua;if((c[f+12>>2]&128|0)==0){Da=ua}else{Od(N);Da=c[N>>2]|0}ua=Da>>>0<256;Ea=ua?0:4;Fa=ua?Da&255:0;break c;break};case 16:{ua=f+12|0;wa=c[ua>>2]|0;Aa=j+16|0;if((wa&524288|0)==0){xa=c[Aa>>2]|0;c[J>>2]=xa;if((wa&128|0)==0){Ga=wa;Ha=xa}else{Od(J);Ga=c[ua>>2]|0;Ha=c[J>>2]|0}if((Ga&2048|0)==0){xa=f+628|0;Ia=mb[c[f+640>>2]&63](c[xa>>2]|0,Ha,0,0)|0;if(!((Ia|0)==(Ha|0)&(F|0)==0)){Ea=3;Fa=0;break c}if((fb[c[f+632>>2]&31](c[xa>>2]|0,O,8)|0)!=8){Ea=3;Fa=0;break c}}else{if(Ha>>>0>4294967287){Ea=3;Fa=0;break c}if((Ha+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ea=3;Fa=0;break c}qe(O,(c[f+612>>2]|0)+Ha|0,8)}Ja=c[ua>>2]|0}else{ua=Aa;Aa=c[ua+4>>2]|0;xa=O;c[xa>>2]=c[ua>>2];c[xa+4>>2]=Aa;Ja=wa}if((Ja&128|0)!=0){Pd(O)}wa=O;Aa=c[wa>>2]|0;xa=c[wa+4>>2]|0;wa=xa>>>0<0|(xa|0)==0&Aa>>>0<256;Ea=wa?0:4;Fa=wa?Aa&255:0;break c;break};case 3:{Aa=c[f+12>>2]|0;wa=b[j+16>>1]|0;b[n>>1]=wa;if((Aa&128|0)==0){Ka=wa}else{Nd(n);Ka=b[n>>1]|0}wa=(Ka&65535)<256;Ea=wa?0:4;Fa=wa?Ka&255:0;break c;break};case 17:{wa=f+12|0;Aa=c[wa>>2]|0;xa=j+16|0;if((Aa&524288|0)==0){ua=c[xa>>2]|0;c[K>>2]=ua;if((Aa&128|0)==0){La=Aa;Ma=ua}else{Od(K);La=c[wa>>2]|0;Ma=c[K>>2]|0}if((La&2048|0)==0){ua=f+628|0;Ia=mb[c[f+640>>2]&63](c[ua>>2]|0,Ma,0,0)|0;if(!((Ia|0)==(Ma|0)&(F|0)==0)){Ea=3;Fa=0;break c}if((fb[c[f+632>>2]&31](c[ua>>2]|0,P,8)|0)!=8){Ea=3;Fa=0;break c}}else{if(Ma>>>0>4294967287){Ea=3;Fa=0;break c}if((Ma+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ea=3;Fa=0;break c}qe(P,(c[f+612>>2]|0)+Ma|0,8)}Na=c[wa>>2]|0}else{wa=xa;xa=c[wa+4>>2]|0;ua=P;c[ua>>2]=c[wa>>2];c[ua+4>>2]=xa;Na=Aa}if((Na&128|0)!=0){Pd(P)}Aa=P;xa=c[Aa>>2]|0;ua=c[Aa+4>>2]|0;Aa=ua>>>0<0|(ua|0)==0&xa>>>0<256;Ea=Aa?0:4;Fa=Aa?xa&255:0;break c;break};case 8:{xa=c[f+12>>2]|0;Aa=b[j+16>>1]|0;b[L>>1]=Aa;if((xa&128|0)==0){Oa=Aa}else{Nd(L);Oa=b[L>>1]|0}Aa=(Oa&65535)<256;Ea=Aa?0:4;Fa=Aa?Oa&255:0;break c;break};case 1:{Ea=0;Fa=a[j+16|0]|0;break c;break};case 6:{Aa=a[j+16|0]|0;xa=Aa<<24>>24>-1;Ea=xa?0:4;Fa=xa?Aa:0;break c;break};case 4:{Aa=c[j+16>>2]|0;c[M>>2]=Aa;if((c[f+12>>2]&128|0)==0){Pa=Aa}else{Od(M);Pa=c[M>>2]|0}Aa=Pa>>>0<256;Ea=Aa?0:4;Fa=Aa?Pa&255:0;break c;break};default:{Ea=2;Fa=0;break c}}}else{Ea=1;Fa=0}}while(0);if((Ea|0)==0){va=e[j>>1]|0;c[n>>2]=Fa&255;if((Ib(f,va,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=Ea;Ca=758}break};case 10:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4822,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4823,13768)}va=j+8|0;d:do{if((c[va>>2]|0)==1&(c[va+4>>2]|0)==0){switch(e[j+2>>1]|0){case 8:{Aa=c[f+12>>2]|0;xa=b[j+16>>1]|0;b[E>>1]=xa;if((Aa&128|0)==0){Sa=xa}else{Nd(E);Sa=b[E>>1]|0}g[U>>2]=+(Sa<<16>>16);Ta=0;break d;break};case 4:{xa=c[j+16>>2]|0;c[G>>2]=xa;if((c[f+12>>2]&128|0)==0){Ua=xa}else{Od(G);Ua=c[G>>2]|0}g[U>>2]=+(Ua>>>0);Ta=0;break d;break};case 16:{xa=f+12|0;Aa=c[xa>>2]|0;ua=j+16|0;if((Aa&524288|0)==0){wa=c[ua>>2]|0;c[C>>2]=wa;if((Aa&128|0)==0){Va=Aa;Wa=wa}else{Od(C);Va=c[xa>>2]|0;Wa=c[C>>2]|0}if((Va&2048|0)==0){wa=f+628|0;Ia=mb[c[f+640>>2]&63](c[wa>>2]|0,Wa,0,0)|0;if(!((Ia|0)==(Wa|0)&(F|0)==0)){Ta=3;break d}if((fb[c[f+632>>2]&31](c[wa>>2]|0,I,8)|0)!=8){Ta=3;break d}}else{if(Wa>>>0>4294967287){Ta=3;break d}if((Wa+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ta=3;break d}qe(I,(c[f+612>>2]|0)+Wa|0,8)}Xa=c[xa>>2]|0}else{xa=ua;ua=c[xa+4>>2]|0;wa=I;c[wa>>2]=c[xa>>2];c[wa+4>>2]=ua;Xa=Aa}if((Xa&128|0)!=0){Pd(I)}Aa=I;g[U>>2]=+((c[Aa>>2]|0)>>>0)+4294967296.0*+((c[Aa+4>>2]|0)>>>0);Ta=0;break d;break};case 1:{g[U>>2]=+(d[j+16|0]|0);Ta=0;break d;break};case 6:{g[U>>2]=+(a[j+16|0]|0);Ta=0;break d;break};case 3:{Aa=c[f+12>>2]|0;ua=b[j+16>>1]|0;b[n>>1]=ua;if((Aa&128|0)==0){Ya=ua}else{Nd(n);Ya=b[n>>1]|0}g[U>>2]=+(Ya&65535);Ta=0;break d;break};case 9:{ua=c[j+16>>2]|0;c[H>>2]=ua;if((c[f+12>>2]&128|0)==0){Za=ua}else{Od(H);Za=c[H>>2]|0}g[U>>2]=+(Za|0);Ta=0;break d;break};case 17:{ua=f+12|0;Aa=c[ua>>2]|0;wa=j+16|0;if((Aa&524288|0)==0){xa=c[wa>>2]|0;c[B>>2]=xa;if((Aa&128|0)==0){_a=Aa;$a=xa}else{Od(B);_a=c[ua>>2]|0;$a=c[B>>2]|0}if((_a&2048|0)==0){xa=f+628|0;Ia=mb[c[f+640>>2]&63](c[xa>>2]|0,$a,0,0)|0;if(!((Ia|0)==($a|0)&(F|0)==0)){Ta=3;break d}if((fb[c[f+632>>2]&31](c[xa>>2]|0,J,8)|0)!=8){Ta=3;break d}}else{if($a>>>0>4294967287){Ta=3;break d}if(($a+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ta=3;break d}qe(J,(c[f+612>>2]|0)+$a|0,8)}ab=c[ua>>2]|0}else{ua=wa;wa=c[ua+4>>2]|0;xa=J;c[xa>>2]=c[ua>>2];c[xa+4>>2]=wa;ab=Aa}if((ab&128|0)!=0){Pd(J)}Aa=J;g[U>>2]=+((c[Aa>>2]|0)>>>0)+4294967296.0*+(c[Aa+4>>2]|0);Ta=0;break d;break};case 5:{Aa=qc(f,j,K)|0;if((Aa|0)!=0){Ta=Aa;break d}g[U>>2]=+h[K>>3];Ta=0;break d;break};case 10:{Aa=rc(f,j,L)|0;if((Aa|0)!=0){Ta=Aa;break d}g[U>>2]=+h[L>>3];Ta=0;break d;break};case 11:{Aa=c[f+12>>2]|0;g[U>>2]=+g[j+16>>2];if((Aa&128|0)==0){Ta=0;break d}Od(U);Ta=0;break d;break};case 12:{Aa=f+12|0;wa=c[Aa>>2]|0;xa=j+16|0;if((wa&524288|0)==0){ua=c[xa>>2]|0;c[D>>2]=ua;if((wa&128|0)==0){bb=wa;cb=ua}else{Od(D);bb=c[Aa>>2]|0;cb=c[D>>2]|0}if((bb&2048|0)==0){ua=f+628|0;Ia=mb[c[f+640>>2]&63](c[ua>>2]|0,cb,0,0)|0;if(!((Ia|0)==(cb|0)&(F|0)==0)){Ta=3;break d}if((fb[c[f+632>>2]&31](c[ua>>2]|0,M,8)|0)!=8){Ta=3;break d}}else{if(cb>>>0>4294967287){Ta=3;break d}if((cb+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ta=3;break d}qe(M,(c[f+612>>2]|0)+cb|0,8)}db=c[Aa>>2]|0}else{Aa=xa;c[k>>2]=c[Aa>>2];c[k+4>>2]=c[Aa+4>>2];h[M>>3]=+h[k>>3];db=wa}if((db&128|0)!=0){Pd(M)}g[U>>2]=+h[M>>3];Ta=0;break d;break};default:{Ta=2;break d}}}else{Ta=1}}while(0);if((Ta|0)==0){va=e[j>>1]|0;h[k>>3]=+g[U>>2];c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];if((Ib(f,va,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=Ta;Ca=758}break};case 4:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4783,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4784,13768)}va=dc(f,j,R)|0;if((va|0)==0){wa=e[j>>1]|0;c[n>>2]=e[R>>1]|0;if((Ib(f,wa,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=va;Ca=758}break};case 51:{za(13824,12584,4711,13768);break};case 13:{za(13864,12584,4712,13768);break};case 6:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4796,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4797,13768)}va=j+8|0;e:do{if((c[va>>2]|0)==1&(c[va+4>>2]|0)==0){switch(e[j+2>>1]|0){case 1:{c[S>>2]=d[j+16|0]|0;eb=0;break e;break};case 6:{wa=a[j+16|0]|0;if(!(wa<<24>>24>-1)){eb=4;break e}c[S>>2]=wa<<24>>24;eb=0;break e;break};case 8:{wa=c[f+12>>2]|0;Aa=b[j+16>>1]|0;b[J>>1]=Aa;if((wa&128|0)==0){gb=Aa}else{Nd(J);gb=b[J>>1]|0}if(!(gb<<16>>16>-1)){eb=4;break e}c[S>>2]=gb<<16>>16;eb=0;break e;break};case 4:{c[S>>2]=c[j+16>>2];if((c[f+12>>2]&128|0)==0){eb=0;break e}Od(S);eb=0;break e;break};case 9:{Aa=c[j+16>>2]|0;c[K>>2]=Aa;if((c[f+12>>2]&128|0)==0){hb=Aa}else{Od(K);hb=c[K>>2]|0}Aa=hb>>31&4;if((Aa|0)!=0){eb=Aa;break e}c[S>>2]=hb;eb=0;break e;break};case 16:{Aa=f+12|0;wa=c[Aa>>2]|0;xa=j+16|0;if((wa&524288|0)==0){ua=c[xa>>2]|0;c[H>>2]=ua;if((wa&128|0)==0){ib=wa;jb=ua}else{Od(H);ib=c[Aa>>2]|0;jb=c[H>>2]|0}if((ib&2048|0)==0){ua=f+628|0;Ia=mb[c[f+640>>2]&63](c[ua>>2]|0,jb,0,0)|0;if(!((Ia|0)==(jb|0)&(F|0)==0)){eb=3;break e}if((fb[c[f+632>>2]&31](c[ua>>2]|0,L,8)|0)!=8){eb=3;break e}}else{if(jb>>>0>4294967287){eb=3;break e}if((jb+8|0)>>>0>(c[f+616>>2]|0)>>>0){eb=3;break e}qe(L,(c[f+612>>2]|0)+jb|0,8)}kb=c[Aa>>2]|0}else{Aa=xa;xa=c[Aa+4>>2]|0;ua=L;c[ua>>2]=c[Aa>>2];c[ua+4>>2]=xa;kb=wa}if((kb&128|0)!=0){Pd(L)}wa=L;xa=c[wa>>2]|0;ua=c[wa+4>>2]|0;if(!(ua>>>0<1|(ua|0)==1&xa>>>0<0)){eb=4;break e}c[S>>2]=xa;eb=0;break e;break};case 3:{xa=c[f+12>>2]|0;ua=b[j+16>>1]|0;b[n>>1]=ua;if((xa&128|0)==0){lb=ua}else{Nd(n);lb=b[n>>1]|0}c[S>>2]=lb&65535;eb=0;break e;break};case 17:{ua=f+12|0;xa=c[ua>>2]|0;wa=j+16|0;if((xa&524288|0)==0){Aa=c[wa>>2]|0;c[I>>2]=Aa;if((xa&128|0)==0){nb=xa;ob=Aa}else{Od(I);nb=c[ua>>2]|0;ob=c[I>>2]|0}if((nb&2048|0)==0){Aa=f+628|0;Ia=mb[c[f+640>>2]&63](c[Aa>>2]|0,ob,0,0)|0;if(!((Ia|0)==(ob|0)&(F|0)==0)){eb=3;break e}if((fb[c[f+632>>2]&31](c[Aa>>2]|0,M,8)|0)!=8){eb=3;break e}}else{if(ob>>>0>4294967287){eb=3;break e}if((ob+8|0)>>>0>(c[f+616>>2]|0)>>>0){eb=3;break e}qe(M,(c[f+612>>2]|0)+ob|0,8)}pb=c[ua>>2]|0}else{ua=wa;wa=c[ua+4>>2]|0;Aa=M;c[Aa>>2]=c[ua>>2];c[Aa+4>>2]=wa;pb=xa}if((pb&128|0)!=0){Pd(M)}xa=M;wa=c[xa>>2]|0;Aa=c[xa+4>>2]|0;if(!(Aa>>>0<1|(Aa|0)==1&wa>>>0<0)){eb=4;break e}c[S>>2]=wa;eb=0;break e;break};default:{eb=2;break e}}}else{eb=1}}while(0);if((eb|0)==0){va=e[j>>1]|0;c[n>>2]=c[S>>2];if((Ib(f,va,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=eb;Ca=758}break};case 1:{if((a[ta+27|0]|0)!=0){za(13904,12584,4721,13768)}va=mc(f,j,Q)|0;if((va|0)==0){wa=j+8|0;Aa=c[wa>>2]|0;f:do{if((Aa|0)==0){qb=0}else{xa=c[Q>>2]|0;ua=0;while(1){if((a[xa]|0)==0){qb=ua;break f}Ia=ua+1|0;if(Ia>>>0<Aa>>>0){xa=xa+1|0;ua=Ia}else{qb=Ia;break}}}}while(0);ua=qb+1|0;do{if(!(ua>>>0<Aa>>>0)){if(ua>>>0>Aa>>>0){xa=c[f+628>>2]|0;c[n>>2]=c[ta+28>>2];ue(xa,13768,14064,n);xa=wa;Ia=c[xa>>2]|0;rb=Ia+1|0;sb=Oi(Ia|0,c[xa+4>>2]|0,1,0)|0;if((rb|0)==(sb|0)&0==(F|0)){sb=me(rb)|0;rb=c[Q>>2]|0;if((sb|0)==0){tb=rb}else{qe(sb,rb,c[wa>>2]|0);a[sb+(c[wa>>2]|0)|0]=0;if((rb|0)!=0){ne(rb)}c[Q>>2]=sb;ub=sb;break}}else{tb=c[Q>>2]|0}if((tb|0)==0){Qa=0;i=m;return Qa|0}ne(tb);Qa=0;i=m;return Qa|0}else{Ca=30}}else{sb=c[f+628>>2]|0;c[n>>2]=c[ta+28>>2];ue(sb,13768,13928,n);Ca=30}}while(0);if((Ca|0)==30){ub=c[Q>>2]|0}wa=e[j>>1]|0;c[n>>2]=ub;Aa=Ib(f,wa,n)|0;if((ub|0)!=0){ne(ub)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=va;Ca=758}break};case 8:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4809,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4810,13768)}Aa=j+8|0;g:do{if((c[Aa>>2]|0)==1&(c[Aa+4>>2]|0)==0){switch(e[j+2>>1]|0){case 8:{wa=c[f+12>>2]|0;ua=b[j+16>>1]|0;b[H>>1]=ua;if((wa&128|0)==0){vb=ua}else{Nd(H);vb=b[H>>1]|0}if(!(vb<<16>>16>-1)){wb=4;break g}ua=vb<<16>>16;wa=T;c[wa>>2]=ua;c[wa+4>>2]=((ua|0)<0)<<31>>31;wb=0;break g;break};case 16:{ua=f+12|0;wa=c[ua>>2]|0;sb=j+16|0;if((wa&524288|0)==0){rb=c[sb>>2]|0;c[E>>2]=rb;if((wa&128|0)==0){xb=wa;yb=rb}else{Od(E);xb=c[ua>>2]|0;yb=c[E>>2]|0}if((xb&2048|0)==0){rb=f+628|0;xa=mb[c[f+640>>2]&63](c[rb>>2]|0,yb,0,0)|0;if(!((xa|0)==(yb|0)&(F|0)==0)){wb=3;break g}if((fb[c[f+632>>2]&31](c[rb>>2]|0,T,8)|0)!=8){wb=3;break g}}else{if(yb>>>0>4294967287){wb=3;break g}if((yb+8|0)>>>0>(c[f+616>>2]|0)>>>0){wb=3;break g}qe(T,(c[f+612>>2]|0)+yb|0,8)}zb=c[ua>>2]|0}else{ua=sb;sb=c[ua+4>>2]|0;rb=T;c[rb>>2]=c[ua>>2];c[rb+4>>2]=sb;zb=wa}if((zb&128|0)==0){wb=0;break g}Pd(T);wb=0;break g;break};case 9:{wa=c[j+16>>2]|0;c[J>>2]=wa;if((c[f+12>>2]&128|0)==0){Ab=wa}else{Od(J);Ab=c[J>>2]|0}wa=Ab>>31&4;if((wa|0)!=0){wb=wa;break g}wa=T;c[wa>>2]=Ab;c[wa+4>>2]=((Ab|0)<0)<<31>>31;wb=0;break g;break};case 17:{wa=f+12|0;sb=c[wa>>2]|0;rb=j+16|0;if((sb&524288|0)==0){ua=c[rb>>2]|0;c[G>>2]=ua;if((sb&128|0)==0){Bb=sb;Cb=ua}else{Od(G);Bb=c[wa>>2]|0;Cb=c[G>>2]|0}if((Bb&2048|0)==0){ua=f+628|0;xa=mb[c[f+640>>2]&63](c[ua>>2]|0,Cb,0,0)|0;if(!((xa|0)==(Cb|0)&(F|0)==0)){wb=3;break g}if((fb[c[f+632>>2]&31](c[ua>>2]|0,K,8)|0)!=8){wb=3;break g}}else{if(Cb>>>0>4294967287){wb=3;break g}if((Cb+8|0)>>>0>(c[f+616>>2]|0)>>>0){wb=3;break g}qe(K,(c[f+612>>2]|0)+Cb|0,8)}Db=c[wa>>2]|0}else{wa=rb;rb=c[wa+4>>2]|0;ua=K;c[ua>>2]=c[wa>>2];c[ua+4>>2]=rb;Db=sb}if((Db&128|0)!=0){Pd(K)}sb=K;rb=c[sb>>2]|0;ua=c[sb+4>>2]|0;if(!((ua|0)>-1|(ua|0)==-1&rb>>>0>4294967295)){wb=4;break g}sb=T;c[sb>>2]=rb;c[sb+4>>2]=ua;wb=0;break g;break};case 1:{ua=T;c[ua>>2]=d[j+16|0]|0;c[ua+4>>2]=0;wb=0;break g;break};case 6:{ua=a[j+16|0]|0;if(!(ua<<24>>24>-1)){wb=4;break g}sb=ua<<24>>24;ua=T;c[ua>>2]=sb;c[ua+4>>2]=((sb|0)<0)<<31>>31;wb=0;break g;break};case 3:{sb=c[f+12>>2]|0;ua=b[j+16>>1]|0;b[n>>1]=ua;if((sb&128|0)==0){Eb=ua}else{Nd(n);Eb=b[n>>1]|0}ua=T;c[ua>>2]=Eb&65535;c[ua+4>>2]=0;wb=0;break g;break};case 4:{ua=c[j+16>>2]|0;c[I>>2]=ua;if((c[f+12>>2]&128|0)==0){Fb=ua}else{Od(I);Fb=c[I>>2]|0}ua=T;c[ua>>2]=Fb;c[ua+4>>2]=0;wb=0;break g;break};default:{wb=2;break g}}}else{wb=1}}while(0);if((wb|0)==0){Aa=e[j>>1]|0;va=T;ua=c[va+4>>2]|0;sb=n;c[sb>>2]=c[va>>2];c[sb+4>>2]=ua;if((Ib(f,Aa,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=wb;Ca=758}break};case 11:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4835,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4836,13768)}Aa=j+8|0;h:do{if((c[Aa>>2]|0)==1&(c[Aa+4>>2]|0)==0){switch(e[j+2>>1]|0){case 1:{h[V>>3]=+(d[j+16|0]|0);Gb=0;break h;break};case 6:{h[V>>3]=+(a[j+16|0]|0);Gb=0;break h;break};case 8:{ua=c[f+12>>2]|0;sb=b[j+16>>1]|0;b[B>>1]=sb;if((ua&128|0)==0){Hb=sb}else{Nd(B);Hb=b[B>>1]|0}h[V>>3]=+(Hb<<16>>16);Gb=0;break h;break};case 4:{sb=c[j+16>>2]|0;c[C>>2]=sb;if((c[f+12>>2]&128|0)==0){Jb=sb}else{Od(C);Jb=c[C>>2]|0}h[V>>3]=+(Jb>>>0);Gb=0;break h;break};case 3:{sb=c[f+12>>2]|0;ua=b[j+16>>1]|0;b[n>>1]=ua;if((sb&128|0)==0){Kb=ua}else{Nd(n);Kb=b[n>>1]|0}h[V>>3]=+(Kb&65535);Gb=0;break h;break};case 16:{ua=f+12|0;sb=c[ua>>2]|0;va=j+16|0;if((sb&524288|0)==0){rb=c[va>>2]|0;c[z>>2]=rb;if((sb&128|0)==0){Lb=sb;Mb=rb}else{Od(z);Lb=c[ua>>2]|0;Mb=c[z>>2]|0}if((Lb&2048|0)==0){rb=f+628|0;wa=mb[c[f+640>>2]&63](c[rb>>2]|0,Mb,0,0)|0;if(!((wa|0)==(Mb|0)&(F|0)==0)){Gb=3;break h}if((fb[c[f+632>>2]&31](c[rb>>2]|0,E,8)|0)!=8){Gb=3;break h}}else{if(Mb>>>0>4294967287){Gb=3;break h}if((Mb+8|0)>>>0>(c[f+616>>2]|0)>>>0){Gb=3;break h}qe(E,(c[f+612>>2]|0)+Mb|0,8)}Nb=c[ua>>2]|0}else{ua=va;va=c[ua+4>>2]|0;rb=E;c[rb>>2]=c[ua>>2];c[rb+4>>2]=va;Nb=sb}if((Nb&128|0)!=0){Pd(E)}sb=E;h[V>>3]=+((c[sb>>2]|0)>>>0)+4294967296.0*+((c[sb+4>>2]|0)>>>0);Gb=0;break h;break};case 9:{sb=c[j+16>>2]|0;c[D>>2]=sb;if((c[f+12>>2]&128|0)==0){Ob=sb}else{Od(D);Ob=c[D>>2]|0}h[V>>3]=+(Ob|0);Gb=0;break h;break};case 17:{sb=f+12|0;va=c[sb>>2]|0;rb=j+16|0;if((va&524288|0)==0){ua=c[rb>>2]|0;c[y>>2]=ua;if((va&128|0)==0){Pb=va;Qb=ua}else{Od(y);Pb=c[sb>>2]|0;Qb=c[y>>2]|0}if((Pb&2048|0)==0){ua=f+628|0;wa=mb[c[f+640>>2]&63](c[ua>>2]|0,Qb,0,0)|0;if(!((wa|0)==(Qb|0)&(F|0)==0)){Gb=3;break h}if((fb[c[f+632>>2]&31](c[ua>>2]|0,G,8)|0)!=8){Gb=3;break h}}else{if(Qb>>>0>4294967287){Gb=3;break h}if((Qb+8|0)>>>0>(c[f+616>>2]|0)>>>0){Gb=3;break h}qe(G,(c[f+612>>2]|0)+Qb|0,8)}Rb=c[sb>>2]|0}else{sb=rb;rb=c[sb+4>>2]|0;ua=G;c[ua>>2]=c[sb>>2];c[ua+4>>2]=rb;Rb=va}if((Rb&128|0)!=0){Pd(G)}va=G;h[V>>3]=+((c[va>>2]|0)>>>0)+4294967296.0*+(c[va+4>>2]|0);Gb=0;break h;break};case 5:{Gb=qc(f,j,V)|0;break h;break};case 10:{Gb=rc(f,j,V)|0;break h;break};case 11:{va=c[f+12>>2]|0;Sb=+g[j+16>>2];g[H>>2]=Sb;if((va&128|0)==0){Tb=Sb}else{Od(H);Tb=+g[H>>2]}h[V>>3]=Tb;Gb=0;break h;break};case 12:{va=f+12|0;rb=c[va>>2]|0;ua=j+16|0;if((rb&524288|0)==0){sb=c[ua>>2]|0;c[A>>2]=sb;if((rb&128|0)==0){Ub=rb;Vb=sb}else{Od(A);Ub=c[va>>2]|0;Vb=c[A>>2]|0}if((Ub&2048|0)==0){sb=f+628|0;wa=mb[c[f+640>>2]&63](c[sb>>2]|0,Vb,0,0)|0;if(!((wa|0)==(Vb|0)&(F|0)==0)){Gb=3;break h}if((fb[c[f+632>>2]&31](c[sb>>2]|0,V,8)|0)!=8){Gb=3;break h}}else{if(Vb>>>0>4294967287){Gb=3;break h}if((Vb+8|0)>>>0>(c[f+616>>2]|0)>>>0){Gb=3;break h}qe(V,(c[f+612>>2]|0)+Vb|0,8)}Wb=c[va>>2]|0}else{va=ua;c[k>>2]=c[va>>2];c[k+4>>2]=c[va+4>>2];h[V>>3]=+h[k>>3];Wb=rb}if((Wb&128|0)==0){Gb=0;break h}Pd(V);Gb=0;break h;break};default:{Gb=2;break h}}}else{Gb=1}}while(0);if((Gb|0)==0){Aa=e[j>>1]|0;h[k>>3]=+h[V>>3];c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];if((Ib(f,Aa,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=Gb;Ca=758}break};case 12:{if((b[ta+4>>1]|0)!=1){za(14120,12584,4848,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4849,13768)}Aa=j+8|0;if((c[Aa>>2]|0)==1&(c[Aa+4>>2]|0)==0){Aa=e[j+2>>1]|0;if((Aa|0)==13|(Aa|0)==4){rb=c[j+16>>2]|0;c[x>>2]=rb;if((c[f+12>>2]&128|0)==0){Xb=rb}else{Od(x);Xb=c[x>>2]|0}rb=W;c[rb>>2]=Xb;c[rb+4>>2]=0}else if((Aa|0)==18|(Aa|0)==16){Aa=f+12|0;rb=c[Aa>>2]|0;va=j+16|0;if((rb&524288|0)==0){ua=c[va>>2]|0;c[w>>2]=ua;if((rb&128|0)==0){Yb=rb;Zb=ua}else{Od(w);Yb=c[Aa>>2]|0;Zb=c[w>>2]|0}if((Yb&2048|0)==0){ua=f+628|0;sb=mb[c[f+640>>2]&63](c[ua>>2]|0,Zb,0,0)|0;if(!((sb|0)==(Zb|0)&(F|0)==0)){Ra=3;Ca=758;break b}if((fb[c[f+632>>2]&31](c[ua>>2]|0,W,8)|0)!=8){Ra=3;Ca=758;break b}}else{if(Zb>>>0>4294967287){Ra=3;Ca=758;break b}if((Zb+8|0)>>>0>(c[f+616>>2]|0)>>>0){Ra=3;Ca=758;break b}qe(W,(c[f+612>>2]|0)+Zb|0,8)}_b=c[Aa>>2]|0}else{Aa=va;va=c[Aa+4>>2]|0;ua=W;c[ua>>2]=c[Aa>>2];c[ua+4>>2]=va;_b=rb}if((_b&128|0)!=0){Pd(W)}}else{Ra=2;Ca=758;break b}rb=e[j>>1]|0;va=W;ua=c[va+4>>2]|0;Aa=n;c[Aa>>2]=c[va>>2];c[Aa+4>>2]=ua;if((Ib(f,rb,n)|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=1;Ca=758}break};case 14:{if((b[ta+4>>1]|0)!=2){za(14144,12584,4861,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4862,13768)}rb=j+8|0;ua=c[rb>>2]|0;if(!((ua|0)==2&(c[rb+4>>2]|0)==0)){rb=c[f+628>>2]|0;c[n>>2]=c[ta+28>>2];c[n+4>>2]=ua;ue(rb,13768,14168,n);Qa=0;i=m;return Qa|0}rb=ic(f,j,X)|0;if((rb|0)==0){ua=e[j>>1]|0;Aa=c[X>>2]|0;va=e[Aa+2>>1]|0;c[n>>2]=e[Aa>>1]|0;c[n+4>>2]=va;va=Ib(f,ua,n)|0;ne(Aa);if((va|0)==0){Qa=0;i=m;return Qa|0}else{Ca=756}}else{Ra=rb;Ca=758}break};case 16:{rb=b[ta+4>>1]|0;if(!(rb<<16>>16>0)){za(14224,12584,4883,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4884,13768)}va=j+8|0;Aa=c[va>>2]|0;ua=rb<<16>>16;if(!((Aa|0)==(ua|0)&(c[va+4>>2]|0)==(((ua|0)<0)<<31>>31|0))){ua=c[f+628>>2]|0;c[n>>2]=c[ta+28>>2];c[n+4>>2]=rb<<16>>16;c[n+8>>2]=Aa;ue(ua,13768,14248,n);Qa=0;i=m;return Qa|0}ua=mc(f,j,Y)|0;if((ua|0)==0){Aa=e[j>>1]|0;rb=c[Y>>2]|0;c[n>>2]=rb;va=Ib(f,Aa,n)|0;if((rb|0)!=0){ne(rb)}if((va|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=ua;Ca=758}break};case 18:{ua=b[ta+4>>1]|0;if(!(ua<<16>>16>0)){za(14224,12584,4909,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4910,13768)}va=j+8|0;rb=ua<<16>>16;if((c[va>>2]|0)==(rb|0)&(c[va+4>>2]|0)==(((rb|0)<0)<<31>>31|0)){rb=ic(f,j,Z)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[Z>>2]|0;c[n>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ca=756}break};case 20:{rb=b[ta+4>>1]|0;if(!(rb<<16>>16>0)){za(14224,12584,4931,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4932,13768)}Aa=j+8|0;ua=rb<<16>>16;if((c[Aa>>2]|0)==(ua|0)&(c[Aa+4>>2]|0)==(((ua|0)<0)<<31>>31|0)){ua=nc(f,j,_)|0;if((ua|0)==0){Aa=e[j>>1]|0;rb=c[_>>2]|0;c[n>>2]=rb;va=Ib(f,Aa,n)|0;if((rb|0)!=0){ne(rb)}if((va|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=ua;Ca=758}}else{Ca=756}break};case 24:{ua=b[ta+4>>1]|0;if(!(ua<<16>>16>0)){za(14224,12584,4953,13768)}if((a[ta+27|0]|0)!=0){za(13904,12584,4954,13768)}va=j+8|0;rb=ua<<16>>16;if((c[va>>2]|0)==(rb|0)&(c[va+4>>2]|0)==(((rb|0)<0)<<31>>31|0)){rb=oc(f,j,$)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[$>>2]|0;c[n>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ca=756}break};case 27:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,4975,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,4976,13768)}rb=j+8|0;Aa=rb;ua=c[Aa+4>>2]|0;if(!(ua>>>0>0|(ua|0)==0&(c[Aa>>2]|0)>>>0>65535)){Aa=mc(f,j,aa)|0;if((Aa|0)==0){ua=e[j>>1]|0;va=c[aa>>2]|0;c[n>>2]=c[rb>>2]&65535;c[n+4>>2]=va;rb=Ib(f,ua,n)|0;if((va|0)!=0){ne(va)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=Aa;Ca=758}}else{Ra=1;Ca=758}break};case 28:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,4997,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,4998,13768)}Aa=j+8|0;rb=Aa;va=c[rb+4>>2]|0;if(!(va>>>0>0|(va|0)==0&(c[rb>>2]|0)>>>0>65535)){rb=mc(f,j,ba)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[ba>>2]|0;c[n>>2]=c[Aa>>2]&65535;c[n+4>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ra=1;Ca=758}break};case 30:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5019,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5020,13768)}rb=j+8|0;Aa=rb;ua=c[Aa+4>>2]|0;if(!(ua>>>0>0|(ua|0)==0&(c[Aa>>2]|0)>>>0>65535)){Aa=ic(f,j,ca)|0;if((Aa|0)==0){ua=e[j>>1]|0;va=c[ca>>2]|0;c[n>>2]=c[rb>>2]&65535;c[n+4>>2]=va;rb=Ib(f,ua,n)|0;if((va|0)!=0){ne(va)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=Aa;Ca=758}}else{Ra=1;Ca=758}break};case 32:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5041,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5042,13768)}Aa=j+8|0;rb=Aa;va=c[rb+4>>2]|0;if(!(va>>>0>0|(va|0)==0&(c[rb>>2]|0)>>>0>65535)){rb=nc(f,j,da)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[da>>2]|0;c[n>>2]=c[Aa>>2]&65535;c[n+4>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ra=1;Ca=758}break};case 34:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5063,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5064,13768)}rb=j+8|0;Aa=rb;ua=c[Aa+4>>2]|0;if(!(ua>>>0>0|(ua|0)==0&(c[Aa>>2]|0)>>>0>65535)){Aa=kc(f,j,ea)|0;if((Aa|0)==0){ua=e[j>>1]|0;va=c[ea>>2]|0;c[n>>2]=c[rb>>2]&65535;c[n+4>>2]=va;rb=Ib(f,ua,n)|0;if((va|0)!=0){ne(va)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=Aa;Ca=758}}else{Ra=1;Ca=758}break};case 36:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5085,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5086,13768)}Aa=j+8|0;rb=Aa;va=c[rb+4>>2]|0;if(!(va>>>0>0|(va|0)==0&(c[rb>>2]|0)>>>0>65535)){rb=oc(f,j,fa)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[fa>>2]|0;c[n>>2]=c[Aa>>2]&65535;c[n+4>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ra=1;Ca=758}break};case 37:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5107,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5108,13768)}rb=j+8|0;Aa=rb;ua=c[Aa+4>>2]|0;if(!(ua>>>0>0|(ua|0)==0&(c[Aa>>2]|0)>>>0>65535)){Aa=gc(f,j,ga)|0;if((Aa|0)==0){ua=e[j>>1]|0;va=c[ga>>2]|0;c[n>>2]=c[rb>>2]&65535;c[n+4>>2]=va;rb=Ib(f,ua,n)|0;if((va|0)!=0){ne(va)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=Aa;Ca=758}}else{Ra=1;Ca=758}break};case 38:{if(!((b[ta+4>>1]|0)==-1)){za(14304,12584,5129,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5130,13768)}Aa=j+8|0;rb=Aa;va=c[rb+4>>2]|0;if(!(va>>>0>0|(va|0)==0&(c[rb>>2]|0)>>>0>65535)){rb=pc(f,j,ha)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[ha>>2]|0;c[n>>2]=c[Aa>>2]&65535;c[n+4>>2]=ua;Aa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}}else{Ra=1;Ca=758}break};case 39:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5151,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5152,13768)}rb=mc(f,j,ia)|0;if((rb|0)==0){Aa=e[j>>1]|0;ua=c[ia>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=ua;va=Ib(f,Aa,n)|0;if((ua|0)!=0){ne(ua)}if((va|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 41:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5185,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5186,13768)}rb=j+2|0;switch(e[rb>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:case 7:{break};default:{Ra=2;Ca=758;break b}}va=lc(f,j,u,1,v)|0;if((va|0)==0){ua=c[v>>2]|0;i:do{if((ua|0)!=0){Aa=e[rb>>1]|0;if((Aa|0)==1|(Aa|0)==7){sb=c[u>>2]|0;if((sb|0)==0){$b=ua;break}else{ac=ua;bc=0}while(1){if(!((a[ac]|0)>-1)){break}wa=bc+1|0;if(wa>>>0<sb>>>0){ac=ac+1|0;bc=wa}else{$b=ua;break i}}ne(ua);Ra=4;Ca=758;break b}else if((Aa|0)==6){$b=ua;break}sb=c[u>>2]|0;wa=me(sb)|0;if((wa|0)==0){ne(ua);Ra=7;Ca=758;break b}j:do{switch(e[rb>>1]|0){case 3:{if((sb|0)==0){Ca=543}else{xa=f+12|0;Ia=ua;cc=wa;fc=0;while(1){if((c[xa>>2]&128|0)!=0){Nd(Ia)}hc=b[Ia>>1]|0;if(!((hc&65535)<128)){Ca=542;break j}a[cc]=hc;hc=fc+1|0;if(hc>>>0<(c[u>>2]|0)>>>0){Ia=Ia+2|0;cc=cc+1|0;fc=hc}else{Ca=543;break}}}break};case 4:{if((sb|0)==0){Ca=543}else{fc=f+12|0;cc=ua;Ia=wa;xa=0;while(1){if((c[fc>>2]&128|0)!=0){Od(cc)}hc=c[cc>>2]|0;if(!(hc>>>0<128)){Ca=542;break j}a[Ia]=hc;hc=xa+1|0;if(hc>>>0<(c[u>>2]|0)>>>0){cc=cc+4|0;Ia=Ia+1|0;xa=hc}else{Ca=543;break}}}break};case 8:{if((sb|0)==0){Ca=543}else{xa=f+12|0;Ia=ua;cc=wa;fc=0;while(1){if((c[xa>>2]&128|0)!=0){Nd(Ia)}hc=b[Ia>>1]|0;if(!((hc+128<<16>>16&65535)<256)){Ca=542;break j}a[cc]=hc;hc=fc+1|0;if(hc>>>0<(c[u>>2]|0)>>>0){Ia=Ia+2|0;cc=cc+1|0;fc=hc}else{Ca=543;break}}}break};case 9:{if((sb|0)==0){Ca=543}else{fc=f+12|0;cc=ua;Ia=wa;xa=0;while(1){if((c[fc>>2]&128|0)!=0){Od(cc)}hc=c[cc>>2]|0;if(!((hc+128|0)>>>0<256)){Ca=542;break j}a[Ia]=hc;hc=xa+1|0;if(hc>>>0<(c[u>>2]|0)>>>0){cc=cc+4|0;Ia=Ia+1|0;xa=hc}else{Ca=543;break}}}break};case 17:{if((sb|0)==0){Ca=543}else{xa=f+12|0;Ia=ua;cc=wa;fc=0;while(1){if((c[xa>>2]&128|0)!=0){Pd(Ia)}hc=Ia;jc=c[hc>>2]|0;tc=Oi(jc|0,c[hc+4>>2]|0,128,0)|0;hc=F;if(!(hc>>>0<0|(hc|0)==0&tc>>>0<256)){Ca=542;break j}a[cc]=jc;jc=fc+1|0;if(jc>>>0<(c[u>>2]|0)>>>0){Ia=Ia+8|0;cc=cc+1|0;fc=jc}else{Ca=543;break}}}break};case 16:{if((sb|0)==0){Ca=543}else{fc=f+12|0;cc=ua;Ia=wa;xa=0;while(1){if((c[fc>>2]&128|0)!=0){Pd(cc)}jc=cc;tc=c[jc>>2]|0;hc=c[jc+4>>2]|0;if(!(hc>>>0<0|(hc|0)==0&tc>>>0<128)){Ca=542;break j}a[Ia]=tc;tc=xa+1|0;if(tc>>>0<(c[u>>2]|0)>>>0){cc=cc+8|0;Ia=Ia+1|0;xa=tc}else{Ca=543;break}}}break};default:{Ca=543}}}while(0);if((Ca|0)==542){ne(c[v>>2]|0);ne(wa);Ra=4;Ca=758;break b}else if((Ca|0)==543){ne(c[v>>2]|0);$b=wa;break}}else{$b=0}}while(0);ua=e[j>>1]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=$b;rb=Ib(f,ua,n)|0;if(($b|0)!=0){ne($b)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=va;Ca=758}break};case 40:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5168,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5169,13768)}rb=mc(f,j,ja)|0;if((rb|0)==0){ua=e[j>>1]|0;sb=c[ja>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=sb;Aa=Ib(f,ua,n)|0;if((sb|0)!=0){ne(sb)}if((Aa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 42:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5202,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5203,13768)}rb=ic(f,j,ka)|0;if((rb|0)==0){Aa=e[j>>1]|0;sb=c[ka>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=sb;ua=Ib(f,Aa,n)|0;if((sb|0)!=0){ne(sb)}if((ua|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 43:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5219,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5220,13768)}rb=j+2|0;switch(e[rb>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{Ra=2;Ca=758;break b}}ua=lc(f,j,s,2,t)|0;if((ua|0)==0){sb=c[t>>2]|0;k:do{if((sb|0)!=0){Aa=e[rb>>1]|0;if((Aa|0)==3){xa=c[s>>2]|0;if((xa|0)==0){uc=sb;break}Ia=f+12|0;cc=sb;fc=1;while(1){if((c[Ia>>2]&128|0)!=0){Nd(cc)}if(!((b[cc>>1]|0)>-1)){break}if(!(fc>>>0<xa>>>0)){uc=sb;break k}cc=cc+2|0;fc=fc+1|0}ne(sb);Ra=4;Ca=758;break b}else if((Aa|0)!=8){fc=c[s>>2]|0;cc=me(fc<<1)|0;if((cc|0)==0){ne(sb);Ra=7;Ca=758;break b}l:do{switch(e[rb>>1]|0){case 1:{if((fc|0)==0){Ca=609}else{xa=sb;Ia=cc;wa=0;while(1){b[Ia>>1]=d[xa]|0;tc=wa+1|0;if((tc|0)==(fc|0)){Ca=609;break}else{xa=xa+1|0;Ia=Ia+2|0;wa=tc}}}break};case 6:{if((fc|0)==0){Ca=609}else{wa=sb;Ia=cc;xa=0;while(1){b[Ia>>1]=a[wa]|0;tc=xa+1|0;if((tc|0)==(fc|0)){Ca=609;break}else{wa=wa+1|0;Ia=Ia+2|0;xa=tc}}}break};case 4:{if((fc|0)==0){Ca=609}else{xa=f+12|0;Ia=sb;wa=cc;tc=1;while(1){if((c[xa>>2]&128|0)!=0){Od(Ia)}hc=c[Ia>>2]|0;if(!(hc>>>0<32768)){Ca=608;break l}b[wa>>1]=hc;if(!(tc>>>0<fc>>>0)){Ca=609;break l}Ia=Ia+4|0;wa=wa+2|0;tc=tc+1|0}}break};case 9:{if((fc|0)==0){Ca=609}else{tc=f+12|0;wa=sb;Ia=cc;xa=1;while(1){if((c[tc>>2]&128|0)!=0){Od(wa)}hc=c[wa>>2]|0;if(!((hc+32768|0)>>>0<65536)){Ca=608;break l}b[Ia>>1]=hc;if(!(xa>>>0<fc>>>0)){Ca=609;break l}wa=wa+4|0;Ia=Ia+2|0;xa=xa+1|0}}break};case 17:{if((fc|0)==0){Ca=609}else{xa=f+12|0;Ia=sb;wa=cc;tc=1;while(1){if((c[xa>>2]&128|0)!=0){Pd(Ia)}hc=Ia;jc=c[hc>>2]|0;vc=Oi(jc|0,c[hc+4>>2]|0,32768,0)|0;hc=F;if(!(hc>>>0<0|(hc|0)==0&vc>>>0<65536)){Ca=608;break l}b[wa>>1]=jc;if(!(tc>>>0<fc>>>0)){Ca=609;break l}Ia=Ia+8|0;wa=wa+2|0;tc=tc+1|0}}break};case 16:{if((fc|0)==0){Ca=609}else{tc=f+12|0;wa=sb;Ia=cc;xa=1;while(1){if((c[tc>>2]&128|0)!=0){Pd(wa)}jc=wa;vc=c[jc>>2]|0;hc=c[jc+4>>2]|0;if(!(hc>>>0<0|(hc|0)==0&vc>>>0<32768)){Ca=608;break l}b[Ia>>1]=vc;if(!(xa>>>0<fc>>>0)){Ca=609;break l}wa=wa+8|0;Ia=Ia+2|0;xa=xa+1|0}}break};default:{Ca=609}}}while(0);if((Ca|0)==608){ne(sb);ne(cc);Ra=4;Ca=758;break b}else if((Ca|0)==609){ne(sb);uc=cc;break}}else{if((c[f+12>>2]&128|0)==0){uc=sb;break}Qd(sb,c[s>>2]|0);uc=sb;break}}else{uc=0}}while(0);sb=e[j>>1]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=uc;rb=Ib(f,sb,n)|0;if((uc|0)!=0){ne(uc)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=ua;Ca=758}break};case 44:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5236,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5237,13768)}rb=nc(f,j,la)|0;if((rb|0)==0){sb=e[j>>1]|0;va=c[la>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=va;fc=Ib(f,sb,n)|0;if((va|0)!=0){ne(va)}if((fc|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 45:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5253,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5254,13768)}rb=j+2|0;switch(e[rb>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{Ra=2;Ca=758;break b}}fc=lc(f,j,q,4,r)|0;if((fc|0)==0){va=c[r>>2]|0;m:do{if((va|0)!=0){sb=e[rb>>1]|0;if((sb|0)==4){Aa=c[q>>2]|0;if((Aa|0)==0){wc=va;break}xa=f+12|0;Ia=va;wa=1;while(1){if((c[xa>>2]&128|0)!=0){Od(Ia)}xc=c[Ia>>2]>>31&4;if((xc|0)!=0){break}if(!(wa>>>0<Aa>>>0)){wc=va;break m}Ia=Ia+4|0;wa=wa+1|0}ne(va);Ra=xc;Ca=758;break b}else if((sb|0)!=9){wa=c[q>>2]|0;Ia=me(wa<<2)|0;if((Ia|0)==0){ne(va);Ra=7;Ca=758;break b}n:do{switch(e[rb>>1]|0){case 6:{if((wa|0)==0){Ca=665}else{Aa=va;xa=Ia;cc=0;while(1){c[xa>>2]=a[Aa]|0;tc=cc+1|0;if(tc>>>0<(c[q>>2]|0)>>>0){Aa=Aa+1|0;xa=xa+4|0;cc=tc}else{Ca=665;break}}}break};case 3:{if((wa|0)==0){Ca=665}else{cc=f+12|0;xa=va;Aa=Ia;tc=0;while(1){if((c[cc>>2]&128|0)!=0){Nd(xa)}c[Aa>>2]=e[xa>>1]|0;vc=tc+1|0;if(vc>>>0<(c[q>>2]|0)>>>0){xa=xa+2|0;Aa=Aa+4|0;tc=vc}else{Ca=665;break}}}break};case 1:{if((wa|0)==0){Ca=665}else{tc=va;Aa=Ia;xa=0;while(1){c[Aa>>2]=d[tc]|0;cc=xa+1|0;if(cc>>>0<(c[q>>2]|0)>>>0){tc=tc+1|0;Aa=Aa+4|0;xa=cc}else{Ca=665;break}}}break};case 16:{if((wa|0)==0){Ca=665}else{xa=f+12|0;Aa=va;tc=Ia;cc=0;while(1){if((c[xa>>2]&128|0)!=0){Pd(Aa)}vc=Aa;hc=c[vc>>2]|0;jc=c[vc+4>>2]|0;if(!(jc>>>0<0|(jc|0)==0&hc>>>0<2147483648)){Ca=664;break n}c[tc>>2]=hc;hc=cc+1|0;if(hc>>>0<(c[q>>2]|0)>>>0){Aa=Aa+8|0;tc=tc+4|0;cc=hc}else{Ca=665;break}}}break};case 8:{if((wa|0)==0){Ca=665}else{cc=f+12|0;tc=va;Aa=Ia;xa=0;while(1){if((c[cc>>2]&128|0)!=0){Nd(tc)}c[Aa>>2]=b[tc>>1]|0;hc=xa+1|0;if(hc>>>0<(c[q>>2]|0)>>>0){tc=tc+2|0;Aa=Aa+4|0;xa=hc}else{Ca=665;break}}}break};case 17:{if((wa|0)!=0){if((c[f+12>>2]&128|0)==0){Ca=664}else{Pd(va);Ca=664}}else{Ca=665}break};default:{Ca=665}}}while(0);if((Ca|0)==664){ne(va);ne(Ia);Ra=4;Ca=758;break b}else if((Ca|0)==665){ne(va);wc=Ia;break}}else{if((c[f+12>>2]&128|0)==0){wc=va;break}Sd(va,c[q>>2]|0);wc=va;break}}else{wc=0}}while(0);va=e[j>>1]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=wc;rb=Ib(f,va,n)|0;if((wc|0)!=0){ne(wc)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=fc;Ca=758}break};case 46:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5270,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5271,13768)}rb=kc(f,j,ma)|0;if((rb|0)==0){va=e[j>>1]|0;ua=c[ma>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=ua;wa=Ib(f,va,n)|0;if((ua|0)!=0){ne(ua)}if((wa|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 47:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5287,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5288,13768)}rb=j+2|0;switch(e[rb>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{Ra=2;Ca=758;break b}}wa=lc(f,j,o,8,p)|0;if((wa|0)==0){ua=c[p>>2]|0;o:do{if((ua|0)!=0){va=e[rb>>1]|0;if((va|0)==16){sb=c[o>>2]|0;if((sb|0)==0){yc=ua;break}xa=f+12|0;Aa=ua;tc=1;while(1){if((c[xa>>2]&128|0)!=0){Pd(Aa)}cc=Aa;hc=c[cc+4>>2]|0;if(!((hc|0)>-1|(hc|0)==-1&(c[cc>>2]|0)>>>0>4294967295)){break}if(!(tc>>>0<sb>>>0)){yc=ua;break o}Aa=Aa+8|0;tc=tc+1|0}ne(ua);Ra=4;Ca=758;break b}else if((va|0)==17){if((c[f+12>>2]&128|0)==0){yc=ua;break}Td(ua,c[o>>2]|0);yc=ua;break}else{tc=c[o>>2]|0;Aa=me(tc<<3)|0;if((Aa|0)==0){ne(ua);Ra=7;Ca=758;break b}p:do{switch(e[rb>>1]|0){case 1:{if((tc|0)!=0){sb=ua;xa=Aa;Ia=0;while(1){cc=xa;c[cc>>2]=d[sb]|0;c[cc+4>>2]=0;Ia=Ia+1|0;if((Ia|0)==(tc|0)){break}else{sb=sb+1|0;xa=xa+8|0}}}break};case 3:{if((tc|0)!=0){xa=f+12|0;sb=ua;Ia=Aa;cc=1;while(1){if((c[xa>>2]&128|0)!=0){Nd(sb)}hc=Ia;c[hc>>2]=e[sb>>1]|0;c[hc+4>>2]=0;if(!(cc>>>0<tc>>>0)){break p}sb=sb+2|0;Ia=Ia+8|0;cc=cc+1|0}}break};case 6:{if((tc|0)!=0){cc=ua;Ia=Aa;sb=0;while(1){xa=a[cc]|0;hc=Ia;c[hc>>2]=xa;c[hc+4>>2]=((xa|0)<0)<<31>>31;sb=sb+1|0;if((sb|0)==(tc|0)){break}else{cc=cc+1|0;Ia=Ia+8|0}}}break};case 8:{if((tc|0)!=0){Ia=f+12|0;cc=ua;sb=Aa;xa=1;while(1){if((c[Ia>>2]&128|0)!=0){Nd(cc)}hc=b[cc>>1]|0;jc=sb;c[jc>>2]=hc;c[jc+4>>2]=((hc|0)<0)<<31>>31;if(!(xa>>>0<tc>>>0)){break p}cc=cc+2|0;sb=sb+8|0;xa=xa+1|0}}break};case 4:{if((tc|0)!=0){xa=f+12|0;sb=ua;cc=Aa;Ia=1;while(1){if((c[xa>>2]&128|0)!=0){Od(sb)}hc=cc;c[hc>>2]=c[sb>>2];c[hc+4>>2]=0;if(!(Ia>>>0<tc>>>0)){break p}sb=sb+4|0;cc=cc+8|0;Ia=Ia+1|0}}break};case 9:{if((tc|0)!=0){Ia=f+12|0;cc=ua;sb=Aa;xa=1;while(1){if((c[Ia>>2]&128|0)!=0){Od(cc)}hc=c[cc>>2]|0;jc=sb;c[jc>>2]=hc;c[jc+4>>2]=((hc|0)<0)<<31>>31;if(!(xa>>>0<tc>>>0)){break p}cc=cc+4|0;sb=sb+8|0;xa=xa+1|0}}break};default:{}}}while(0);ne(ua);yc=Aa;break}}else{yc=0}}while(0);ua=e[j>>1]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=yc;rb=Ib(f,ua,n)|0;if((yc|0)!=0){ne(yc)}if((rb|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=wa;Ca=758}break};case 48:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5304,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5305,13768)}rb=oc(f,j,na)|0;if((rb|0)==0){ua=e[j>>1]|0;fc=c[na>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=fc;tc=Ib(f,ua,n)|0;if((fc|0)!=0){ne(fc)}if((tc|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 49:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5321,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5322,13768)}rb=gc(f,j,oa)|0;if((rb|0)==0){tc=e[j>>1]|0;fc=c[oa>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=fc;ua=Ib(f,tc,n)|0;if((fc|0)!=0){ne(fc)}if((ua|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 50:{if(!((b[ta+4>>1]|0)==-3)){za(14368,12584,5338,13768)}if((a[ta+27|0]|0)!=1){za(14344,12584,5339,13768)}rb=pc(f,j,pa)|0;if((rb|0)==0){ua=e[j>>1]|0;fc=c[pa>>2]|0;c[n>>2]=c[j+8>>2];c[n+4>>2]=fc;tc=Ib(f,ua,n)|0;if((fc|0)!=0){ne(fc)}if((tc|0)==0){Qa=0;i=m;return Qa|0}else{Ca=757}}else{Ra=rb;Ca=758}break};case 0:{Ca=756;break};default:{za(14408,12584,5353,13768)}}}while(0);if((Ca|0)==756){Qa=1;i=m;return Qa|0}else if((Ca|0)==757){Qa=1;i=m;return Qa|0}else if((Ca|0)==758){if((ta|0)==0){zc=12808}else{zc=c[ta+28>>2]|0}ec(f,Ra,13768,zc,l);Qa=0;i=m;return Qa|0}}}while(0);l=c[f+628>>2]|0;c[n>>2]=ra&65535;sc(l,13768,13792,n);Qa=0;i=m;return Qa|0}function dc(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;j=i;i=i+48|0;k=j+28|0;l=j+24|0;m=j+32|0;n=j+20|0;o=j+16|0;p=j+8|0;q=j;r=g+8|0;if(!((c[r>>2]|0)==1&(c[r+4>>2]|0)==0)){s=1;i=j;return s|0}switch(e[g+2>>1]|0|0){case 1:{b[h>>1]=d[g+16|0]|0;s=0;i=j;return s|0};case 6:{r=a[g+16|0]|0;if(!(r<<24>>24>-1)){s=4;i=j;return s|0}b[h>>1]=r<<24>>24;s=0;i=j;return s|0};case 16:{r=f+12|0;t=c[r>>2]|0;u=g+16|0;if((t&524288|0)==0){v=c[u>>2]|0;c[k>>2]=v;if((t&128|0)==0){w=t;x=v}else{Od(k);w=c[r>>2]|0;x=c[k>>2]|0}do{if((w&2048|0)==0){k=f+628|0;v=mb[c[f+640>>2]&63](c[k>>2]|0,x,0,0)|0;if(!((v|0)==(x|0)&(F|0)==0)){s=3;i=j;return s|0}if((fb[c[f+632>>2]&31](c[k>>2]|0,p,8)|0)!=8){s=3;i=j;return s|0}}else{if(x>>>0>4294967287){s=3;i=j;return s|0}if((x+8|0)>>>0>(c[f+616>>2]|0)>>>0){s=3;i=j;return s|0}else{qe(p,(c[f+612>>2]|0)+x|0,8);break}}}while(0);y=c[r>>2]|0}else{r=u;u=c[r+4>>2]|0;x=p;c[x>>2]=c[r>>2];c[x+4>>2]=u;y=t}if((y&128|0)!=0){Pd(p)}y=p;p=c[y>>2]|0;t=c[y+4>>2]|0;if(!(t>>>0<0|(t|0)==0&p>>>0<65536)){s=4;i=j;return s|0}b[h>>1]=p;s=0;i=j;return s|0};case 8:{p=c[f+12>>2]|0;t=b[g+16>>1]|0;b[m>>1]=t;if((p&128|0)==0){z=t}else{Nd(m);z=b[m>>1]|0}if(!(z<<16>>16>-1)){s=4;i=j;return s|0}b[h>>1]=z;s=0;i=j;return s|0};case 17:{z=f+12|0;m=c[z>>2]|0;t=g+16|0;if((m&524288|0)==0){p=c[t>>2]|0;c[l>>2]=p;if((m&128|0)==0){A=m;B=p}else{Od(l);A=c[z>>2]|0;B=c[l>>2]|0}do{if((A&2048|0)==0){l=f+628|0;p=mb[c[f+640>>2]&63](c[l>>2]|0,B,0,0)|0;if(!((p|0)==(B|0)&(F|0)==0)){s=3;i=j;return s|0}if((fb[c[f+632>>2]&31](c[l>>2]|0,q,8)|0)!=8){s=3;i=j;return s|0}}else{if(B>>>0>4294967287){s=3;i=j;return s|0}if((B+8|0)>>>0>(c[f+616>>2]|0)>>>0){s=3;i=j;return s|0}else{qe(q,(c[f+612>>2]|0)+B|0,8);break}}}while(0);C=c[z>>2]|0}else{z=t;t=c[z+4>>2]|0;B=q;c[B>>2]=c[z>>2];c[B+4>>2]=t;C=m}if((C&128|0)!=0){Pd(q)}C=q;q=c[C>>2]|0;m=c[C+4>>2]|0;if(!(m>>>0<0|(m|0)==0&q>>>0<65536)){s=4;i=j;return s|0}b[h>>1]=q;s=0;i=j;return s|0};case 3:{q=c[f+12>>2]|0;b[h>>1]=b[g+16>>1]|0;if((q&128|0)==0){s=0;i=j;return s|0}Nd(h);s=0;i=j;return s|0};case 9:{q=c[g+16>>2]|0;c[o>>2]=q;if((c[f+12>>2]&128|0)==0){D=q}else{Od(o);D=c[o>>2]|0}if(!(D>>>0<65536)){s=4;i=j;return s|0}b[h>>1]=D;s=0;i=j;return s|0};case 4:{D=c[g+16>>2]|0;c[n>>2]=D;if((c[f+12>>2]&128|0)==0){E=D}else{Od(n);E=c[n>>2]|0}if(!(E>>>0<65536)){s=4;i=j;return s|0}b[h>>1]=E;s=0;i=j;return s|0};default:{s=2;i=j;return s|0}}return 0}function ec(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;i=i+16|0;h=g;if((f|0)==0){switch(b|0){case 1:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15104,h);i=g;return};case 2:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15136,h);i=g;return};case 6:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15288,h);i=g;return};case 3:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15168,h);i=g;return};case 7:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15336,h);i=g;return};case 5:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15232,h);i=g;return};case 4:{f=c[a+628>>2]|0;c[h>>2]=e;sc(f,d,15200,h);i=g;return};default:{za(14408,12584,3371,15368)}}}else{switch(b|0){case 1:{b=c[a+628>>2]|0;c[h>>2]=e;sc(b,d,15400,h);i=g;return};case 5:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15568,h);i=g;return};case 7:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15688,h);i=g;return};case 4:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15528,h);i=g;return};case 2:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15440,h);i=g;return};case 6:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15632,h);i=g;return};case 3:{b=c[a+628>>2]|0;c[h>>2]=e;ue(b,d,15480,h);i=g;return};default:{za(14408,12584,3412,15368)}}}}function fc(a){a=a|0;return 1}function gc(f,j,k){f=f|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0.0;l=i;i=i+16|0;m=l+4|0;n=l;o=j+2|0;switch(e[o>>1]|0){case 12:case 11:case 10:case 5:case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{p=2;i=l;return p|0}}q=lc(f,j,m,8,n)|0;if((q|0)==0?(j=c[n>>2]|0,(j|0)!=0):0){if((b[o>>1]|0)==12){if((c[f+12>>2]&128|0)!=0){Td(j,c[m>>2]|0)}c[k>>2]=j;p=0;i=l;return p|0}n=me(c[m>>2]<<3)|0;if((n|0)==0){ne(j);p=7;i=l;return p|0}a:do{switch(e[o>>1]|0){case 11:{if((c[f+12>>2]&128|0)!=0){Sd(j,c[m>>2]|0)}r=c[m>>2]|0;if((r|0)!=0){s=j;t=n;u=0;while(1){h[t>>3]=+g[s>>2];u=u+1|0;if(!(u>>>0<r>>>0)){break}else{s=s+4|0;t=t+8|0}}}break};case 3:{t=c[m>>2]|0;if((t|0)!=0){s=f+12|0;r=j;u=n;v=1;while(1){if((c[s>>2]&128|0)!=0){Nd(r)}h[u>>3]=+(e[r>>1]|0);if(!(v>>>0<t>>>0)){break a}r=r+2|0;u=u+8|0;v=v+1|0}}break};case 1:{v=c[m>>2]|0;if((v|0)!=0){u=j;r=n;t=0;while(1){h[r>>3]=+(d[u]|0);t=t+1|0;if(!(t>>>0<v>>>0)){break}else{u=u+1|0;r=r+8|0}}}break};case 10:{if((c[m>>2]|0)!=0){r=f+12|0;u=j;v=n;t=1;while(1){s=c[r>>2]|0;if((s&128|0)==0){w=s}else{Od(u);w=c[r>>2]|0}s=c[u>>2]|0;x=u+4|0;if((w&128|0)!=0){Od(x)}y=c[x>>2]|0;if((y|0)==0){z=0.0}else{z=+(s|0)/+(y>>>0)}h[v>>3]=z;if(!(t>>>0<(c[m>>2]|0)>>>0)){break a}u=u+8|0;v=v+8|0;t=t+1|0}}break};case 9:{t=c[m>>2]|0;if((t|0)!=0){v=f+12|0;u=t;t=j;r=n;y=1;while(1){if((c[v>>2]&128|0)==0){A=u}else{Od(t);A=c[m>>2]|0}h[r>>3]=+(c[t>>2]|0);if(!(y>>>0<A>>>0)){break a}u=A;t=t+4|0;r=r+8|0;y=y+1|0}}break};case 4:{y=c[m>>2]|0;if((y|0)!=0){r=f+12|0;t=y;y=j;u=n;v=1;while(1){if((c[r>>2]&128|0)==0){B=t}else{Od(y);B=c[m>>2]|0}h[u>>3]=+((c[y>>2]|0)>>>0);if(!(v>>>0<B>>>0)){break a}t=B;y=y+4|0;u=u+8|0;v=v+1|0}}break};case 6:{v=c[m>>2]|0;if((v|0)!=0){u=j;y=n;t=0;while(1){h[y>>3]=+(a[u]|0);t=t+1|0;if(!(t>>>0<v>>>0)){break}else{u=u+1|0;y=y+8|0}}}break};case 17:{y=c[m>>2]|0;if((y|0)!=0){u=f+12|0;v=y;y=j;t=n;r=1;while(1){if((c[u>>2]&128|0)==0){C=v}else{Pd(y);C=c[m>>2]|0}s=y;h[t>>3]=+((c[s>>2]|0)>>>0)+4294967296.0*+(c[s+4>>2]|0);if(!(r>>>0<C>>>0)){break a}v=C;y=y+8|0;t=t+8|0;r=r+1|0}}break};case 16:{r=c[m>>2]|0;if((r|0)!=0){t=f+12|0;y=r;r=j;v=n;u=1;while(1){if((c[t>>2]&128|0)==0){D=y}else{Pd(r);D=c[m>>2]|0}s=r;h[v>>3]=+((c[s>>2]|0)>>>0)+4294967296.0*+((c[s+4>>2]|0)>>>0);if(!(u>>>0<D>>>0)){break a}y=D;r=r+8|0;v=v+8|0;u=u+1|0}}break};case 8:{u=c[m>>2]|0;if((u|0)!=0){v=f+12|0;r=j;y=n;t=1;while(1){if((c[v>>2]&128|0)!=0){Nd(r)}h[y>>3]=+(b[r>>1]|0);if(!(t>>>0<u>>>0)){break a}r=r+2|0;y=y+8|0;t=t+1|0}}break};case 5:{if((c[m>>2]|0)!=0){t=f+12|0;y=j;r=n;u=1;while(1){v=c[t>>2]|0;if((v&128|0)==0){E=v}else{Od(y);E=c[t>>2]|0}v=y+4|0;s=c[y>>2]|0;if((E&128|0)!=0){Od(v)}x=c[v>>2]|0;if((x|0)==0){F=0.0}else{F=+(s>>>0)/+(x>>>0)}h[r>>3]=F;if(!(u>>>0<(c[m>>2]|0)>>>0)){break a}y=y+8|0;r=r+8|0;u=u+1|0}}break};default:{}}}while(0);ne(j);c[k>>2]=n;p=0;i=l;return p|0}c[k>>2]=0;p=q;i=l;return p|0}function hc(a,b,d,f){a=a|0;b=b|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;j=kc(a,b,h)|0;if((j|0)!=0){k=_b(a,e[b>>1]|0)|0;if((k|0)==0){l=12808}else{l=c[k+28>>2]|0}ec(a,j,13656,l,0);m=0;i=g;return m|0}l=b+8|0;b=l;if((c[b>>2]|0)==(d|0)&(c[b+4>>2]|0)==0){n=c[h>>2]|0}else{b=Ae(a,d,8,13680)|0;if((b|0)==0){ne(c[h>>2]|0);m=0;i=g;return m|0}a=l;j=c[a>>2]|0;k=c[a+4>>2]|0;a=c[h>>2]|0;if(k>>>0<0|(k|0)==0&j>>>0<d>>>0){qe(b,a,j<<3);j=c[l>>2]|0;pe(b+(j<<3)|0,0,d-j<<3)}else{qe(b,a,d<<3)}ne(a);c[h>>2]=b;n=b}c[f>>2]=n;m=1;i=g;return m|0}function ic(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;i=i+16|0;k=j+4|0;l=j;m=g+2|0;switch(e[m>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{n=2;i=j;return n|0}}o=lc(f,g,k,2,l)|0;if((o|0)==0?(g=c[l>>2]|0,(g|0)!=0):0){l=e[m>>1]|0;if((l|0)==8){p=c[k>>2]|0;a:do{if((p|0)!=0){q=f+12|0;r=g;s=1;while(1){if((c[q>>2]&128|0)!=0){Nd(r)}if(!((b[r>>1]|0)>-1)){break}if(!(s>>>0<p>>>0)){break a}r=r+2|0;s=s+1|0}ne(g);n=4;i=j;return n|0}}while(0);c[h>>2]=g;n=0;i=j;return n|0}else if((l|0)!=3){l=c[k>>2]|0;p=me(l<<1)|0;if((p|0)==0){ne(g);n=7;i=j;return n|0}b:do{switch(e[m>>1]|0){case 17:{if((l|0)==0){t=54}else{s=f+12|0;r=g;q=p;u=1;while(1){if((c[s>>2]&128|0)!=0){Pd(r)}v=r;w=c[v>>2]|0;x=c[v+4>>2]|0;if(!(x>>>0<0|(x|0)==0&w>>>0<65536)){t=53;break b}b[q>>1]=w;if(!(u>>>0<l>>>0)){t=54;break b}r=r+8|0;q=q+2|0;u=u+1|0}}break};case 1:{if((l|0)==0){t=54}else{u=g;q=p;r=0;while(1){b[q>>1]=d[u]|0;s=r+1|0;if(s>>>0<l>>>0){u=u+1|0;q=q+2|0;r=s}else{t=54;break}}}break};case 6:{if((l|0)==0){t=54}else{r=g;q=p;u=0;while(1){s=a[r]|0;if(!(s<<24>>24>-1)){t=53;break b}b[q>>1]=s<<24>>24;s=u+1|0;if(s>>>0<l>>>0){r=r+1|0;q=q+2|0;u=s}else{t=54;break}}}break};case 16:{if((l|0)==0){t=54}else{u=f+12|0;q=g;r=p;s=1;while(1){if((c[u>>2]&128|0)!=0){Pd(q)}w=q;x=c[w>>2]|0;v=c[w+4>>2]|0;if(!(v>>>0<0|(v|0)==0&x>>>0<65536)){t=53;break b}b[r>>1]=x;if(!(s>>>0<l>>>0)){t=54;break b}q=q+8|0;r=r+2|0;s=s+1|0}}break};case 4:{if((l|0)==0){t=54}else{s=f+12|0;r=g;q=p;u=1;while(1){if((c[s>>2]&128|0)!=0){Od(r)}x=c[r>>2]|0;if(!(x>>>0<65536)){t=53;break b}b[q>>1]=x;if(!(u>>>0<l>>>0)){t=54;break b}r=r+4|0;q=q+2|0;u=u+1|0}}break};case 9:{if((l|0)==0){t=54}else{u=f+12|0;q=g;r=p;s=1;while(1){if((c[u>>2]&128|0)!=0){Od(q)}x=c[q>>2]|0;if(!(x>>>0<65536)){t=53;break b}b[r>>1]=x;if(!(s>>>0<l>>>0)){t=54;break b}q=q+4|0;r=r+2|0;s=s+1|0}}break};default:{t=54}}}while(0);if((t|0)==53){ne(g);ne(p);n=4;i=j;return n|0}else if((t|0)==54){ne(g);c[h>>2]=p;n=0;i=j;return n|0}}else{c[h>>2]=g;if((c[f+12>>2]&128|0)==0){n=0;i=j;return n|0}Qd(g,c[k>>2]|0);n=0;i=j;return n|0}}c[h>>2]=0;n=o;i=j;return n|0}function jc(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;g=i;i=i+16|0;h=g;j=a+176|0;k=c[j>>2]|0;if((k|0)!=0){ne(k)}k=a+168|0;l=Ae(a,c[k>>2]|0,8,14928)|0;c[j>>2]=l;if((l|0)==0){m=-1;i=g;return m|0}do{if((b[a+88>>1]|0)==1){if((c[a+12>>2]&1024|0)==0){l=Id(a)|0;n=c[k>>2]|0;if((n|0)==0){break}o=Yi(((c[a+60>>2]|0)>>>0)/((c[a+164>>2]|0)>>>0)|0|0,0,l|0,F|0)|0;l=F;p=c[j>>2]|0;q=0;do{r=p+(q<<3)|0;c[r>>2]=o;c[r+4>>2]=l;q=q+1|0}while(q>>>0<n>>>0)}else{n=be(a)|0;q=F;l=c[k>>2]|0;if((l|0)==0){break}o=c[j>>2]|0;p=0;do{r=o+(p<<3)|0;c[r>>2]=n;c[r+4>>2]=q;p=p+1|0}while(p>>>0<l>>>0)}}else{l=a+628|0;p=jb[c[a+648>>2]&31](c[l>>2]|0)|0;q=F;n=a+12|0;o=f&65535;if((c[n>>2]&524288|0)==0){s=(o*12|0)+14|0}else{s=(o*20|0)+32|0}a:do{if(f<<16>>16==0){t=s;u=0}else{o=s;r=0;v=d;w=f;while(1){x=v+2|0;y=Yb(e[x>>1]|0)|0;if((y|0)==0){break}z=v+8|0;A=Yi(c[z>>2]|0,c[z+4>>2]|0,y|0,0)|0;y=F;z=(c[n>>2]&524288|0)==0?y>>>0<0|(y|0)==0&A>>>0<5:y>>>0<0|(y|0)==0&A>>>0<9;B=Oi((z?0:A)|0,(z?0:y)|0,o|0,r|0)|0;y=F;z=w+ -1<<16>>16;if(z<<16>>16==0){t=B;u=y;break a}else{o=B;r=y;v=v+24|0;w=z}}w=c[l>>2]|0;c[h>>2]=e[x>>1]|0;sc(w,14904,14960,h);m=-1;i=g;return m|0}}while(0);l=Ii(p|0,q|0,t|0,u|0)|0;n=F;if((b[a+126>>1]|0)==2){w=Zi(l|0,n|0,e[a+98>>1]|0,0)|0;C=w;D=F}else{C=l;D=n}n=c[k>>2]|0;l=c[j>>2]|0;if((n|0)==0){E=-1}else{w=n>>>0>1;v=0;do{r=l+(v<<3)|0;c[r>>2]=C;c[r+4>>2]=D;v=v+1|0}while(v>>>0<n>>>0);E=w?n+ -1|0:0}v=(c[a+172>>2]|0)+(E<<3)|0;r=c[v>>2]|0;o=c[v+4>>2]|0;v=l+(E<<3)|0;z=v;y=Oi(c[z>>2]|0,c[z+4>>2]|0,r|0,o|0)|0;z=F;if(z>>>0>q>>>0|(z|0)==(q|0)&y>>>0>p>>>0){y=Ii(p|0,q|0,r|0,o|0)|0;o=v;c[o>>2]=y;c[o+4>>2]=F}}}while(0);E=a+40|0;D=c[E>>2]|0;c[E>>2]=D|16777216;if((D&131072|0)!=0){m=1;i=g;return m|0}c[a+100>>2]=c[a+60>>2];m=1;i=g;return m|0}function kc(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;i=i+16|0;k=j+4|0;l=j;m=g+2|0;switch(e[m>>1]|0|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{n=2;i=j;return n|0}}o=lc(f,g,k,8,l)|0;if((o|0)==0?(g=c[l>>2]|0,(g|0)!=0):0){l=e[m>>1]|0;if((l|0)==17){p=c[k>>2]|0;a:do{if((p|0)!=0){q=f+12|0;r=g;s=1;while(1){if((c[q>>2]&128|0)!=0){Pd(r)}t=r;u=c[t+4>>2]|0;if(!((u|0)>-1|(u|0)==-1&(c[t>>2]|0)>>>0>4294967295)){break}if(!(s>>>0<p>>>0)){break a}r=r+8|0;s=s+1|0}ne(g);n=4;i=j;return n|0}}while(0);c[h>>2]=g;n=0;i=j;return n|0}else if((l|0)!=16){l=c[k>>2]|0;p=me(l<<3)|0;if((p|0)==0){ne(g);n=7;i=j;return n|0}b:do{switch(e[m>>1]|0|0){case 9:{if((l|0)==0){v=52}else{s=f+12|0;r=g;q=p;t=1;while(1){if((c[s>>2]&128|0)!=0){Od(r)}u=c[r>>2]|0;w=u>>31&4;if((w|0)!=0){x=w;v=51;break b}w=q;c[w>>2]=u;c[w+4>>2]=((u|0)<0)<<31>>31;if(!(t>>>0<l>>>0)){v=52;break b}r=r+4|0;q=q+8|0;t=t+1|0}}break};case 4:{if((l|0)==0){v=52}else{t=f+12|0;q=g;r=p;s=1;while(1){if((c[t>>2]&128|0)!=0){Od(q)}u=r;c[u>>2]=c[q>>2];c[u+4>>2]=0;if(!(s>>>0<l>>>0)){v=52;break b}q=q+4|0;r=r+8|0;s=s+1|0}}break};case 3:{if((l|0)==0){v=52}else{s=f+12|0;r=g;q=p;t=1;while(1){if((c[s>>2]&128|0)!=0){Nd(r)}u=q;c[u>>2]=e[r>>1]|0;c[u+4>>2]=0;if(!(t>>>0<l>>>0)){v=52;break b}r=r+2|0;q=q+8|0;t=t+1|0}}break};case 8:{if((l|0)==0){v=52}else{t=f+12|0;q=g;r=p;s=1;while(1){if((c[t>>2]&128|0)!=0){Nd(q)}u=b[q>>1]|0;if(!(u<<16>>16>-1)){x=4;v=51;break b}w=u<<16>>16;u=r;c[u>>2]=w;c[u+4>>2]=((w|0)<0)<<31>>31;if(!(s>>>0<l>>>0)){v=52;break b}q=q+2|0;r=r+8|0;s=s+1|0}}break};case 6:{if((l|0)==0){v=52}else{s=g;r=p;q=0;while(1){t=a[s]|0;if(!(t<<24>>24>-1)){x=4;v=51;break b}w=t<<24>>24;t=r;c[t>>2]=w;c[t+4>>2]=((w|0)<0)<<31>>31;w=q+1|0;if(w>>>0<l>>>0){s=s+1|0;r=r+8|0;q=w}else{v=52;break}}}break};case 1:{if((l|0)==0){v=52}else{q=g;r=p;s=0;while(1){w=r;c[w>>2]=d[q]|0;c[w+4>>2]=0;w=s+1|0;if(w>>>0<l>>>0){q=q+1|0;r=r+8|0;s=w}else{v=52;break}}}break};default:{v=52}}}while(0);if((v|0)==51){ne(g);ne(p);n=x;i=j;return n|0}else if((v|0)==52){ne(g);c[h>>2]=p;n=0;i=j;return n|0}}else{c[h>>2]=g;if((c[f+12>>2]&128|0)==0){n=0;i=j;return n|0}Td(g,c[k>>2]|0);n=0;i=j;return n|0}}c[h>>2]=0;n=o;i=j;return n|0}function lc(a,b,d,f,g){a=a|0;b=b|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;h=i;i=i+16|0;j=h+8|0;k=h;l=Yb(e[b+2>>1]|0)|0;m=b+8|0;n=c[m>>2]|0;o=c[m+4>>2]|0;if((n|0)==0&(o|0)==0|(l|0)==0){c[g>>2]=0;p=0;i=h;return p|0}m=2147483647/(l|0)|0;q=((m|0)<0)<<31>>31;if(q>>>0<o>>>0|(q|0)==(o|0)&m>>>0<n>>>0){p=6;i=h;return p|0}if(0<o>>>0|0==(o|0)&(2147483647/(f>>>0)|0)>>>0<n>>>0){p=6;i=h;return p|0}c[d>>2]=n;d=ba(n,l)|0;if((d|0)<=0){za(13696,12584,790,13720)}f=Ae(a,n,l,13744)|0;if((f|0)==0){p=7;i=h;return p|0}l=a+12|0;n=c[l>>2]|0;do{if((n&524288|0)==0){o=b+16|0;if(d>>>0<5){qe(f,o,d);break}m=c[o>>2]|0;c[j>>2]=m;if((n&128|0)==0){r=m}else{Od(j);r=c[j>>2]|0}if((c[l>>2]&2048|0)==0){m=a+628|0;o=mb[c[a+640>>2]&63](c[m>>2]|0,r,0,0)|0;if((o|0)==(r|0)&(F|0)==0?(fb[c[a+632>>2]&31](c[m>>2]|0,f,d)|0)==(d|0):0){break}}else{m=r+d|0;if(!(m>>>0<r>>>0|m>>>0<d>>>0)?!(m>>>0>(c[a+616>>2]|0)>>>0):0){qe(f,(c[a+612>>2]|0)+r|0,d);break}}ne(f);p=3;i=h;return p|0}else{if(d>>>0<9){qe(f,b+16|0,d);break}m=b+16|0;o=c[m>>2]|0;q=c[m+4>>2]|0;m=k;c[m>>2]=o;c[m+4>>2]=q;if((n&128|0)==0){s=o;t=q}else{Pd(k);q=k;s=c[q>>2]|0;t=c[q+4>>2]|0}if((c[l>>2]&2048|0)==0){q=a+628|0;o=mb[c[a+640>>2]&63](c[q>>2]|0,s,t,0)|0;if((o|0)==(s|0)&(F|0)==(t|0)?(fb[c[a+632>>2]&31](c[q>>2]|0,f,d)|0)==(d|0):0){break}}else{q=s+d|0;if(!((s|0)!=(s|0)|0!=(t|0)|q>>>0<s>>>0|q>>>0<d>>>0)?!(q>>>0>(c[a+616>>2]|0)>>>0):0){qe(f,(c[a+612>>2]|0)+s|0,d);break}}ne(f);p=3;i=h;return p|0}}while(0);c[g>>2]=f;p=0;i=h;return p|0}function mc(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;h=i;i=i+16|0;j=h+4|0;k=h;l=f+2|0;switch(e[l>>1]|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:case 7:case 2:{break};default:{m=2;i=h;return m|0}}n=lc(d,f,j,1,k)|0;if((n|0)==0?(f=c[k>>2]|0,(f|0)!=0):0){o=e[l>>1]|0;if((o|0)==6){p=c[j>>2]|0;a:do{if((p|0)!=0){q=f;r=0;while(1){if(!((a[q]|0)>-1)){break}r=r+1|0;if(!(r>>>0<p>>>0)){break a}else{q=q+1|0}}ne(f);m=4;i=h;return m|0}}while(0);c[g>>2]=f;m=0;i=h;return m|0}else if(!((o|0)==1|(o|0)==7|(o|0)==2)){o=c[j>>2]|0;p=me(o)|0;if((p|0)==0){ne(f);m=7;i=h;return m|0}b:do{switch(e[l>>1]|0){case 4:{if((o|0)==0){s=52}else{q=d+12|0;r=f;t=p;u=0;while(1){if((c[q>>2]&128|0)!=0){Od(r)}v=c[r>>2]|0;if(!(v>>>0<256)){s=51;break b}a[t]=v;v=u+1|0;if(v>>>0<(c[j>>2]|0)>>>0){r=r+4|0;t=t+1|0;u=v}else{s=52;break}}}break};case 16:{if((o|0)==0){s=52}else{u=d+12|0;t=f;r=p;q=0;while(1){if((c[u>>2]&128|0)!=0){Pd(t)}v=t;w=c[v>>2]|0;x=c[v+4>>2]|0;if(!(x>>>0<0|(x|0)==0&w>>>0<256)){s=51;break b}a[r]=w;w=q+1|0;if(w>>>0<(c[j>>2]|0)>>>0){t=t+8|0;r=r+1|0;q=w}else{s=52;break}}}break};case 9:{if((o|0)==0){s=52}else{q=d+12|0;r=f;t=p;u=0;while(1){if((c[q>>2]&128|0)!=0){Od(r)}w=c[r>>2]|0;if(!(w>>>0<256)){s=51;break b}a[t]=w;w=u+1|0;if(w>>>0<(c[j>>2]|0)>>>0){r=r+4|0;t=t+1|0;u=w}else{s=52;break}}}break};case 8:{if((o|0)==0){s=52}else{u=d+12|0;t=f;r=p;q=0;while(1){if((c[u>>2]&128|0)!=0){Nd(t)}w=b[t>>1]|0;if(!((w&65535)<256)){s=51;break b}a[r]=w;w=q+1|0;if(w>>>0<(c[j>>2]|0)>>>0){t=t+2|0;r=r+1|0;q=w}else{s=52;break}}}break};case 17:{if((o|0)==0){s=52}else{q=d+12|0;r=f;t=p;u=0;while(1){if((c[q>>2]&128|0)!=0){Pd(r)}w=r;x=c[w>>2]|0;v=c[w+4>>2]|0;if(!(v>>>0<0|(v|0)==0&x>>>0<256)){s=51;break b}a[t]=x;x=u+1|0;if(x>>>0<(c[j>>2]|0)>>>0){r=r+8|0;t=t+1|0;u=x}else{s=52;break}}}break};case 3:{if((o|0)==0){s=52}else{u=d+12|0;t=f;r=p;q=0;while(1){if((c[u>>2]&128|0)!=0){Nd(t)}x=b[t>>1]|0;if(!((x&65535)<256)){s=51;break b}a[r]=x;x=q+1|0;if(x>>>0<(c[j>>2]|0)>>>0){t=t+2|0;r=r+1|0;q=x}else{s=52;break}}}break};default:{s=52}}}while(0);if((s|0)==51){ne(c[k>>2]|0);ne(p);m=4;i=h;return m|0}else if((s|0)==52){ne(c[k>>2]|0);c[g>>2]=p;m=0;i=h;return m|0}}else{c[g>>2]=f;m=0;i=h;return m|0}}c[g>>2]=0;m=n;i=h;return m|0}function nc(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;i=i+16|0;k=j+4|0;l=j;m=g+2|0;switch(e[m>>1]|0|0){case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{n=2;i=j;return n|0}}o=lc(f,g,k,4,l)|0;if((o|0)==0?(g=c[l>>2]|0,(g|0)!=0):0){l=e[m>>1]|0;if((l|0)==9){p=c[k>>2]|0;a:do{if((p|0)!=0){q=f+12|0;r=g;s=1;while(1){if((c[q>>2]&128|0)!=0){Od(r)}t=c[r>>2]>>31&4;if((t|0)!=0){break}if(!(s>>>0<p>>>0)){break a}r=r+4|0;s=s+1|0}ne(g);n=t;i=j;return n|0}}while(0);c[h>>2]=g;n=0;i=j;return n|0}else if((l|0)!=4){l=c[k>>2]|0;t=me(l<<2)|0;if((t|0)==0){ne(g);n=7;i=j;return n|0}b:do{switch(e[m>>1]|0|0){case 17:{if((l|0)==0){u=49}else{p=f+12|0;s=g;r=t;q=0;while(1){if((c[p>>2]&128|0)!=0){Pd(s)}v=s;w=c[v>>2]|0;x=c[v+4>>2]|0;if(!(x>>>0<1|(x|0)==1&w>>>0<0)){u=48;break b}c[r>>2]=w;w=q+1|0;if(w>>>0<(c[k>>2]|0)>>>0){s=s+8|0;r=r+4|0;q=w}else{u=49;break}}}break};case 8:{if((l|0)==0){u=49}else{q=f+12|0;r=g;s=t;p=0;while(1){if((c[q>>2]&128|0)!=0){Nd(r)}w=b[r>>1]|0;if(!(w<<16>>16>-1)){u=48;break b}c[s>>2]=w<<16>>16;w=p+1|0;if(w>>>0<(c[k>>2]|0)>>>0){r=r+2|0;s=s+4|0;p=w}else{u=49;break}}}break};case 6:{if((l|0)==0){u=49}else{p=g;s=t;r=0;while(1){q=a[p]|0;if(!(q<<24>>24>-1)){u=48;break b}c[s>>2]=q<<24>>24;q=r+1|0;if(q>>>0<(c[k>>2]|0)>>>0){p=p+1|0;s=s+4|0;r=q}else{u=49;break}}}break};case 3:{if((l|0)==0){u=49}else{r=f+12|0;s=g;p=t;q=0;while(1){if((c[r>>2]&128|0)!=0){Nd(s)}c[p>>2]=e[s>>1]|0;w=q+1|0;if(w>>>0<(c[k>>2]|0)>>>0){s=s+2|0;p=p+4|0;q=w}else{u=49;break}}}break};case 16:{if((l|0)==0){u=49}else{q=f+12|0;p=g;s=t;r=0;while(1){if((c[q>>2]&128|0)!=0){Pd(p)}w=p;x=c[w>>2]|0;v=c[w+4>>2]|0;if(!(v>>>0<1|(v|0)==1&x>>>0<0)){u=48;break b}c[s>>2]=x;x=r+1|0;if(x>>>0<(c[k>>2]|0)>>>0){p=p+8|0;s=s+4|0;r=x}else{u=49;break}}}break};case 1:{if((l|0)==0){u=49}else{r=g;s=t;p=0;while(1){c[s>>2]=d[r]|0;q=p+1|0;if(q>>>0<(c[k>>2]|0)>>>0){r=r+1|0;s=s+4|0;p=q}else{u=49;break}}}break};default:{u=49}}}while(0);if((u|0)==48){ne(g);ne(t);n=4;i=j;return n|0}else if((u|0)==49){ne(g);c[h>>2]=t;n=0;i=j;return n|0}}else{c[h>>2]=g;if((c[f+12>>2]&128|0)==0){n=0;i=j;return n|0}Sd(g,c[k>>2]|0);n=0;i=j;return n|0}}c[h>>2]=0;n=o;i=j;return n|0}function oc(f,j,k){f=f|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0,E=0.0,F=0;l=i;i=i+16|0;m=l+4|0;n=l;o=j+2|0;switch(e[o>>1]|0){case 12:case 11:case 10:case 5:case 17:case 16:case 9:case 4:case 8:case 3:case 6:case 1:{break};default:{p=2;i=l;return p|0}}q=lc(f,j,m,4,n)|0;if((q|0)==0?(j=c[n>>2]|0,(j|0)!=0):0){if((b[o>>1]|0)==11){if((c[f+12>>2]&128|0)!=0){Sd(j,c[m>>2]|0)}c[k>>2]=j;p=0;i=l;return p|0}n=me(c[m>>2]<<2)|0;if((n|0)==0){ne(j);p=7;i=l;return p|0}a:do{switch(e[o>>1]|0){case 4:{r=c[m>>2]|0;if((r|0)!=0){s=f+12|0;t=r;r=j;u=n;v=1;while(1){if((c[s>>2]&128|0)==0){w=t}else{Od(r);w=c[m>>2]|0}g[u>>2]=+((c[r>>2]|0)>>>0);if(!(v>>>0<w>>>0)){break a}t=w;r=r+4|0;u=u+4|0;v=v+1|0}}break};case 9:{v=c[m>>2]|0;if((v|0)!=0){u=f+12|0;r=v;v=j;t=n;s=1;while(1){if((c[u>>2]&128|0)==0){x=r}else{Od(v);x=c[m>>2]|0}g[t>>2]=+(c[v>>2]|0);if(!(s>>>0<x>>>0)){break a}r=x;v=v+4|0;t=t+4|0;s=s+1|0}}break};case 8:{s=c[m>>2]|0;if((s|0)!=0){t=f+12|0;v=j;r=n;u=1;while(1){if((c[t>>2]&128|0)!=0){Nd(v)}g[r>>2]=+(b[v>>1]|0);if(!(u>>>0<s>>>0)){break a}v=v+2|0;r=r+4|0;u=u+1|0}}break};case 6:{u=c[m>>2]|0;if((u|0)!=0){r=j;v=n;s=0;while(1){g[v>>2]=+(a[r]|0);s=s+1|0;if(!(s>>>0<u>>>0)){break}else{r=r+1|0;v=v+4|0}}}break};case 12:{if((c[f+12>>2]&128|0)!=0){Td(j,c[m>>2]|0)}v=c[m>>2]|0;if((v|0)!=0){r=j;u=n;s=0;while(1){g[u>>2]=+h[r>>3];s=s+1|0;if(!(s>>>0<v>>>0)){break}else{r=r+8|0;u=u+4|0}}}break};case 5:{if((c[m>>2]|0)!=0){u=f+12|0;r=j;v=n;s=1;while(1){t=c[u>>2]|0;if((t&128|0)==0){y=t}else{Od(r);y=c[u>>2]|0}t=r+4|0;z=c[r>>2]|0;if((y&128|0)!=0){Od(t)}A=c[t>>2]|0;if((A|0)==0){B=0.0}else{B=+(z>>>0)/+(A>>>0)}g[v>>2]=B;if(!(s>>>0<(c[m>>2]|0)>>>0)){break a}r=r+8|0;v=v+4|0;s=s+1|0}}break};case 16:{s=c[m>>2]|0;if((s|0)!=0){v=f+12|0;r=s;s=j;u=n;A=1;while(1){if((c[v>>2]&128|0)==0){C=r}else{Pd(s);C=c[m>>2]|0}z=s;g[u>>2]=+((c[z>>2]|0)>>>0)+4294967296.0*+((c[z+4>>2]|0)>>>0);if(!(A>>>0<C>>>0)){break a}r=C;s=s+8|0;u=u+4|0;A=A+1|0}}break};case 10:{if((c[m>>2]|0)!=0){A=f+12|0;u=j;s=n;r=1;while(1){v=c[A>>2]|0;if((v&128|0)==0){D=v}else{Od(u);D=c[A>>2]|0}v=c[u>>2]|0;z=u+4|0;if((D&128|0)!=0){Od(z)}t=c[z>>2]|0;if((t|0)==0){E=0.0}else{E=+(v|0)/+(t>>>0)}g[s>>2]=E;if(!(r>>>0<(c[m>>2]|0)>>>0)){break a}u=u+8|0;s=s+4|0;r=r+1|0}}break};case 17:{r=c[m>>2]|0;if((r|0)!=0){s=f+12|0;u=r;r=j;A=n;t=1;while(1){if((c[s>>2]&128|0)==0){F=u}else{Pd(r);F=c[m>>2]|0}v=r;g[A>>2]=+((c[v>>2]|0)>>>0)+4294967296.0*+(c[v+4>>2]|0);if(!(t>>>0<F>>>0)){break a}u=F;r=r+8|0;A=A+4|0;t=t+1|0}}break};case 3:{t=c[m>>2]|0;if((t|0)!=0){A=f+12|0;r=j;u=n;s=1;while(1){if((c[A>>2]&128|0)!=0){Nd(r)}g[u>>2]=+(e[r>>1]|0);if(!(s>>>0<t>>>0)){break a}r=r+2|0;u=u+4|0;s=s+1|0}}break};case 1:{s=c[m>>2]|0;if((s|0)!=0){u=j;r=n;t=0;while(1){g[r>>2]=+(d[u]|0);t=t+1|0;if(!(t>>>0<s>>>0)){break}else{u=u+1|0;r=r+4|0}}}break};default:{}}}while(0);ne(j);c[k>>2]=n;p=0;i=l;return p|0}c[k>>2]=0;p=q;i=l;return p|0}function pc(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=i;i=i+16|0;g=f+4|0;h=f;j=b+2|0;k=e[j>>1]|0;if(!((k|0)==18|(k|0)==13|(k|0)==16|(k|0)==4)){l=2;i=f;return l|0}k=lc(a,b,g,8,h)|0;b=c[h>>2]|0;if((k|0)!=0|(b|0)==0){c[d>>2]=0;l=k;i=f;return l|0}k=e[j>>1]|0;if((k|0)==18|(k|0)==16){c[d>>2]=b;if((c[a+12>>2]&128|0)==0){l=0;i=f;return l|0}Td(b,c[g>>2]|0);l=0;i=f;return l|0}k=c[g>>2]|0;g=me(k<<3)|0;if((g|0)==0){ne(b);l=7;i=f;return l|0}h=e[j>>1]|0;a:do{if((h|0)==13|(h|0)==4?(k|0)!=0:0){j=a+12|0;m=b;n=g;o=1;while(1){if((c[j>>2]&128|0)!=0){Od(m)}p=n;c[p>>2]=c[m>>2];c[p+4>>2]=0;if(!(o>>>0<k>>>0)){break a}m=m+4|0;n=n+8|0;o=o+1|0}}}while(0);ne(b);c[d>>2]=g;l=0;i=f;return l|0}function qc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0;e=i;i=i+16|0;f=e;g=e+8|0;j=a+12|0;k=c[j>>2]|0;l=b+16|0;do{if((k&524288|0)==0){b=c[l>>2]|0;c[g>>2]=b;if((k&128|0)==0){m=b;n=k}else{Od(g);m=c[g>>2]|0;n=c[j>>2]|0}if((n&2048|0)==0){b=a+628|0;o=mb[c[a+640>>2]&63](c[b>>2]|0,m,0,0)|0;if(!((o|0)==(m|0)&(F|0)==0)){p=3;i=e;return p|0}if((fb[c[a+632>>2]&31](c[b>>2]|0,f,8)|0)==8){break}else{p=3}i=e;return p|0}if(m>>>0>4294967287){p=3;i=e;return p|0}if((m+8|0)>>>0>(c[a+616>>2]|0)>>>0){p=3;i=e;return p|0}else{qe(f,(c[a+612>>2]|0)+m|0,8);break}}else{b=l;o=c[b+4>>2]|0;q=f;c[q>>2]=c[b>>2];c[q+4>>2]=o}}while(0);if((c[j>>2]&128|0)!=0){Sd(f,2)}j=c[f>>2]|0;if((j|0)==0){r=0.0}else{r=+(j>>>0)/+((c[f+4>>2]|0)>>>0)}h[d>>3]=r;p=0;i=e;return p|0}function rc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0;e=i;i=i+16|0;f=e;g=e+8|0;j=a+12|0;k=c[j>>2]|0;l=b+16|0;do{if((k&524288|0)==0){b=c[l>>2]|0;c[g>>2]=b;if((k&128|0)==0){m=b;n=k}else{Od(g);m=c[g>>2]|0;n=c[j>>2]|0}if((n&2048|0)==0){b=a+628|0;o=mb[c[a+640>>2]&63](c[b>>2]|0,m,0,0)|0;if(!((o|0)==(m|0)&(F|0)==0)){p=3;i=e;return p|0}if((fb[c[a+632>>2]&31](c[b>>2]|0,f,8)|0)==8){break}else{p=3}i=e;return p|0}if(m>>>0>4294967287){p=3;i=e;return p|0}if((m+8|0)>>>0>(c[a+616>>2]|0)>>>0){p=3;i=e;return p|0}else{qe(f,(c[a+612>>2]|0)+m|0,8);break}}else{b=l;o=c[b+4>>2]|0;q=f;c[q>>2]=c[b>>2];c[q+4>>2]=o}}while(0);if((c[j>>2]&128|0)!=0){Sd(f,2)}j=c[f>>2]|0;if((j|0)==0){r=0.0}else{r=+(j|0)/+((c[f+4>>2]|0)>>>0)}h[d>>3]=r;p=0;i=e;return p|0}function sc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=e;e=c[5020]|0;if((e|0)!=0){kb[e&63](b,d,g)}e=c[3934]|0;if((e|0)==0){i=f;return}ob[e&3](a,b,d,g);i=f;return}function tc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;i=i+16|0;d=b;e=b+8|0;f=b+4|0;g=a+8|0;if((c[g>>2]|0)==0){h=1;i=b;return h|0}j=a+12|0;k=c[j>>2]|0;do{if((k&64|0)!=0){if((k&4096|0)!=0?(c[j>>2]=k&-4097,(jb[c[a+528>>2]&31](a)|0)==0):0){h=0;i=b;return h|0}if((we(a)|0)==0){h=0;i=b;return h|0}else{l=c[j>>2]|0;break}}else{l=k}}while(0);do{if((l&2097160|0)==2097152?(c[g>>2]|0)==2:0){c[e>>2]=0;c[f>>2]=0;if((qd(a)|0)==0){c[d>>2]=e;if((Kb(a,273,d)|0)==0){break}c[d>>2]=f;if((Kb(a,279,d)|0)==0){break}k=a+168|0;if((Ye(a,273,16,c[k>>2]|0,c[e>>2]|0)|0)==0){break}if((Ye(a,279,16,c[k>>2]|0,c[f>>2]|0)|0)==0){break}c[j>>2]=c[j>>2]&-2097217;h=1;i=b;return h|0}else{c[d>>2]=e;if((Kb(a,324,d)|0)==0){break}c[d>>2]=f;if((Kb(a,325,d)|0)==0){break}k=a+168|0;if((Ye(a,324,16,c[k>>2]|0,c[e>>2]|0)|0)==0){break}if((Ye(a,325,16,c[k>>2]|0,c[f>>2]|0)|0)==0){break}c[j>>2]=c[j>>2]&-2097217;h=1;i=b;return h|0}}}while(0);if((c[j>>2]&2097160|0)!=0?(Xe(a)|0)==0:0){h=0;i=b;return h|0}h=1;i=b;return h|0}function uc(d,f){d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+32|0;h=g;j=g+22|0;k=g+20|0;if((c[d+500>>2]|0)==0){l=f+0|0;m=15744|0;n=l+54|0;do{a[l]=a[m]|0;l=l+1|0;m=m+1|0}while((l|0)<(n|0));o=0;i=g;return o|0}m=d+84|0;l=e[m>>1]|0;switch(l|0){case 16:case 8:case 4:case 2:case 1:{break};default:{c[h>>2]=l;Ra(f|0,15800,h|0)|0;o=0;i=g;return o|0}}l=d+98|0;n=(e[l>>1]|0)-(e[d+156>>1]|0)|0;c[h>>2]=j;do{if((Kb(d,262,h)|0)==0){if((n|0)==3){b[j>>1]=2;p=2;break}else if((n|0)==1){b[j>>1]=1;p=1;break}else{c[h>>2]=15880;Ra(f|0,15856,h|0)|0;o=0;i=g;return o|0}}else{p=b[j>>1]|0}}while(0);j=p&65535;if((j|0)==2){if((n|0)>=3){o=1;i=g;return o|0}c[h>>2]=16056;c[h+4>>2]=n;Ra(f|0,16008,h|0)|0;o=0;i=g;return o|0}else if((j|0)==32844){if((b[d+88>>1]|0)==-30860){o=1;i=g;return o|0}c[h>>2]=16176;c[h+4>>2]=34676;Ra(f|0,16136,h|0)|0;o=0;i=g;return o|0}else if((j|0)==3|(j|0)==1|(j|0)==0){if((b[d+126>>1]|0)!=1){o=1;i=g;return o|0}n=b[l>>1]|0;if(n<<16>>16==1){o=1;i=g;return o|0}p=b[m>>1]|0;if(!((p&65535)<8)){o=1;i=g;return o|0}c[h>>2]=15880;c[h+4>>2]=j;c[h+8>>2]=15992;c[h+12>>2]=n&65535;c[h+16>>2]=p&65535;Ra(f|0,15912,h|0)|0;o=0;i=g;return o|0}else if((j|0)==8|(j|0)==6){o=1;i=g;return o|0}else if((j|0)==32845){if(!(((b[d+88>>1]|0)+30860<<16>>16&65535)<2)){c[h>>2]=16176;c[h+4>>2]=34676;c[h+8>>2]=34677;Ra(f|0,16192,h|0)|0;o=0;i=g;return o|0}p=b[d+126>>1]|0;if(p<<16>>16==1){o=1;i=g;return o|0}c[h>>2]=16288;c[h+4>>2]=p&65535;Ra(f|0,16240,h|0)|0;o=0;i=g;return o|0}else if((j|0)==5){c[h>>2]=k;Ce(d,332,h)|0;d=b[k>>1]|0;if(!(d<<16>>16==1)){c[h>>2]=16128;c[h+4>>2]=d&65535;Ra(f|0,16072,h|0)|0;o=0;i=g;return o|0}d=b[l>>1]|0;if(!((d&65535)<4)){o=1;i=g;return o|0}c[h>>2]=15992;c[h+4>>2]=d&65535;Ra(f|0,16072,h|0)|0;o=0;i=g;return o|0}else{c[h>>2]=15880;c[h+4>>2]=j;Ra(f|0,16312,h|0)|0;o=0;i=g;return o|0}return 0}function vc(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+56|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+60|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+64|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+68|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+72|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+76|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+80|0;e=c[d>>2]|0;if((e|0)!=0){ne(e);c[d>>2]=0}d=a+36|0;e=c[d>>2]|0;if((e|0)==0){i=b;return}ne(e);e=a+40|0;ne(c[e>>2]|0);f=a+44|0;ne(c[f>>2]|0);c[f>>2]=0;c[e>>2]=0;c[d>>2]=0;i=b;return}function wc(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0.0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0;k=i;i=i+80|0;l=k;m=k+66|0;n=k+64|0;o=k+48|0;p=k+36|0;q=k+62|0;r=k+60|0;s=k+32|0;t=k+58|0;u=k+56|0;v=k+54|0;w=k+28|0;x=k+24|0;y=k+20|0;z=k+52|0;c[d+84>>2]=0;c[d+88>>2]=0;A=d+36|0;c[A>>2]=0;B=d+40|0;c[B>>2]=0;C=d+44|0;c[C>>2]=0;b[d+30>>1]=4;c[d>>2]=f;c[d+4>>2]=h;h=d+24|0;c[l>>2]=h;Ce(f,258,l)|0;D=e[h>>1]|0;a:do{switch(D|0){case 16:case 8:case 4:case 2:case 1:{E=d+12|0;c[E>>2]=0;F=d+26|0;c[l>>2]=F;Ce(f,277,l)|0;c[l>>2]=t;c[l+4>>2]=s;Ce(f,338,l)|0;do{if((b[t>>1]|0)!=0){G=e[c[s>>2]>>1]|0;if((G|0)==2|(G|0)==1){c[E>>2]=G;break}else if((G|0)!=0){break}if((e[F>>1]|0)>3){c[E>>2]=1}}}while(0);G=d+32|0;c[l>>2]=G;if((Kb(f,262,l)|0)==0){b[G>>1]=0}H=b[t>>1]|0;I=b[F>>1]|0;if(H<<16>>16==0){if(I<<16>>16==4){if((b[G>>1]|0)==2){c[E>>2]=1;b[t>>1]=1;J=4;K=1}else{J=4;K=0}}else{J=I;K=0}}else{J=I;K=H}H=(J&65535)-(K&65535)|0;c[l>>2]=v;Ce(f,259,l)|0;c[l>>2]=u;Ce(f,284,l)|0;c[l>>2]=G;do{if((Kb(f,262,l)|0)==0){if((H|0)==1){c[l>>2]=o;Kb(f,259,l)|0;I=b[o>>1]|0;if(I<<16>>16==-32765|I<<16>>16==2|I<<16>>16==4|I<<16>>16==3){b[G>>1]=0;L=0;break}else{b[G>>1]=1;L=1;break}}else if((H|0)==3){b[G>>1]=2;L=2;break}else{c[l>>2]=15880;Ra(j|0,15856,l|0)|0;break a}}else{L=b[G>>1]|0}}while(0);I=L&65535;do{if((I|0)==1|(I|0)==0){M=29}else if((I|0)==32844){if((b[v>>1]|0)==-30860){c[l>>2]=3;Ib(f,65560,l)|0;b[G>>1]=1;b[h>>1]=8;break}else{c[l>>2]=16176;c[l+4>>2]=34676;Ra(j|0,16136,l|0)|0;break a}}else if((I|0)==2){if((H|0)<3){c[l>>2]=16056;c[l+4>>2]=H;Ra(j|0,16008,l|0)|0;break a}}else if((I|0)==6){if((b[u>>1]|0)==1?(b[v>>1]|0)==7:0){c[l>>2]=1;Ib(f,65538,l)|0;b[G>>1]=2}}else if((I|0)==32845){if(!(((b[v>>1]|0)+30860<<16>>16&65535)<2)){c[l>>2]=16176;c[l+4>>2]=34676;c[l+8>>2]=34677;Ra(j|0,16192,l|0)|0;break a}N=b[u>>1]|0;if(N<<16>>16==1){c[l>>2]=3;Ib(f,65560,l)|0;b[G>>1]=2;b[h>>1]=8;break}c[l>>2]=16288;c[l+4>>2]=N&65535;Ra(j|0,16240,l|0)|0;O=0;i=k;return O|0}else if((I|0)==3){c[l>>2]=w;c[l+4>>2]=x;c[l+8>>2]=y;if((Kb(f,320,l)|0)==0){P=j+0|0;Q=16352|0;R=P+32|0;do{a[P]=a[Q]|0;P=P+1|0;Q=Q+1|0}while((P|0)<(R|0));break a}N=2<<e[h>>1];c[A>>2]=me(N)|0;c[B>>2]=me(N)|0;S=me(N)|0;c[C>>2]=S;T=c[A>>2]|0;if((T|0)!=0?!((c[B>>2]|0)==0|(S|0)==0):0){qe(T,c[w>>2]|0,N);qe(c[B>>2]|0,c[x>>2]|0,N);qe(c[C>>2]|0,c[y>>2]|0,N);M=29;break}P=j+0|0;Q=16384|0;R=P+32|0;do{a[P]=a[Q]|0;P=P+1|0;Q=Q+1|0}while((P|0)<(R|0));break a}else if((I|0)==5){c[l>>2]=z;Ce(f,332,l)|0;N=b[z>>1]|0;if(!(N<<16>>16==1)){c[l>>2]=16128;c[l+4>>2]=N&65535;Ra(j|0,16072,l|0)|0;break a}N=b[F>>1]|0;if((N&65535)<4){c[l>>2]=15992;c[l+4>>2]=N&65535;Ra(j|0,16072,l|0)|0;break a}}else if((I|0)!=8){c[l>>2]=15880;c[l+4>>2]=I;Ra(j|0,16312,l|0)|0;break a}}while(0);if((((M|0)==29?(b[u>>1]|0)==1:0)?(I=b[F>>1]|0,H=I&65535,!(I<<16>>16==1)):0)?(I=b[h>>1]|0,(I&65535)<8):0){N=e[G>>1]|0;c[l>>2]=15880;c[l+4>>2]=N;c[l+8>>2]=15992;c[l+12>>2]=H;c[l+16>>2]=I&65535;Ra(j|0,15912,l|0)|0;break a}I=d+56|0;H=d+72|0;N=d+76|0;T=d+80|0;c[I+0>>2]=0;c[I+4>>2]=0;c[I+8>>2]=0;c[I+12>>2]=0;c[I+16>>2]=0;c[I+20>>2]=0;c[I+24>>2]=0;c[l>>2]=d+16;Kb(f,256,l)|0;c[l>>2]=d+20;Kb(f,257,l)|0;c[l>>2]=d+28;Ce(f,274,l)|0;if((b[u>>1]|0)==2){S=(e[F>>1]|0)<2;c[d+8>>2]=S&1;if(!S){S=(qd(c[d>>2]|0)|0)!=0;U=d+48|0;c[U>>2]=S?3:4;S=d+52|0;c[S>>2]=0;b:do{switch(e[G>>1]|0){case 2:case 1:case 0:{V=e[h>>1]|0;if((V|0)==8){W=c[E>>2]|0;if((W|0)==1){c[S>>2]=1;break b}else if((W|0)==2){if((c[N>>2]|0)!=0){za(16704,16648,2667,16728)}W=me(65536)|0;c[N>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16728,16688,l);break b}else{X=0;Y=W}while(1){W=0;Z=Y;while(1){a[Z]=(((ba(W,X)|0)+127|0)>>>0)/255|0;W=W+1|0;if((W&65535)<<16>>16==256){break}else{Z=Z+1|0}}X=X+1|0;if((X&65535)<<16>>16==256){break}else{Y=Y+256|0}}c[S>>2]=2;break b}else{c[S>>2]=3;break b}}else if((V|0)!=16){break b}Z=c[E>>2]|0;if((Z|0)==1){if((c[T>>2]|0)!=0){za(16616,16648,2689,16664)}W=me(65536)|0;c[T>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16664,16688,l);break b}else{_=W;$=0}while(1){a[_]=(($+128|0)>>>0)/257|0;$=$+1|0;if(($|0)==65536){break}else{_=_+1|0}}c[S>>2]=4;break b}V=(Z|0)==2;if((c[T>>2]|0)!=0){za(16616,16648,2689,16664)}W=me(65536)|0;c[T>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16664,16688,l);aa=0}else{ca=W;W=0;while(1){a[ca]=((W+128|0)>>>0)/257|0;da=W+1|0;if((da|0)==65536){aa=1;break}else{ca=ca+1|0;W=da}}}if(!V){if(!aa){break b}c[S>>2]=6;break b}if(aa){if((c[N>>2]|0)!=0){za(16704,16648,2667,16728)}W=me(65536)|0;c[N>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16728,16688,l);break b}else{ea=0;fa=W}while(1){W=0;ca=fa;while(1){a[ca]=(((ba(W,ea)|0)+127|0)>>>0)/255|0;W=W+1|0;if((W&65535)<<16>>16==256){break}else{ca=ca+1|0}}ea=ea+1|0;if((ea&65535)<<16>>16==256){break}else{fa=fa+256|0}}c[S>>2]=5}break};case 5:{if((b[h>>1]|0)==8?(b[F>>1]|0)==4:0){c[E>>2]=1;c[S>>2]=7}break};case 6:{if((((b[h>>1]|0)==8?(b[F>>1]|0)==3:0)?(Ic(d)|0)!=0:0)?(V=c[d>>2]|0,c[l>>2]=m,c[l+4>>2]=n,Ce(V,530,l)|0,(e[m>>1]<<4|e[n>>1]|0)==17):0){c[S>>2]=8}break};default:{}}}while(0);if((c[U>>2]|0)!=0?(c[S>>2]|0)!=0:0){O=1;i=k;return O|0}P=j+0|0;Q=16416|0;R=P+28|0;do{a[P]=a[Q]|0;P=P+1|0;Q=Q+1|0}while((P|0)<(R|0));break a}}else{c[d+8>>2]=1}S=(qd(c[d>>2]|0)|0)!=0;U=d+48|0;c[U>>2]=S?1:2;S=d+52|0;c[S>>2]=0;c:do{switch(e[G>>1]|0){case 5:{if((Sc(d)|0)!=0?(b[h>>1]|0)==8:0){if((c[I>>2]|0)==0){c[S>>2]=7;break c}else{c[S>>2]=8;break c}}break};case 6:{if(((b[h>>1]|0)==8?(b[F>>1]|0)==3:0)?(Ic(d)|0)!=0:0){V=c[d>>2]|0;c[l>>2]=q;c[l+4>>2]=r;Ce(V,530,l)|0;switch(e[q>>1]<<4|e[r>>1]|0){case 68:{c[S>>2]=19;break c;break};case 66:{c[S>>2]=20;break c;break};case 65:{c[S>>2]=21;break c;break};case 34:{c[S>>2]=22;break c;break};case 33:{c[S>>2]=23;break c;break};case 18:{c[S>>2]=24;break c;break};case 17:{c[S>>2]=25;break c;break};default:{break c}}}break};case 3:{if((Sc(d)|0)!=0){V=e[h>>1]|0;if((V|0)==8){c[S>>2]=9;break c}else if((V|0)==4){c[S>>2]=10;break c}else if((V|0)==2){c[S>>2]=11;break c}else if((V|0)==1){c[S>>2]=12;break c}else{break c}}break};case 8:{if((Sc(d)|0)!=0?(b[h>>1]|0)==8:0){if((c[H>>2]|0)==0?(V=me(18124)|0,c[H>>2]=V,(V|0)==0):0){sc(c[(c[d>>2]|0)+628>>2]|0,16832,16856,l);ga=0}else{V=c[d>>2]|0;c[l>>2]=o;Ce(V,318,l)|0;g[p+4>>2]=100.0;V=c[o>>2]|0;ca=V+4|0;g[p>>2]=+g[V>>2]/+g[ca>>2]*100.0;ha=+g[ca>>2];g[p+8>>2]=(1.0- +g[V>>2]-ha)/ha*100.0;if((Fe(c[H>>2]|0,16904,p)|0)<0){sc(c[(c[d>>2]|0)+628>>2]|0,16832,16992,l);ne(c[H>>2]|0);ga=0}else{ga=26}}c[S>>2]=ga}break};case 1:case 0:{if((Sc(d)|0)!=0){switch(e[h>>1]|0){case 4:{c[S>>2]=16;break c;break};case 2:{c[S>>2]=17;break c;break};case 1:{c[S>>2]=18;break c;break};case 16:{c[S>>2]=13;break c;break};case 8:{if((c[E>>2]|0)!=0?(b[F>>1]|0)==2:0){c[S>>2]=14;break c}c[S>>2]=15;break c;break};default:{break c}}}break};case 2:{V=e[h>>1]|0;if((V|0)==8){ca=c[E>>2]|0;if((ca|0)==2){if((c[N>>2]|0)!=0){za(16704,16648,2667,16728)}W=me(65536)|0;c[N>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16728,16688,l);break c}else{ia=0;ja=W}while(1){W=0;Z=ja;while(1){a[Z]=(((ba(W,ia)|0)+127|0)>>>0)/255|0;W=W+1|0;if((W&65535)<<16>>16==256){break}else{Z=Z+1|0}}ia=ia+1|0;if((ia&65535)<<16>>16==256){break}else{ja=ja+256|0}}c[S>>2]=2;break c}else if((ca|0)==1){c[S>>2]=1;break c}else{c[S>>2]=3;break c}}else if((V|0)!=16){break c}Z=c[E>>2]|0;if((Z|0)==1){if((c[T>>2]|0)!=0){za(16616,16648,2689,16664)}W=me(65536)|0;c[T>>2]=W;if((W|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16664,16688,l);break c}else{ka=W;la=0}while(1){a[ka]=((la+128|0)>>>0)/257|0;la=la+1|0;if((la|0)==65536){break}else{ka=ka+1|0}}c[S>>2]=4;break c}V=(Z|0)==2;if((c[T>>2]|0)!=0){za(16616,16648,2689,16664)}ca=me(65536)|0;c[T>>2]=ca;if((ca|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16664,16688,l);ma=0}else{W=ca;ca=0;while(1){a[W]=((ca+128|0)>>>0)/257|0;da=ca+1|0;if((da|0)==65536){ma=1;break}else{W=W+1|0;ca=da}}}if(!V){if(!ma){break c}c[S>>2]=6;break c}if(ma){if((c[N>>2]|0)!=0){za(16704,16648,2667,16728)}ca=me(65536)|0;c[N>>2]=ca;if((ca|0)==0){sc(c[(c[d>>2]|0)+628>>2]|0,16728,16688,l);break c}else{na=0;oa=ca}while(1){ca=0;W=oa;while(1){a[W]=(((ba(ca,na)|0)+127|0)>>>0)/255|0;ca=ca+1|0;if((ca&65535)<<16>>16==256){break}else{W=W+1|0}}na=na+1|0;if((na&65535)<<16>>16==256){break}else{oa=oa+256|0}}c[S>>2]=5}break};default:{}}}while(0);if((c[U>>2]|0)!=0?(c[S>>2]|0)!=0:0){O=1;i=k;return O|0}P=j+0|0;Q=16416|0;R=P+28|0;do{a[P]=a[Q]|0;P=P+1|0;Q=Q+1|0}while((P|0)<(R|0));break};default:{c[l>>2]=D;Ra(j|0,15800,l|0)|0}}}while(0);ne(c[A>>2]|0);ne(c[B>>2]|0);ne(c[C>>2]|0);c[C>>2]=0;c[B>>2]=0;c[A>>2]=0;O=0;i=k;return O|0}function xc(a,d,e,f,g,h){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=i;i=i+1120|0;k=j;l=j+96|0;m=j+4|0;Li(l|0,0,1024)|0;if((uc(a,l)|0)!=0?(wc(m,a,h,l)|0)!=0:0){b[m+30>>1]=g;g=c[m+20>>2]|0;h=f+((ba(e-g|0,d)|0)<<2)|0;e=c[m+48>>2]|0;do{if((e|0)!=0){if((c[m+52>>2]|0)==0){f=c[m>>2]|0;n=c[f+628>>2]|0;sc(n,pd(f)|0,16472,k);o=0;break}else{o=mb[e&63](m,h,d,g)|0;break}}else{f=c[m>>2]|0;n=c[f+628>>2]|0;sc(n,pd(f)|0,16448,k);o=0}}while(0);vc(m);p=o;i=j;return p|0}o=c[a+628>>2]|0;m=pd(a)|0;c[k>>2]=l;sc(o,m,16536,k);p=0;i=j;return p|0}function yc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=xc(a,b,c,d,4,e)|0;i=f;return g|0}function zc(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;h=i;i=i+16|0;j=h;k=h+8|0;l=h+4|0;m=c[a>>2]|0;n=c[a+52>>2]|0;o=c[a+12>>2]|0;p=ce(m)|0;if((p|0)!=0?(q=(o|0)!=0,o=ba(q?4:3,p)|0,(o|0)!=0):0){r=me(o)|0;if((r|0)==0){s=c[m+628>>2]|0;t=pd(m)|0;c[j>>2]=16784;sc(s,t,16536,j);u=0;i=h;return u|0}pe(r,0,o);o=r+p|0;t=p<<1;s=r+t|0;if(q){v=r+(t+p)|0}else{v=0}c[j>>2]=k;Kb(m,322,j)|0;c[j>>2]=l;Kb(m,323,j)|0;a:do{switch(e[a+28>>1]|0){case 7:case 3:{switch(b[a+30>>1]|0){case 6:case 2:{w=1;x=21;break a;break};case 5:case 1:{w=3;x=21;break a;break};case 8:case 4:{y=2;x=22;break a;break};default:{y=0;x=22;break a}}break};case 6:case 2:{switch(b[a+30>>1]|0){case 8:case 4:{w=3;x=21;break a;break};case 7:case 3:{w=1;x=21;break a;break};case 5:case 1:{y=2;x=22;break a;break};default:{y=0;x=22;break a}}break};case 5:case 1:{switch(b[a+30>>1]|0){case 7:case 3:{w=3;x=21;break a;break};case 6:case 2:{y=2;x=22;break a;break};case 8:case 4:{w=1;x=21;break a;break};default:{y=0;x=22;break a}}break};case 8:case 4:{switch(b[a+30>>1]|0){case 5:case 1:{w=1;x=21;break a;break};case 6:case 2:{w=3;x=21;break a;break};case 7:case 3:{y=2;x=22;break a;break};default:{y=0;x=22;break a}}break};default:{y=0;x=22}}}while(0);if((x|0)==21){z=w;A=1;B=0-((c[k>>2]|0)+f)|0;C=g+ -1|0}else if((x|0)==22){z=y;A=0;B=f-(c[k>>2]|0)|0;C=0}y=e[a+32>>1]|0;if((y|0)==3|(y|0)==1|(y|0)==0){D=1;E=r;F=r}else{D=3;E=o;F=s}s=(g|0)==0;b:do{if(s){G=1}else{o=a+84|0;y=a+4|0;x=(f|0)==0;w=a+88|0;p=(D|0)==1;t=D&65535;H=1;I=0;J=C;while(1){K=c[l>>2]|0;L=c[o>>2]|0;M=K-(((L+I|0)>>>0)%(K>>>0)|0)|0;K=(M+I|0)>>>0>g>>>0?g-I|0:M;c:do{if(x){N=H}else{M=ba(J,f)|0;O=L;P=0;while(1){if((wd(m,r,(c[w>>2]|0)+P|0,O+I|0,0,0)|0)==-1?(c[y>>2]|0)!=0:0){N=0;break c}if(!p){if((wd(m,E,(c[w>>2]|0)+P|0,(c[o>>2]|0)+I|0,0,1)|0)==-1?(c[y>>2]|0)!=0:0){N=0;break c}if((wd(m,F,(c[w>>2]|0)+P|0,(c[o>>2]|0)+I|0,0,2)|0)==-1?(c[y>>2]|0)!=0:0){N=0;break c}}if((q?(wd(m,v,(c[w>>2]|0)+P|0,(c[o>>2]|0)+I|0,0,t)|0)==-1:0)?(c[y>>2]|0)!=0:0){N=0;break c}Q=(((c[o>>2]|0)+I|0)>>>0)%((c[l>>2]|0)>>>0)|0;R=ba($d(m)|0,Q)|0;Q=c[k>>2]|0;if((Q+P|0)>>>0>f>>>0){S=f-P|0;T=Q-S|0;if(q){U=v+R|0}else{U=0}ib[n&15](a,d+(P+M<<2)|0,P,J,S,K,T,T+B|0,r+R|0,E+R|0,F+R|0,U)}else{if(q){V=v+R|0}else{V=0}ib[n&15](a,d+(P+M<<2)|0,P,J,Q,K,0,B,r+R|0,E+R|0,F+R|0,V)}R=(c[k>>2]|0)+P|0;if(!(R>>>0<f>>>0)){N=H;break c}O=c[o>>2]|0;P=R}}}while(0);L=K+I|0;if(!(L>>>0<g>>>0)){G=N;break b}H=N;I=L;J=(A?0-K|0:K)+J|0}}}while(0);if(!((z&2|0)==0|s)){s=f+ -1|0;z=0;do{A=ba(z,f)|0;N=s+A|0;if((A|0)<(N|0)){k=d+(A<<2)|0;A=d+(N<<2)|0;do{N=c[k>>2]|0;c[k>>2]=c[A>>2];c[A>>2]=N;k=k+4|0;A=A+ -4|0}while(k>>>0<A>>>0)}z=z+1|0}while((z|0)!=(g|0))}ne(r);u=G;i=h;return u|0}G=c[m+628>>2]|0;r=pd(m)|0;c[j>>2]=16816;sc(G,r,16744,j);u=0;i=h;return u|0}function Ac(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;i=i+16|0;j=h;k=h+4|0;l=c[a>>2]|0;m=c[a+52>>2]|0;n=c[a+16>>2]|0;o=c[a+12>>2]|0;p=Kd(l)|0;if((p|0)!=0?(q=(o|0)!=0,o=ba(q?4:3,p)|0,(o|0)!=0):0){r=me(o)|0;if((r|0)==0){s=c[l+628>>2]|0;sc(s,pd(l)|0,16784,j);t=0;i=h;return t|0}pe(r,0,o);o=p<<1;if(q){u=r+(o+p)|0}else{u=0}a:do{switch(e[a+28>>1]|0){case 6:case 2:{switch(b[a+30>>1]|0){case 8:case 4:{v=3;w=21;break a;break};case 7:case 3:{v=1;w=21;break a;break};case 5:case 1:{x=2;y=0;z=0;A=0;break a;break};default:{x=0;y=0;z=0;A=0;break a}}break};case 5:case 1:{switch(b[a+30>>1]|0){case 8:case 4:{v=1;w=21;break a;break};case 7:case 3:{v=3;w=21;break a;break};case 6:case 2:{x=2;y=0;z=0;A=0;break a;break};default:{x=0;y=0;z=0;A=0;break a}}break};case 7:case 3:{switch(b[a+30>>1]|0){case 6:case 2:{v=1;w=21;break a;break};case 5:case 1:{v=3;w=21;break a;break};case 8:case 4:{x=2;y=0;z=0;A=0;break a;break};default:{x=0;y=0;z=0;A=0;break a}}break};case 8:case 4:{switch(b[a+30>>1]|0){case 5:case 1:{v=1;w=21;break a;break};case 6:case 2:{v=3;w=21;break a;break};case 7:case 3:{x=2;y=0;z=0;A=0;break a;break};default:{x=0;y=0;z=0;A=0;break a}}break};default:{x=0;y=0;z=0;A=0}}}while(0);if((w|0)==21){x=v;y=1;z=0-(f<<1)|0;A=g+ -1|0}v=e[a+32>>1]|0;if((v|0)==3|(v|0)==1|(v|0)==0){B=1;C=r;D=r}else{B=3;C=r+p|0;D=r+o|0}c[j>>2]=k;Ce(l,278,j)|0;o=Md(l)|0;p=n>>>0>f>>>0?n-f|0:0;n=a+4|0;v=(g|0)==0;b:do{if(v){E=1}else{w=a+84|0;s=(B|0)==1;F=B&65535;G=0;H=A;while(1){I=c[k>>2]|0;J=(c[w>>2]|0)+G|0;K=I-((J>>>0)%(I>>>0)|0)|0;I=(K+G|0)>>>0>g>>>0?g-G|0:K;K=Fd(l,J,0)|0;if((sd(l,K,r,ba(((((c[w>>2]|0)+G|0)>>>0)%((c[k>>2]|0)>>>0)|0)+I|0,o)|0)|0)==-1?(c[n>>2]|0)!=0:0){E=0;break b}if(!s){K=Fd(l,J,1)|0;if((sd(l,K,C,ba(((((c[w>>2]|0)+G|0)>>>0)%((c[k>>2]|0)>>>0)|0)+I|0,o)|0)|0)==-1?(c[n>>2]|0)!=0:0){E=0;break b}K=Fd(l,J,2)|0;if((sd(l,K,D,ba(((((c[w>>2]|0)+G|0)>>>0)%((c[k>>2]|0)>>>0)|0)+I|0,o)|0)|0)==-1?(c[n>>2]|0)!=0:0){E=0;break b}}if((q?(K=Fd(l,J,F)|0,(sd(l,K,u,ba(((((c[w>>2]|0)+G|0)>>>0)%((c[k>>2]|0)>>>0)|0)+I|0,o)|0)|0)==-1):0)?(c[n>>2]|0)!=0:0){E=0;break b}K=ba((((c[w>>2]|0)+G|0)>>>0)%((c[k>>2]|0)>>>0)|0,o)|0;J=d+((ba(H,f)|0)<<2)|0;if(q){L=u+K|0}else{L=0}ib[m&15](a,J,0,H,f,I,p,z,r+K|0,C+K|0,D+K|0,L);K=I+G|0;if(K>>>0<g>>>0){G=K;H=(y?0-I|0:I)+H|0}else{E=1;break}}}}while(0);if(!((x&2|0)==0|v)){v=f+ -1|0;x=0;do{y=ba(x,f)|0;L=v+y|0;if((y|0)<(L|0)){D=d+(y<<2)|0;y=d+(L<<2)|0;do{L=c[D>>2]|0;c[D>>2]=c[y>>2];c[y>>2]=L;D=D+4|0;y=y+ -4|0}while(D>>>0<y>>>0)}x=x+1|0}while((x|0)!=(g|0))}ne(r);t=E;i=h;return t|0}E=c[l+628>>2]|0;r=pd(l)|0;c[j>>2]=16768;sc(E,r,16744,j);t=0;i=h;return t|0}function Bc(a,b,e,f,g,h,j,k,l,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0;f=i;if((h|0)==0){i=f;return}e=g>>>0>7;a=m;m=n;n=l;l=b;b=o;o=h;while(1){o=o+ -1|0;if(e){h=a;p=n;q=m;r=l;s=b;t=g;while(1){c[r>>2]=(d[h]|0)<<8|(d[p]|0)|(d[q]|0)<<16|(d[s]|0)<<24;c[r+4>>2]=(d[h+1|0]|0)<<8|(d[p+1|0]|0)|(d[q+1|0]|0)<<16|(d[s+1|0]|0)<<24;c[r+8>>2]=(d[h+2|0]|0)<<8|(d[p+2|0]|0)|(d[q+2|0]|0)<<16|(d[s+2|0]|0)<<24;c[r+12>>2]=(d[h+3|0]|0)<<8|(d[p+3|0]|0)|(d[q+3|0]|0)<<16|(d[s+3|0]|0)<<24;c[r+16>>2]=(d[h+4|0]|0)<<8|(d[p+4|0]|0)|(d[q+4|0]|0)<<16|(d[s+4|0]|0)<<24;c[r+20>>2]=(d[h+5|0]|0)<<8|(d[p+5|0]|0)|(d[q+5|0]|0)<<16|(d[s+5|0]|0)<<24;c[r+24>>2]=(d[h+6|0]|0)<<8|(d[p+6|0]|0)|(d[q+6|0]|0)<<16|(d[s+6|0]|0)<<24;u=p+8|0;v=h+8|0;w=q+8|0;x=s+8|0;y=r+32|0;c[r+28>>2]=(d[h+7|0]|0)<<8|(d[p+7|0]|0)|(d[q+7|0]|0)<<16|(d[s+7|0]|0)<<24;z=t+ -8|0;if(z>>>0>7){h=v;p=u;q=w;r=y;s=x;t=z}else{A=x;B=v;C=w;D=u;E=y;F=z;break}}}else{A=b;B=a;C=m;D=n;E=l;F=g}switch(F|0){case 7:{c[E>>2]=(d[B]|0)<<8|(d[D]|0)|(d[C]|0)<<16|(d[A]|0)<<24;G=A+1|0;H=B+1|0;I=D+1|0;J=C+1|0;K=E+4|0;L=7;break};case 4:{M=A;N=B;O=D;P=E;Q=C;L=9;break};case 5:{R=A;S=B;T=D;U=E;V=C;L=8;break};case 2:{W=A;X=B;Y=D;Z=E;_=C;L=11;break};case 3:{$=A;aa=B;ba=D;ca=E;da=C;L=10;break};case 1:{ea=A;fa=B;ga=D;ha=E;ia=C;L=12;break};case 6:{G=A;H=B;I=D;J=C;K=E;L=7;break};default:{ja=A;ka=B;la=D;ma=E;na=C}}if((L|0)==7){L=0;c[K>>2]=(d[H]|0)<<8|(d[I]|0)|(d[J]|0)<<16|(d[G]|0)<<24;R=G+1|0;S=H+1|0;T=I+1|0;U=K+4|0;V=J+1|0;L=8}if((L|0)==8){L=0;c[U>>2]=(d[S]|0)<<8|(d[T]|0)|(d[V]|0)<<16|(d[R]|0)<<24;M=R+1|0;N=S+1|0;O=T+1|0;P=U+4|0;Q=V+1|0;L=9}if((L|0)==9){L=0;c[P>>2]=(d[N]|0)<<8|(d[O]|0)|(d[Q]|0)<<16|(d[M]|0)<<24;$=M+1|0;aa=N+1|0;ba=O+1|0;ca=P+4|0;da=Q+1|0;L=10}if((L|0)==10){L=0;c[ca>>2]=(d[aa]|0)<<8|(d[ba]|0)|(d[da]|0)<<16|(d[$]|0)<<24;W=$+1|0;X=aa+1|0;Y=ba+1|0;Z=ca+4|0;_=da+1|0;L=11}if((L|0)==11){L=0;c[Z>>2]=(d[X]|0)<<8|(d[Y]|0)|(d[_]|0)<<16|(d[W]|0)<<24;ea=W+1|0;fa=X+1|0;ga=Y+1|0;ha=Z+4|0;ia=_+1|0;L=12}if((L|0)==12){L=0;c[ha>>2]=(d[fa]|0)<<8|(d[ga]|0)|(d[ia]|0)<<16|(d[ea]|0)<<24;ja=ea+1|0;ka=fa+1|0;la=ga+1|0;ma=ha+4|0;na=ia+1|0}if((o|0)==0){break}else{a=ka+j|0;m=na+j|0;n=la+j|0;l=ma+(k<<2)|0;b=ja+j|0}}i=f;return}function Cc(a,b,e,f,g,h,j,k,l,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;f=i;if((h|0)==0){i=f;return}e=(g|0)==0;p=a+76|0;a=b;b=l;l=m;m=o;o=n;n=h;while(1){n=n+ -1|0;if(e){q=a;r=o;s=b;t=l;u=m}else{h=o+g|0;v=b+g|0;w=c[p>>2]|0;x=g;y=o;z=a;A=b;B=l;C=m;while(1){x=x+ -1|0;D=d[C]|0;E=D<<8;c[z>>2]=d[w+(d[A]|0|E)|0]|0|D<<24|(d[w+(d[B]|0|E)|0]|0)<<8|(d[w+(d[y]|0|E)|0]|0)<<16;if((x|0)==0){break}else{y=y+1|0;z=z+4|0;A=A+1|0;B=B+1|0;C=C+1|0}}q=a+(g<<2)|0;r=h;s=v;t=l+g|0;u=m+g|0}if((n|0)==0){break}else{a=q+(k<<2)|0;b=s+j|0;l=t+j|0;m=u+j|0;o=r+j|0}}i=f;return}function Dc(a,b,e,f,g,h,j,k,l,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0;o=i;if((h|0)==0){i=o;return}f=g>>>0>7;e=m;m=n;n=l;l=b;b=h;while(1){b=b+ -1|0;if(f){h=e;a=n;p=m;q=l;r=g;while(1){c[q>>2]=d[a]|0|(d[h]|0)<<8|(d[p]|0)<<16|-16777216;c[q+4>>2]=d[a+1|0]|0|(d[h+1|0]|0)<<8|(d[p+1|0]|0)<<16|-16777216;c[q+8>>2]=d[a+2|0]|0|(d[h+2|0]|0)<<8|(d[p+2|0]|0)<<16|-16777216;c[q+12>>2]=d[a+3|0]|0|(d[h+3|0]|0)<<8|(d[p+3|0]|0)<<16|-16777216;c[q+16>>2]=d[a+4|0]|0|(d[h+4|0]|0)<<8|(d[p+4|0]|0)<<16|-16777216;c[q+20>>2]=d[a+5|0]|0|(d[h+5|0]|0)<<8|(d[p+5|0]|0)<<16|-16777216;c[q+24>>2]=d[a+6|0]|0|(d[h+6|0]|0)<<8|(d[p+6|0]|0)<<16|-16777216;s=a+8|0;t=h+8|0;u=p+8|0;v=q+32|0;c[q+28>>2]=d[a+7|0]|0|(d[h+7|0]|0)<<8|(d[p+7|0]|0)<<16|-16777216;w=r+ -8|0;if(w>>>0>7){h=t;a=s;p=u;q=v;r=w}else{x=v;y=t;z=u;A=s;B=w;break}}}else{x=l;y=e;z=m;A=n;B=g}switch(B|0){case 3:{C=x;D=y;E=A;F=z;G=10;break};case 6:{H=x;I=y;J=A;K=z;G=7;break};case 7:{c[x>>2]=d[A]|0|(d[y]|0)<<8|(d[z]|0)<<16|-16777216;H=x+4|0;I=y+1|0;J=A+1|0;K=z+1|0;G=7;break};case 1:{L=x;M=y;N=A;O=z;G=12;break};case 5:{P=x;Q=y;R=A;S=z;G=8;break};case 4:{T=x;U=y;V=A;W=z;G=9;break};case 2:{X=x;Y=y;Z=A;_=z;G=11;break};default:{$=x;aa=y;ba=A;ca=z}}if((G|0)==7){G=0;c[H>>2]=d[J]|0|(d[I]|0)<<8|(d[K]|0)<<16|-16777216;P=H+4|0;Q=I+1|0;R=J+1|0;S=K+1|0;G=8}if((G|0)==8){G=0;c[P>>2]=d[R]|0|(d[Q]|0)<<8|(d[S]|0)<<16|-16777216;T=P+4|0;U=Q+1|0;V=R+1|0;W=S+1|0;G=9}if((G|0)==9){G=0;c[T>>2]=d[V]|0|(d[U]|0)<<8|(d[W]|0)<<16|-16777216;C=T+4|0;D=U+1|0;E=V+1|0;F=W+1|0;G=10}if((G|0)==10){G=0;c[C>>2]=d[E]|0|(d[D]|0)<<8|(d[F]|0)<<16|-16777216;X=C+4|0;Y=D+1|0;Z=E+1|0;_=F+1|0;G=11}if((G|0)==11){G=0;c[X>>2]=d[Z]|0|(d[Y]|0)<<8|(d[_]|0)<<16|-16777216;L=X+4|0;M=Y+1|0;N=Z+1|0;O=_+1|0;G=12}if((G|0)==12){G=0;c[L>>2]=d[N]|0|(d[M]|0)<<8|(d[O]|0)<<16|-16777216;$=L+4|0;aa=M+1|0;ba=N+1|0;ca=O+1|0}if((b|0)==0){break}else{e=aa+j|0;m=ca+j|0;n=ba+j|0;l=$+(k<<2)|0}}i=o;return}function Ec(a,b,f,g,h,j,k,l,m,n,o,p){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;g=i;if((j|0)==0){i=g;return}f=(h|0)==0;q=a+80|0;a=b;b=j;j=p;p=o;o=n;n=m;while(1){b=b+ -1|0;if(f){r=a;s=j;t=p;u=o;v=n}else{m=j+(h<<1)|0;w=o+(h<<1)|0;x=c[q>>2]|0;y=0;z=a;A=j;B=p;C=o;D=n;while(1){c[z>>2]=(d[x+(e[C>>1]|0)|0]|0)<<8|(d[x+(e[D>>1]|0)|0]|0)|(d[x+(e[B>>1]|0)|0]|0)<<16|(d[x+(e[A>>1]|0)|0]|0)<<24;y=y+1|0;if((y|0)==(h|0)){break}else{z=z+4|0;A=A+2|0;B=B+2|0;C=C+2|0;D=D+2|0}}r=a+(h<<2)|0;s=m;t=p+(h<<1)|0;u=w;v=n+(h<<1)|0}if((b|0)==0){break}else{a=r+(l<<2)|0;j=s+(k<<1)|0;p=t+(k<<1)|0;o=u+(k<<1)|0;n=v+(k<<1)|0}}i=g;return}function Fc(a,b,f,g,h,j,k,l,m,n,o,p){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;g=i;if((j|0)==0){i=g;return}f=(h|0)==0;q=a+80|0;r=a+76|0;a=b;b=j;j=p;p=o;o=n;n=m;while(1){b=b+ -1|0;if(f){s=a;t=j;u=p;v=o;w=n}else{m=p+(h<<1)|0;x=n+(h<<1)|0;y=c[q>>2]|0;z=c[r>>2]|0;A=h;B=a;C=j;D=p;E=o;F=n;while(1){A=A+ -1|0;G=d[y+(e[C>>1]|0)|0]|0;H=G<<8;c[B>>2]=d[z+(d[y+(e[F>>1]|0)|0]|0|H)|0]|0|G<<24|(d[z+(d[y+(e[E>>1]|0)|0]|0|H)|0]|0)<<8|(d[z+(d[y+(e[D>>1]|0)|0]|0|H)|0]|0)<<16;if((A|0)==0){break}else{B=B+4|0;C=C+2|0;D=D+2|0;E=E+2|0;F=F+2|0}}s=a+(h<<2)|0;t=j+(h<<1)|0;u=m;v=o+(h<<1)|0;w=x}if((b|0)==0){break}else{a=s+(l<<2)|0;j=t+(k<<1)|0;p=u+(k<<1)|0;o=v+(k<<1)|0;n=w+(k<<1)|0}}i=g;return}function Gc(a,b,f,g,h,j,k,l,m,n,o,p){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;p=i;if((j|0)==0){i=p;return}g=(h|0)==0;f=a+80|0;a=b;b=j;j=o;o=n;n=m;while(1){b=b+ -1|0;if(g){q=a;r=j;s=o;t=n}else{m=a+(h<<2)|0;u=o+(h<<1)|0;v=c[f>>2]|0;w=0;x=a;y=j;z=o;A=n;while(1){c[x>>2]=d[v+(e[A>>1]|0)|0]|0|(d[v+(e[z>>1]|0)|0]|0)<<8|(d[v+(e[y>>1]|0)|0]|0)<<16|-16777216;w=w+1|0;if((w|0)==(h|0)){break}else{x=x+4|0;y=y+2|0;z=z+2|0;A=A+2|0}}q=m;r=j+(h<<1)|0;s=u;t=n+(h<<1)|0}if((b|0)==0){break}else{a=q+(l<<2)|0;j=r+(k<<1)|0;o=s+(k<<1)|0;n=t+(k<<1)|0}}i=p;return}function Hc(a,b,e,f,g,h,j,k,l,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;f=i;if((h|0)==0){i=f;return}e=(g|0)==0;a=b;b=l;l=o;o=n;n=m;m=h;while(1){m=m+ -1|0;if(e){p=a;q=n;r=b;s=l;t=o}else{h=o+g|0;u=b+g|0;v=g;w=n;x=a;y=b;z=l;A=o;while(1){v=v+ -1|0;B=(d[z]|0)^255;C=((ba((d[y]|0)^255,B)|0)>>>0)/255|0;D=((ba((d[w]|0)^255,B)|0)>>>0)/255|0;c[x>>2]=C|D<<8|(((ba((d[A]|0)^255,B)|0)>>>0)/255|0)<<16|-16777216;if((v|0)==0){break}else{w=w+1|0;x=x+4|0;y=y+1|0;z=z+1|0;A=A+1|0}}p=a+(g<<2)|0;q=n+g|0;r=u;s=l+g|0;t=h}if((m|0)==0){break}else{a=p+(k<<2)|0;b=r+j|0;l=s+j|0;o=t+j|0;n=q+j|0}}i=f;return}function Ic(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;i=i+16|0;d=b;e=b+8|0;f=b+4|0;g=a+68|0;if((c[g>>2]|0)==0?(h=me(6168)|0,c[g>>2]=h,(h|0)==0):0){sc(c[(c[a>>2]|0)+628>>2]|0,16544,16568,d);j=0;i=b;return j|0}h=c[a>>2]|0;c[d>>2]=e;Ce(h,529,d)|0;h=c[a>>2]|0;c[d>>2]=f;Ce(h,532,d)|0;j=(He(c[g>>2]|0,c[e>>2]|0,c[f>>2]|0)|0)>>>31^1;i=b;return j|0}function Jc(a,b,e,f,g,h,j,k,l,m,n,o){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0;o=i;i=i+16|0;f=o+8|0;e=o+4|0;p=o;if((h|0)==0){i=o;return}q=a+68|0;a=n;n=b;b=m;m=l;l=h;while(1){h=g;r=n;s=a;t=b;u=m;while(1){Ge(c[q>>2]|0,d[u]|0,d[t]|0,d[s]|0,f,e,p);c[r>>2]=c[f>>2]|c[e>>2]<<8|c[p>>2]<<16|-16777216;h=h+ -1|0;if((h|0)==0){break}else{r=r+4|0;s=s+1|0;t=t+1|0;u=u+1|0}}l=l+ -1|0;if((l|0)==0){break}else{a=a+(g+j)|0;n=n+(g+k<<2)|0;b=b+(g+j)|0;m=m+(g+j)|0}}i=o;return}function Kc(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;i=i+16|0;j=h;k=h+8|0;l=h+4|0;m=c[a>>2]|0;n=c[a+52>>2]|0;o=me(ce(m)|0)|0;if((o|0)==0){p=c[m+628>>2]|0;q=pd(m)|0;c[j>>2]=16784;sc(p,q,16536,j);r=0;i=h;return r|0}pe(o,0,ce(m)|0);c[j>>2]=k;Kb(m,322,j)|0;c[j>>2]=l;Kb(m,323,j)|0;a:do{switch(e[a+28>>1]|0){case 7:case 3:{switch(b[a+30>>1]|0){case 6:case 2:{s=1;t=16;break a;break};case 8:case 4:{u=2;t=17;break a;break};case 5:case 1:{s=3;t=16;break a;break};default:{u=0;t=17;break a}}break};case 8:case 4:{switch(b[a+30>>1]|0){case 6:case 2:{s=3;t=16;break a;break};case 7:case 3:{u=2;t=17;break a;break};case 5:case 1:{s=1;t=16;break a;break};default:{u=0;t=17;break a}}break};case 6:case 2:{switch(b[a+30>>1]|0){case 5:case 1:{u=2;t=17;break a;break};case 8:case 4:{s=3;t=16;break a;break};case 7:case 3:{s=1;t=16;break a;break};default:{u=0;t=17;break a}}break};case 5:case 1:{switch(b[a+30>>1]|0){case 8:case 4:{s=1;t=16;break a;break};case 6:case 2:{u=2;t=17;break a;break};case 7:case 3:{s=3;t=16;break a;break};default:{u=0;t=17;break a}}break};default:{u=0;t=17}}}while(0);if((t|0)==16){v=s;w=1;x=0-((c[k>>2]|0)+f)|0;y=g+ -1|0}else if((t|0)==17){v=u;w=0;x=f-(c[k>>2]|0)|0;y=0}u=(g|0)==0;b:do{if(u){z=1}else{t=a+84|0;s=a+4|0;j=(f|0)==0;q=a+88|0;p=1;A=0;B=y;while(1){C=c[l>>2]|0;D=c[t>>2]|0;E=C-(((D+A|0)>>>0)%(C>>>0)|0)|0;C=(E+A|0)>>>0>g>>>0?g-A|0:E;c:do{if(j){F=p}else{E=ba(B,f)|0;G=D;H=0;while(1){if((wd(m,o,(c[q>>2]|0)+H|0,G+A|0,0,0)|0)==-1?(c[s>>2]|0)!=0:0){F=0;break c}I=(((c[t>>2]|0)+A|0)>>>0)%((c[l>>2]|0)>>>0)|0;J=ba($d(m)|0,I)|0;I=c[k>>2]|0;if((I+H|0)>>>0>f>>>0){K=f-H|0;L=I-K|0;lb[n&31](a,d+(H+E<<2)|0,H,B,K,C,L,L+x|0,o+J|0)}else{lb[n&31](a,d+(H+E<<2)|0,H,B,I,C,0,x,o+J|0)}J=(c[k>>2]|0)+H|0;if(!(J>>>0<f>>>0)){F=p;break c}G=c[t>>2]|0;H=J}}}while(0);D=C+A|0;if(!(D>>>0<g>>>0)){z=F;break b}p=F;A=D;B=(w?0-C|0:C)+B|0}}}while(0);ne(o);if((v&2|0)==0|u){r=z;i=h;return r|0}u=f+ -1|0;v=0;while(1){o=ba(v,f)|0;w=u+o|0;if((o|0)<(w|0)){F=d+(o<<2)|0;o=d+(w<<2)|0;do{w=c[F>>2]|0;c[F>>2]=c[o>>2];c[o>>2]=w;F=F+4|0;o=o+ -4|0}while(F>>>0<o>>>0)}o=v+1|0;if((o|0)==(g|0)){r=z;break}else{v=o}}i=h;return r|0}function Lc(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;h=i;i=i+16|0;j=h;k=h+8|0;l=h+12|0;m=c[a>>2]|0;n=c[a+52>>2]|0;o=c[a+16>>2]|0;p=me(Kd(m)|0)|0;if((p|0)==0){q=c[m+628>>2]|0;sc(q,pd(m)|0,17192,j);r=0;i=h;return r|0}pe(p,0,Kd(m)|0);a:do{switch(e[a+28>>1]|0){case 7:case 3:{switch(b[a+30>>1]|0){case 5:case 1:{s=3;t=16;break a;break};case 6:case 2:{s=1;t=16;break a;break};case 8:case 4:{u=2;v=0;w=0;x=0;break a;break};default:{u=0;v=0;w=0;x=0;break a}}break};case 5:case 1:{switch(b[a+30>>1]|0){case 8:case 4:{s=1;t=16;break a;break};case 7:case 3:{s=3;t=16;break a;break};case 6:case 2:{u=2;v=0;w=0;x=0;break a;break};default:{u=0;v=0;w=0;x=0;break a}}break};case 8:case 4:{switch(b[a+30>>1]|0){case 5:case 1:{s=1;t=16;break a;break};case 6:case 2:{s=3;t=16;break a;break};case 7:case 3:{u=2;v=0;w=0;x=0;break a;break};default:{u=0;v=0;w=0;x=0;break a}}break};case 6:case 2:{switch(b[a+30>>1]|0){case 7:case 3:{s=1;t=16;break a;break};case 5:case 1:{u=2;v=0;w=0;x=0;break a;break};case 8:case 4:{s=3;t=16;break a;break};default:{u=0;v=0;w=0;x=0;break a}}break};default:{u=0;v=0;w=0;x=0}}}while(0);if((t|0)==16){u=s;v=1;w=0-(f<<1)|0;x=g+ -1|0}c[j>>2]=k;Ce(m,278,j)|0;c[j>>2]=h+14;c[j+4>>2]=l;Ce(m,530,j)|0;j=Md(m)|0;s=o>>>0>f>>>0?o-f|0:0;o=a+4|0;t=(g|0)==0;b:do{if(t){y=1}else{q=a+84|0;z=0;A=x;while(1){B=c[k>>2]|0;C=(c[q>>2]|0)+z|0;D=B-((C>>>0)%(B>>>0)|0)|0;B=(D+z|0)>>>0>g>>>0?g-z|0:D;D=e[l>>1]|0;E=(B>>>0)%(D>>>0)|0;if((E|0)==0){F=B}else{F=D-E+B|0}E=Fd(m,C,0)|0;if((sd(m,E,p,ba(((((c[q>>2]|0)+z|0)>>>0)%((c[k>>2]|0)>>>0)|0)+F|0,j)|0)|0)==-1?(c[o>>2]|0)!=0:0){y=0;break b}E=d+((ba(A,f)|0)<<2)|0;C=p+(ba((((c[q>>2]|0)+z|0)>>>0)%((c[k>>2]|0)>>>0)|0,j)|0)|0;lb[n&31](a,E,0,A,f,B,s,w,C);C=B+z|0;if(C>>>0<g>>>0){z=C;A=(v?0-B|0:B)+A|0}else{y=1;break}}}}while(0);if(!((u&2|0)==0|t)){t=f+ -1|0;u=0;do{v=ba(u,f)|0;w=t+v|0;if((v|0)<(w|0)){s=d+(v<<2)|0;v=d+(w<<2)|0;do{w=c[s>>2]|0;c[s>>2]=c[v>>2];c[v>>2]=w;s=s+4|0;v=v+ -4|0}while(s>>>0<v>>>0)}u=u+1|0}while((u|0)!=(g|0))}ne(p);r=y;i=h;return r|0}function Mc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;g=i;f=e[a+26>>1]|0;a=ba(f,k)|0;if((j|0)==0){i=g;return}k=h>>>0>7;n=f+1|0;o=f+2|0;p=f+3|0;q=f<<1;r=q|1;s=q+2|0;t=q+3|0;u=q+f|0;v=u+1|0;w=u+2|0;x=u+3|0;y=u+f|0;z=y+1|0;A=y+2|0;B=y+3|0;C=y+f|0;D=C+1|0;E=C+2|0;F=C+3|0;G=C+f|0;H=G+1|0;I=G+2|0;J=G+3|0;K=G+f|0;L=K+1|0;M=K+2|0;N=K+3|0;O=K+f|0;P=m;m=b;b=j;while(1){b=b+ -1|0;if(k){j=P;Q=m;R=h;while(1){c[Q>>2]=(d[j+1|0]|0)<<8|(d[j]|0)|(d[j+2|0]|0)<<16|(d[j+3|0]|0)<<24;c[Q+4>>2]=(d[j+n|0]|0)<<8|(d[j+f|0]|0)|(d[j+o|0]|0)<<16|(d[j+p|0]|0)<<24;c[Q+8>>2]=(d[j+r|0]|0)<<8|(d[j+q|0]|0)|(d[j+s|0]|0)<<16|(d[j+t|0]|0)<<24;c[Q+12>>2]=(d[j+v|0]|0)<<8|(d[j+u|0]|0)|(d[j+w|0]|0)<<16|(d[j+x|0]|0)<<24;c[Q+16>>2]=(d[j+z|0]|0)<<8|(d[j+y|0]|0)|(d[j+A|0]|0)<<16|(d[j+B|0]|0)<<24;c[Q+20>>2]=(d[j+D|0]|0)<<8|(d[j+C|0]|0)|(d[j+E|0]|0)<<16|(d[j+F|0]|0)<<24;c[Q+24>>2]=(d[j+H|0]|0)<<8|(d[j+G|0]|0)|(d[j+I|0]|0)<<16|(d[j+J|0]|0)<<24;S=Q+32|0;c[Q+28>>2]=(d[j+L|0]|0)<<8|(d[j+K|0]|0)|(d[j+M|0]|0)<<16|(d[j+N|0]|0)<<24;T=j+O|0;U=R+ -8|0;if(U>>>0>7){j=T;Q=S;R=U}else{V=S;W=T;X=U;break}}}else{V=m;W=P;X=h}switch(X|0){case 6:{Y=V;Z=W;_=7;break};case 1:{$=V;aa=W;_=12;break};case 3:{ca=V;da=W;_=10;break};case 7:{c[V>>2]=(d[W+1|0]|0)<<8|(d[W]|0)|(d[W+2|0]|0)<<16|(d[W+3|0]|0)<<24;Y=V+4|0;Z=W+f|0;_=7;break};case 2:{ea=V;fa=W;_=11;break};case 5:{ga=V;ha=W;_=8;break};case 4:{ia=V;ja=W;_=9;break};default:{ka=V;la=W}}if((_|0)==7){_=0;c[Y>>2]=(d[Z+1|0]|0)<<8|(d[Z]|0)|(d[Z+2|0]|0)<<16|(d[Z+3|0]|0)<<24;ga=Y+4|0;ha=Z+f|0;_=8}if((_|0)==8){_=0;c[ga>>2]=(d[ha+1|0]|0)<<8|(d[ha]|0)|(d[ha+2|0]|0)<<16|(d[ha+3|0]|0)<<24;ia=ga+4|0;ja=ha+f|0;_=9}if((_|0)==9){_=0;c[ia>>2]=(d[ja+1|0]|0)<<8|(d[ja]|0)|(d[ja+2|0]|0)<<16|(d[ja+3|0]|0)<<24;ca=ia+4|0;da=ja+f|0;_=10}if((_|0)==10){_=0;c[ca>>2]=(d[da+1|0]|0)<<8|(d[da]|0)|(d[da+2|0]|0)<<16|(d[da+3|0]|0)<<24;ea=ca+4|0;fa=da+f|0;_=11}if((_|0)==11){_=0;c[ea>>2]=(d[fa+1|0]|0)<<8|(d[fa]|0)|(d[fa+2|0]|0)<<16|(d[fa+3|0]|0)<<24;$=ea+4|0;aa=fa+f|0;_=12}if((_|0)==12){_=0;c[$>>2]=(d[aa+1|0]|0)<<8|(d[aa]|0)|(d[aa+2|0]|0)<<16|(d[aa+3|0]|0)<<24;ka=$+4|0;la=aa+f|0}if((b|0)==0){break}else{P=la+a|0;m=ka+(l<<2)|0}}i=g;return}function Nc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;g=i;f=e[a+26>>1]|0;n=ba(f,k)|0;if((j|0)==0){i=g;return}k=(h|0)==0;o=a+76|0;a=ba(f,h)|0;p=b;b=m;m=j;while(1){m=m+ -1|0;if(k){q=p;r=b}else{j=b+a|0;s=c[o>>2]|0;t=h;u=b;v=p;while(1){t=t+ -1|0;w=d[u+3|0]|0;x=w<<8;c[v>>2]=d[s+(d[u]|0|x)|0]|0|w<<24|(d[s+(d[u+1|0]|0|x)|0]|0)<<8|(d[s+(d[u+2|0]|0|x)|0]|0)<<16;if((t|0)==0){break}else{u=u+f|0;v=v+4|0}}q=p+(h<<2)|0;r=j}if((m|0)==0){break}else{p=q+(l<<2)|0;b=r+n|0}}i=g;return}function Oc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0;g=i;f=e[a+26>>1]|0;a=ba(f,k)|0;if((j|0)==0){i=g;return}k=h>>>0>7;n=f+1|0;o=f+2|0;p=f<<1;q=p|1;r=p+2|0;s=p+f|0;t=s+1|0;u=s+2|0;v=s+f|0;w=v+1|0;x=v+2|0;y=v+f|0;z=y+1|0;A=y+2|0;B=y+f|0;C=B+1|0;D=B+2|0;E=B+f|0;F=E+1|0;G=E+2|0;H=E+f|0;I=m;m=b;b=j;while(1){b=b+ -1|0;if(k){j=I;J=m;K=h;while(1){c[J>>2]=d[j]|0|(d[j+1|0]|0)<<8|(d[j+2|0]|0)<<16|-16777216;c[J+4>>2]=d[j+f|0]|0|(d[j+n|0]|0)<<8|(d[j+o|0]|0)<<16|-16777216;c[J+8>>2]=d[j+p|0]|0|(d[j+q|0]|0)<<8|(d[j+r|0]|0)<<16|-16777216;c[J+12>>2]=d[j+s|0]|0|(d[j+t|0]|0)<<8|(d[j+u|0]|0)<<16|-16777216;c[J+16>>2]=d[j+v|0]|0|(d[j+w|0]|0)<<8|(d[j+x|0]|0)<<16|-16777216;c[J+20>>2]=d[j+y|0]|0|(d[j+z|0]|0)<<8|(d[j+A|0]|0)<<16|-16777216;c[J+24>>2]=d[j+B|0]|0|(d[j+C|0]|0)<<8|(d[j+D|0]|0)<<16|-16777216;L=J+32|0;c[J+28>>2]=d[j+E|0]|0|(d[j+F|0]|0)<<8|(d[j+G|0]|0)<<16|-16777216;M=j+H|0;N=K+ -8|0;if(N>>>0>7){j=M;J=L;K=N}else{O=L;P=M;Q=N;break}}}else{O=m;P=I;Q=h}switch(Q|0){case 7:{c[O>>2]=d[P]|0|(d[P+1|0]|0)<<8|(d[P+2|0]|0)<<16|-16777216;R=O+4|0;S=P+f|0;T=7;break};case 3:{U=O;V=P;T=10;break};case 2:{W=O;X=P;T=11;break};case 5:{Y=O;Z=P;T=8;break};case 1:{_=O;$=P;T=12;break};case 6:{R=O;S=P;T=7;break};case 4:{aa=O;ca=P;T=9;break};default:{da=O;ea=P}}if((T|0)==7){T=0;c[R>>2]=d[S]|0|(d[S+1|0]|0)<<8|(d[S+2|0]|0)<<16|-16777216;Y=R+4|0;Z=S+f|0;T=8}if((T|0)==8){T=0;c[Y>>2]=d[Z]|0|(d[Z+1|0]|0)<<8|(d[Z+2|0]|0)<<16|-16777216;aa=Y+4|0;ca=Z+f|0;T=9}if((T|0)==9){T=0;c[aa>>2]=d[ca]|0|(d[ca+1|0]|0)<<8|(d[ca+2|0]|0)<<16|-16777216;U=aa+4|0;V=ca+f|0;T=10}if((T|0)==10){T=0;c[U>>2]=d[V]|0|(d[V+1|0]|0)<<8|(d[V+2|0]|0)<<16|-16777216;W=U+4|0;X=V+f|0;T=11}if((T|0)==11){T=0;c[W>>2]=d[X]|0|(d[X+1|0]|0)<<8|(d[X+2|0]|0)<<16|-16777216;_=W+4|0;$=X+f|0;T=12}if((T|0)==12){T=0;c[_>>2]=d[$]|0|(d[$+1|0]|0)<<8|(d[$+2|0]|0)<<16|-16777216;da=_+4|0;ea=$+f|0}if((b|0)==0){break}else{I=ea+a|0;m=da+(l<<2)|0}}i=g;return}function Pc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;f=e[a+26>>1]|0;n=ba(f,k)|0;if((j|0)==0){i=g;return}k=(h|0)==0;o=a+80|0;a=ba(f,h)|0;p=b;b=j;j=m;while(1){b=b+ -1|0;if(k){q=p;r=j}else{m=j+(a<<1)|0;s=c[o>>2]|0;t=h;u=p;v=j;while(1){t=t+ -1|0;c[u>>2]=(d[s+(e[v+2>>1]|0)|0]|0)<<8|(d[s+(e[v>>1]|0)|0]|0)|(d[s+(e[v+4>>1]|0)|0]|0)<<16|(d[s+(e[v+6>>1]|0)|0]|0)<<24;if((t|0)==0){break}else{u=u+4|0;v=v+(f<<1)|0}}q=p+(h<<2)|0;r=m}if((b|0)==0){break}else{p=q+(l<<2)|0;j=r+(n<<1)|0}}i=g;return}function Qc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;g=i;f=e[a+26>>1]|0;n=ba(f,k)|0;if((j|0)==0){i=g;return}k=(h|0)==0;o=a+80|0;p=a+76|0;a=ba(f,h)|0;q=b;b=j;j=m;while(1){b=b+ -1|0;if(k){r=q;s=j}else{m=j+(a<<1)|0;t=c[o>>2]|0;u=c[p>>2]|0;v=h;w=q;x=j;while(1){v=v+ -1|0;y=d[t+(e[x+6>>1]|0)|0]|0;z=y<<8;c[w>>2]=d[u+(d[t+(e[x>>1]|0)|0]|0|z)|0]|0|y<<24|(d[u+(d[t+(e[x+2>>1]|0)|0]|0|z)|0]|0)<<8|(d[u+(d[t+(e[x+4>>1]|0)|0]|0|z)|0]|0)<<16;if((v|0)==0){break}else{w=w+4|0;x=x+(f<<1)|0}}r=q+(h<<2)|0;s=m}if((b|0)==0){break}else{q=r+(l<<2)|0;j=s+(n<<1)|0}}i=g;return}function Rc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;f=e[a+26>>1]|0;n=ba(f,k)|0;if((j|0)==0){i=g;return}k=(h|0)==0;o=a+80|0;a=ba(f,h)|0;p=b;b=j;j=m;while(1){b=b+ -1|0;if(k){q=p;r=j}else{m=j+(a<<1)|0;s=c[o>>2]|0;t=h;u=p;v=j;while(1){t=t+ -1|0;c[u>>2]=d[s+(e[v>>1]|0)|0]|0|(d[s+(e[v+2>>1]|0)|0]|0)<<8|(d[s+(e[v+4>>1]|0)|0]|0)<<16|-16777216;if((t|0)==0){break}else{u=u+4|0;v=v+(f<<1)|0}}q=p+(h<<2)|0;r=m}if((b|0)==0){break}else{p=q+(l<<2)|0;j=r+(n<<1)|0}}i=g;return}function Sc(f){f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;g=i;i=i+16|0;h=g;j=f+32|0;switch(e[j>>1]|0){case 5:case 6:case 2:{if((b[f+24>>1]|0)==8){k=1;i=g;return k|0}break};case 3:{l=f+36|0;m=c[l>>2]|0;n=f+40|0;o=c[n>>2]|0;p=f+44|0;q=c[p>>2]|0;r=f+24|0;s=b[r>>1]|0;t=1<<(s&65535);u=q;v=o;w=t;x=m;while(1){if((w|0)<=0){y=36;break}if((e[x>>1]|0)>255){y=34;break}if((e[v>>1]|0)>255){y=34;break}if((e[u>>1]|0)>255){y=34;break}else{u=u+2|0;v=v+2|0;w=w+ -1|0;x=x+2|0}}if((y|0)==34){if((t|0)>0){x=t;while(1){t=x+ -1|0;w=m+(t<<1)|0;b[w>>1]=(e[w>>1]|0)>>>8;w=o+(t<<1)|0;b[w>>1]=(e[w>>1]|0)>>>8;w=q+(t<<1)|0;b[w>>1]=(e[w>>1]|0)>>>8;if((t|0)>0){x=t}else{y=37;break}}}else{z=s}}else if((y|0)==36){s=c[f>>2]|0;x=c[s+628>>2]|0;ue(x,pd(s)|0,17048,h);y=37}if((y|0)==37){z=b[r>>1]|0}if(!((z&65535)<9)){k=1;i=g;return k|0}r=z&65535;z=c[l>>2]|0;l=c[n>>2]|0;n=c[p>>2]|0;p=me(((8/(r>>>0)|0)<<10)+1024|0)|0;y=f+64|0;c[y>>2]=p;if((p|0)==0){s=c[f>>2]|0;x=c[s+628>>2]|0;sc(x,pd(s)|0,17072,h);k=0;i=g;return k|0}s=p;x=0;q=p+1024|0;while(1){c[s+(x<<2)>>2]=q;if((r|0)==2){p=x>>>6&3;c[q>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>4&3;c[q+4>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>2&3;c[q+8>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x&3;c[q+12>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;A=q+16|0}else if((r|0)==4){p=x>>>4&15;c[q>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x&15;c[q+4>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;A=q+8|0}else if((r|0)==1){p=x>>>7&1;c[q>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>6&1;c[q+4>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>5&1;c[q+8>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>4&1;c[q+12>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>3&1;c[q+16>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>2&1;c[q+20>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x>>>1&1;c[q+24>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;p=x&1;c[q+28>>2]=b[z+(p<<1)>>1]&255|e[l+(p<<1)>>1]<<8&65280|e[n+(p<<1)>>1]<<16|-16777216;A=q+32|0}else if((r|0)==8){c[q>>2]=b[z+(x<<1)>>1]&255|e[l+(x<<1)>>1]<<8&65280|e[n+(x<<1)>>1]<<16|-16777216;A=q+4|0}else{A=q}p=x+1|0;if((p|0)==256){k=1;break}s=c[y>>2]|0;x=p;q=A}i=g;return k|0};case 0:case 1:{break};default:{k=1;i=g;return k|0}}A=f+24|0;q=b[A>>1]|0;x=q<<16>>16==16?255:(1<<(q&65535))+ -1|0;q=x+1|0;y=me(q)|0;s=f+56|0;c[s>>2]=y;if((y|0)==0){n=c[f>>2]|0;l=c[n+628>>2]|0;sc(l,pd(n)|0,17112,h);k=0;i=g;return k|0}n=(x|0)<0;if((b[j>>1]|0)==0){if(!n?(a[y]=-1,(x|0)!=0):0){l=1;do{a[(c[s>>2]|0)+l|0]=((x-l|0)*255|0)/(x|0)|0;l=l+1|0}while((l|0)!=(q|0))}}else{if(!n?(a[y]=0,(x|0)!=0):0){y=1;do{a[(c[s>>2]|0)+y|0]=(y*255|0)/(x|0)|0;y=y+1|0}while((y|0)!=(q|0))}}q=b[A>>1]|0;if(!((q&65535)<17)){k=1;i=g;return k|0}if((e[j>>1]|0)>=2){k=1;i=g;return k|0}j=c[s>>2]|0;A=q&65535;y=8/(A>>>0)|0;x=me((y|0)==0?2048:(y<<10)+1024|0)|0;y=f+60|0;c[y>>2]=x;if((x|0)==0){n=c[f>>2]|0;f=c[n+628>>2]|0;sc(f,pd(n)|0,17160,h);k=0;i=g;return k|0}h=x+1024|0;a:do{if(q<<16>>16==2){n=x;f=0;l=h;while(1){c[n+(f<<2)>>2]=l;z=d[j+(f>>6)|0]|0;c[l>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>4&3)|0]|0;c[l+4>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>2&3)|0]|0;c[l+8>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f&3)|0]|0;c[l+12>>2]=z|z<<8|z<<16|-16777216;if((f|0)==255){break a}n=c[y>>2]|0;f=f+1|0;l=l+16|0}}else if(q<<16>>16==16){c[x>>2]=h;l=d[j]|0;c[h>>2]=l|l<<8|l<<16|-16777216;l=1;f=h;do{f=f+4|0;c[(c[y>>2]|0)+(l<<2)>>2]=f;n=d[j+l|0]|0;c[f>>2]=n|n<<8|n<<16|-16777216;l=l+1|0}while((l|0)!=256)}else if(q<<16>>16==1){l=x;f=0;n=h;while(1){c[l+(f<<2)>>2]=n;z=d[j+(f>>7)|0]|0;c[n>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>6&1)|0]|0;c[n+4>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>5&1)|0]|0;c[n+8>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>4&1)|0]|0;c[n+12>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>3&1)|0]|0;c[n+16>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>2&1)|0]|0;c[n+20>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f>>>1&1)|0]|0;c[n+24>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f&1)|0]|0;c[n+28>>2]=z|z<<8|z<<16|-16777216;z=f+1|0;if((z|0)==256){break a}l=c[y>>2]|0;f=z;n=n+32|0}}else{n=x;f=0;l=h;while(1){c[n+(f<<2)>>2]=l;if((A|0)==8|(A|0)==16){z=d[j+f|0]|0;c[l>>2]=z|z<<8|z<<16|-16777216;B=l+4|0}else if((A|0)==4){z=d[j+(f>>4)|0]|0;c[l>>2]=z|z<<8|z<<16|-16777216;z=d[j+(f&15)|0]|0;c[l+4>>2]=z|z<<8|z<<16|-16777216;B=l+8|0}else{B=l}z=f+1|0;if((z|0)>=256){break a}n=c[y>>2]|0;f=z;l=B}}}while(0);ne(c[s>>2]|0);c[s>>2]=0;k=1;i=g;return k|0}function Tc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0;g=i;f=e[a+26>>1]|0;a=ba(f,k)|0;if((j|0)==0){i=g;return}k=h>>>0>7;n=f+3|0;o=f+1|0;p=f+2|0;q=f<<1;r=q+3|0;s=q|1;t=q+2|0;u=q+f|0;v=u+3|0;w=u+1|0;x=u+2|0;y=u+f|0;z=y+3|0;A=y+1|0;B=y+2|0;C=y+f|0;D=C+3|0;E=C+1|0;F=C+2|0;G=C+f|0;H=G+3|0;I=G+1|0;J=G+2|0;K=G+f|0;L=K+3|0;M=K+1|0;N=K+2|0;O=K+f|0;P=m;m=b;b=j;while(1){b=b+ -1|0;if(k){j=P;Q=m;R=h;while(1){S=(d[j+3|0]|0)^255;T=((ba((d[j]|0)^255,S)|0)>>>0)/255|0;U=((ba((d[j+1|0]|0)^255,S)|0)>>>0)/255|0;c[Q>>2]=T|U<<8|(((ba((d[j+2|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+n|0]|0)^255;U=((ba((d[j+f|0]|0)^255,S)|0)>>>0)/255|0;T=((ba((d[j+o|0]|0)^255,S)|0)>>>0)/255|0;c[Q+4>>2]=U|T<<8|(((ba((d[j+p|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+r|0]|0)^255;T=((ba((d[j+q|0]|0)^255,S)|0)>>>0)/255|0;U=((ba((d[j+s|0]|0)^255,S)|0)>>>0)/255|0;c[Q+8>>2]=T|U<<8|(((ba((d[j+t|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+v|0]|0)^255;U=((ba((d[j+u|0]|0)^255,S)|0)>>>0)/255|0;T=((ba((d[j+w|0]|0)^255,S)|0)>>>0)/255|0;c[Q+12>>2]=U|T<<8|(((ba((d[j+x|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+z|0]|0)^255;T=((ba((d[j+y|0]|0)^255,S)|0)>>>0)/255|0;U=((ba((d[j+A|0]|0)^255,S)|0)>>>0)/255|0;c[Q+16>>2]=T|U<<8|(((ba((d[j+B|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+D|0]|0)^255;U=((ba((d[j+C|0]|0)^255,S)|0)>>>0)/255|0;T=((ba((d[j+E|0]|0)^255,S)|0)>>>0)/255|0;c[Q+20>>2]=U|T<<8|(((ba((d[j+F|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+H|0]|0)^255;T=((ba((d[j+G|0]|0)^255,S)|0)>>>0)/255|0;U=((ba((d[j+I|0]|0)^255,S)|0)>>>0)/255|0;c[Q+24>>2]=T|U<<8|(((ba((d[j+J|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=(d[j+L|0]|0)^255;U=((ba((d[j+K|0]|0)^255,S)|0)>>>0)/255|0;T=((ba((d[j+M|0]|0)^255,S)|0)>>>0)/255|0;V=Q+32|0;c[Q+28>>2]=U|T<<8|(((ba((d[j+N|0]|0)^255,S)|0)>>>0)/255|0)<<16|-16777216;S=j+O|0;T=R+ -8|0;if(T>>>0>7){j=S;Q=V;R=T}else{W=V;X=S;Y=T;break}}}else{W=m;X=P;Y=h}switch(Y|0){case 1:{Z=W;_=X;$=12;break};case 2:{aa=W;ca=X;$=11;break};case 3:{da=W;ea=X;$=10;break};case 4:{fa=W;ga=X;$=9;break};case 5:{ha=W;ia=X;$=8;break};case 7:{R=(d[X+3|0]|0)^255;Q=((ba((d[X]|0)^255,R)|0)>>>0)/255|0;c[W>>2]=Q|(((ba((d[X+1|0]|0)^255,R)|0)>>>0)/255|0)<<8|(((ba((d[X+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;ja=W+4|0;ka=X+f|0;$=7;break};case 6:{ja=W;ka=X;$=7;break};default:{la=W;ma=X}}if(($|0)==7){$=0;R=(d[ka+3|0]|0)^255;Q=((ba((d[ka]|0)^255,R)|0)>>>0)/255|0;j=((ba((d[ka+1|0]|0)^255,R)|0)>>>0)/255|0;c[ja>>2]=Q|j<<8|(((ba((d[ka+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;ha=ja+4|0;ia=ka+f|0;$=8}if(($|0)==8){$=0;R=(d[ia+3|0]|0)^255;j=((ba((d[ia]|0)^255,R)|0)>>>0)/255|0;Q=((ba((d[ia+1|0]|0)^255,R)|0)>>>0)/255|0;c[ha>>2]=j|Q<<8|(((ba((d[ia+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;fa=ha+4|0;ga=ia+f|0;$=9}if(($|0)==9){$=0;R=(d[ga+3|0]|0)^255;Q=((ba((d[ga]|0)^255,R)|0)>>>0)/255|0;j=((ba((d[ga+1|0]|0)^255,R)|0)>>>0)/255|0;c[fa>>2]=Q|j<<8|(((ba((d[ga+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;da=fa+4|0;ea=ga+f|0;$=10}if(($|0)==10){$=0;R=(d[ea+3|0]|0)^255;j=((ba((d[ea]|0)^255,R)|0)>>>0)/255|0;Q=((ba((d[ea+1|0]|0)^255,R)|0)>>>0)/255|0;c[da>>2]=j|Q<<8|(((ba((d[ea+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;aa=da+4|0;ca=ea+f|0;$=11}if(($|0)==11){$=0;R=(d[ca+3|0]|0)^255;Q=((ba((d[ca]|0)^255,R)|0)>>>0)/255|0;j=((ba((d[ca+1|0]|0)^255,R)|0)>>>0)/255|0;c[aa>>2]=Q|j<<8|(((ba((d[ca+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;Z=aa+4|0;_=ca+f|0;$=12}if(($|0)==12){$=0;R=(d[_+3|0]|0)^255;j=((ba((d[_]|0)^255,R)|0)>>>0)/255|0;Q=((ba((d[_+1|0]|0)^255,R)|0)>>>0)/255|0;c[Z>>2]=j|Q<<8|(((ba((d[_+2|0]|0)^255,R)|0)>>>0)/255|0)<<16|-16777216;la=Z+4|0;ma=_+f|0}if((b|0)==0){break}else{P=ma+a|0;m=la+(l<<2)|0}}i=g;return}function Uc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;g=i;f=e[a+26>>1]|0;n=c[a+56>>2]|0;a=ba(f,k)|0;if((j|0)==0){i=g;return}k=(h|0)==0;o=ba(f,h)|0;p=b;b=m;m=j;while(1){m=m+ -1|0;if(k){q=p;r=b}else{j=b+o|0;s=h;t=b;u=p;while(1){s=s+ -1|0;v=(d[t+3|0]|0)^255;w=((ba((d[t]|0)^255,v)|0)>>>0)/255|0;x=((ba((d[t+1|0]|0)^255,v)|0)>>>0)/255|0;y=((ba((d[t+2|0]|0)^255,v)|0)>>>0)/255|0;c[u>>2]=d[n+w|0]|0|(d[n+x|0]|0)<<8|(d[n+y|0]|0)<<16|-16777216;if((s|0)==0){break}else{t=t+f|0;u=u+4|0}}q=p+(h<<2)|0;r=j}if((m|0)==0){break}else{p=q+(l<<2)|0;b=r+a|0}}i=g;return}function Vc(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;f=c[a+64>>2]|0;n=e[a+26>>1]|0;if((j|0)==0){i=g;return}a=(h|0)==0;o=ba(n,h)|0;p=b;b=m;m=j;while(1){m=m+ -1|0;if(a){q=p;r=b}else{j=b+o|0;s=h;t=b;u=p;while(1){s=s+ -1|0;c[u>>2]=c[c[f+((d[t]|0)<<2)>>2]>>2];if((s|0)==0){break}else{t=t+n|0;u=u+4|0}}q=p+(h<<2)|0;r=j}if((m|0)==0){break}else{p=q+(l<<2)|0;b=r+k|0}}i=g;return}function Wc(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;e=c[a+64>>2]|0;a=(j|0)/2|0;if((h|0)==0){i=f;return}j=g>>>0>1;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];r=n+8|0;c[n+4>>2]=c[q+4>>2];q=o+ -2|0;if(q>>>0>1){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}if((u|0)==0){v=s;w=t}else{c[s>>2]=c[c[e+((d[t]|0)<<2)>>2]>>2];v=s+4|0;w=t+1|0}if((l|0)==0){break}else{m=v+(k<<2)|0;b=w+a|0}}i=f;return}function Xc(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;e=c[a+64>>2]|0;a=(j|0)/4|0;if((h|0)==0){i=f;return}j=g>>>0>3;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];r=n+16|0;c[n+12>>2]=c[q+12>>2];q=o+ -4|0;if(q>>>0>3){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}do{if((u|0)==0){v=t;w=s}else{o=t+1|0;n=c[e+((d[t]|0)<<2)>>2]|0;if((u|0)==1){x=s;y=n}else if((u|0)==2){z=s;A=n;B=8}else if((u|0)==3){c[s>>2]=c[n>>2];z=s+4|0;A=n+4|0;B=8}else{v=o;w=s;break}if((B|0)==8){B=0;c[z>>2]=c[A>>2];x=z+4|0;y=A+4|0}c[x>>2]=c[y>>2];v=o;w=x+4|0}}while(0);if((l|0)==0){break}else{m=w+(k<<2)|0;b=v+a|0}}i=f;return}function Yc(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;f=i;e=c[a+64>>2]|0;a=(j|0)/8|0;if((h|0)==0){i=f;return}j=g>>>0>7;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];c[n+12>>2]=c[q+12>>2];c[n+16>>2]=c[q+16>>2];c[n+20>>2]=c[q+20>>2];c[n+24>>2]=c[q+24>>2];r=n+32|0;c[n+28>>2]=c[q+28>>2];q=o+ -8|0;if(q>>>0>7){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}a:do{if((u|0)==0){v=t;w=s}else{o=t+1|0;n=c[e+((d[t]|0)<<2)>>2]|0;switch(u|0){case 4:{x=s;y=n;z=10;break};case 5:{A=s;B=n;z=9;break};case 3:{C=s;D=n;z=11;break};case 6:{E=s;F=n;z=8;break};case 2:{G=s;H=n;z=12;break};case 1:{I=s;J=n;break};case 7:{c[s>>2]=c[n>>2];E=s+4|0;F=n+4|0;z=8;break};default:{v=o;w=s;break a}}if((z|0)==8){z=0;c[E>>2]=c[F>>2];A=E+4|0;B=F+4|0;z=9}if((z|0)==9){z=0;c[A>>2]=c[B>>2];x=A+4|0;y=B+4|0;z=10}if((z|0)==10){z=0;c[x>>2]=c[y>>2];C=x+4|0;D=y+4|0;z=11}if((z|0)==11){z=0;c[C>>2]=c[D>>2];G=C+4|0;H=D+4|0;z=12}if((z|0)==12){z=0;c[G>>2]=c[H>>2];I=G+4|0;J=H+4|0}c[I>>2]=c[J>>2];v=o;w=I+4|0}}while(0);if((l|0)==0){break}else{m=w+(k<<2)|0;b=v+a|0}}i=f;return}function Zc(a,b,d,f,g,h,j,k,l){a=a|0;b=b|0;d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;f=i;d=e[a+26>>1]|0;m=c[a+60>>2]|0;if((h|0)==0){i=f;return}a=(g|0)==0;n=(ba(d,g)|0)<<1;o=b;b=l;l=h;while(1){l=l+ -1|0;if(a){p=o;q=b}else{h=b+n|0;r=g;s=o;t=b;while(1){r=r+ -1|0;c[s>>2]=c[c[m+((e[t>>1]|0)>>>8<<2)>>2]>>2];if((r|0)==0){break}else{s=s+4|0;t=t+(d<<1)|0}}p=o+(g<<2)|0;q=h}if((l|0)==0){break}else{o=p+(k<<2)|0;b=q+j|0}}i=f;return}function _c(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;f=e[a+26>>1]|0;n=c[a+60>>2]|0;if((j|0)==0){i=g;return}a=(h|0)==0;o=ba(f,h)|0;p=b;b=m;m=j;while(1){m=m+ -1|0;if(a){q=p;r=b}else{j=b+o|0;s=h;t=b;u=p;while(1){s=s+ -1|0;c[u>>2]=((d[t+1|0]|0)<<24|16777215)&c[c[n+((d[t]|0)<<2)>>2]>>2];if((s|0)==0){break}else{t=t+f|0;u=u+4|0}}q=p+(h<<2)|0;r=j}if((m|0)==0){break}else{p=q+(l<<2)|0;b=r+k|0}}i=g;return}function $c(a,b,f,g,h,j,k,l,m){a=a|0;b=b|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;f=e[a+26>>1]|0;n=c[a+60>>2]|0;if((j|0)==0){i=g;return}a=(h|0)==0;o=ba(f,h)|0;p=b;b=m;m=j;while(1){m=m+ -1|0;if(a){q=p;r=b}else{j=b+o|0;s=h;t=b;u=p;while(1){s=s+ -1|0;c[u>>2]=c[c[n+((d[t]|0)<<2)>>2]>>2];if((s|0)==0){break}else{t=t+f|0;u=u+4|0}}q=p+(h<<2)|0;r=j}if((m|0)==0){break}else{p=q+(l<<2)|0;b=r+k|0}}i=g;return}function ad(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;e=c[a+60>>2]|0;a=(j|0)/2|0;if((h|0)==0){i=f;return}j=g>>>0>1;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];r=n+8|0;c[n+4>>2]=c[q+4>>2];q=o+ -2|0;if(q>>>0>1){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}if((u|0)==0){v=s;w=t}else{c[s>>2]=c[c[e+((d[t]|0)<<2)>>2]>>2];v=s+4|0;w=t+1|0}if((l|0)==0){break}else{m=v+(k<<2)|0;b=w+a|0}}i=f;return}function bd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;e=c[a+60>>2]|0;a=(j|0)/4|0;if((h|0)==0){i=f;return}j=g>>>0>3;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];r=n+16|0;c[n+12>>2]=c[q+12>>2];q=o+ -4|0;if(q>>>0>3){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}do{if((u|0)==0){v=t;w=s}else{o=t+1|0;n=c[e+((d[t]|0)<<2)>>2]|0;if((u|0)==1){x=s;y=n}else if((u|0)==2){z=s;A=n;B=8}else if((u|0)==3){c[s>>2]=c[n>>2];z=s+4|0;A=n+4|0;B=8}else{v=o;w=s;break}if((B|0)==8){B=0;c[z>>2]=c[A>>2];x=z+4|0;y=A+4|0}c[x>>2]=c[y>>2];v=o;w=x+4|0}}while(0);if((l|0)==0){break}else{m=w+(k<<2)|0;b=v+a|0}}i=f;return}function cd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;f=i;e=c[a+60>>2]|0;a=(j|0)/8|0;if((h|0)==0){i=f;return}j=g>>>0>7;m=b;b=l;l=h;while(1){l=l+ -1|0;if(j){h=b;n=m;o=g;while(1){p=h+1|0;q=c[e+((d[h]|0)<<2)>>2]|0;c[n>>2]=c[q>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];c[n+12>>2]=c[q+12>>2];c[n+16>>2]=c[q+16>>2];c[n+20>>2]=c[q+20>>2];c[n+24>>2]=c[q+24>>2];r=n+32|0;c[n+28>>2]=c[q+28>>2];q=o+ -8|0;if(q>>>0>7){h=p;n=r;o=q}else{s=r;t=p;u=q;break}}}else{s=m;t=b;u=g}a:do{if((u|0)==0){v=t;w=s}else{o=t+1|0;n=c[e+((d[t]|0)<<2)>>2]|0;switch(u|0){case 5:{x=s;y=n;z=9;break};case 4:{A=s;B=n;z=10;break};case 1:{C=s;D=n;break};case 6:{E=s;F=n;z=8;break};case 2:{G=s;H=n;z=12;break};case 3:{I=s;J=n;z=11;break};case 7:{c[s>>2]=c[n>>2];E=s+4|0;F=n+4|0;z=8;break};default:{v=o;w=s;break a}}if((z|0)==8){z=0;c[E>>2]=c[F>>2];x=E+4|0;y=F+4|0;z=9}if((z|0)==9){z=0;c[x>>2]=c[y>>2];A=x+4|0;B=y+4|0;z=10}if((z|0)==10){z=0;c[A>>2]=c[B>>2];I=A+4|0;J=B+4|0;z=11}if((z|0)==11){z=0;c[I>>2]=c[J>>2];G=I+4|0;H=J+4|0;z=12}if((z|0)==12){z=0;c[G>>2]=c[H>>2];C=G+4|0;D=H+4|0}c[C>>2]=c[D>>2];v=o;w=C+4|0}}while(0);if((l|0)==0){break}else{m=w+(k<<2)|0;b=v+a|0}}i=f;return}function dd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0;f=i;i=i+384|0;e=f+380|0;m=f+376|0;n=f+372|0;o=f+368|0;p=f+364|0;q=f+360|0;r=f+356|0;s=f+352|0;t=f+348|0;u=f+344|0;v=f+340|0;w=f+336|0;x=f+332|0;y=f+328|0;z=f+324|0;A=f+320|0;B=f+316|0;C=f+312|0;D=f+308|0;E=f+304|0;F=f+300|0;G=f+296|0;H=f+292|0;I=f+288|0;J=f+284|0;K=f+280|0;L=f+276|0;M=f+272|0;N=f+268|0;O=f+264|0;P=f+260|0;Q=f+256|0;R=f+252|0;S=f+248|0;T=f+244|0;U=f+240|0;V=f+236|0;W=f+232|0;X=f+228|0;Y=f+224|0;Z=f+220|0;_=f+216|0;$=f+212|0;aa=f+208|0;ba=f+204|0;ca=f+200|0;da=f+196|0;ea=f+192|0;fa=f+188|0;ga=f+184|0;ha=f+180|0;ia=f+176|0;ja=f+172|0;ka=f+168|0;la=f+164|0;ma=f+160|0;na=f+156|0;oa=f+152|0;pa=f+148|0;qa=f+144|0;ra=f+140|0;sa=f+136|0;ta=f+132|0;ua=f+128|0;va=f+124|0;wa=f+120|0;xa=f+116|0;ya=f+112|0;za=f+108|0;Aa=f+104|0;Ba=f+100|0;Ca=f+96|0;Da=f+92|0;Ea=f+88|0;Fa=f+84|0;Ga=f+80|0;Ha=f+76|0;Ia=f+72|0;Ja=f+68|0;Ka=f+64|0;La=f+60|0;Ma=f+56|0;Na=f+52|0;Oa=f+48|0;Pa=f+44|0;Qa=f+40|0;Ra=f+36|0;Sa=f+32|0;Ta=f+28|0;Ua=f+24|0;Va=f+20|0;Wa=f+16|0;Xa=f+12|0;Ya=f+8|0;Za=f+4|0;_a=f;$a=k+g|0;ab=b+($a<<2)|0;bb=$a<<1;cb=b+(bb<<2)|0;db=b+($a+bb<<2)|0;bb=(k<<2)+(g*3|0)|0;k=(j*18|0)/4|0;if((h&3|0)==0?(g&3|0)==0:0){if(!(h>>>0>3)){i=f;return}j=g>>>2;$a=a+68|0;eb=j<<2;fb=j*18|0;gb=b;hb=h;ib=l;jb=ab;kb=cb;lb=db;while(1){mb=j;nb=gb;ob=ib;pb=jb;qb=kb;rb=lb;while(1){sb=d[ob+16|0]|0;tb=d[ob+17|0]|0;Ge(c[$a>>2]|0,d[ob]|0,sb,tb,e,m,n);c[nb>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+1|0]|0,sb,tb,o,p,q);c[nb+4>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+2|0]|0,sb,tb,r,s,t);c[nb+8>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+3|0]|0,sb,tb,u,v,w);c[nb+12>>2]=c[u>>2]|c[v>>2]<<8|c[w>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+4|0]|0,sb,tb,x,y,z);c[pb>>2]=c[x>>2]|c[y>>2]<<8|c[z>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+5|0]|0,sb,tb,A,B,C);c[pb+4>>2]=c[A>>2]|c[B>>2]<<8|c[C>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+6|0]|0,sb,tb,D,E,F);c[pb+8>>2]=c[D>>2]|c[E>>2]<<8|c[F>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+7|0]|0,sb,tb,G,H,I);c[pb+12>>2]=c[G>>2]|c[H>>2]<<8|c[I>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+8|0]|0,sb,tb,J,K,L);c[qb>>2]=c[J>>2]|c[K>>2]<<8|c[L>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+9|0]|0,sb,tb,M,N,O);c[qb+4>>2]=c[M>>2]|c[N>>2]<<8|c[O>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+10|0]|0,sb,tb,P,Q,R);c[qb+8>>2]=c[P>>2]|c[Q>>2]<<8|c[R>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+11|0]|0,sb,tb,S,T,U);c[qb+12>>2]=c[S>>2]|c[T>>2]<<8|c[U>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+12|0]|0,sb,tb,V,W,X);c[rb>>2]=c[V>>2]|c[W>>2]<<8|c[X>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+13|0]|0,sb,tb,Y,Z,_);c[rb+4>>2]=c[Y>>2]|c[Z>>2]<<8|c[_>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+14|0]|0,sb,tb,$,aa,ba);c[rb+8>>2]=c[$>>2]|c[aa>>2]<<8|c[ba>>2]<<16|-16777216;Ge(c[$a>>2]|0,d[ob+15|0]|0,sb,tb,ca,da,ea);c[rb+12>>2]=c[ca>>2]|c[da>>2]<<8|c[ea>>2]<<16|-16777216;mb=mb+ -1|0;if((mb|0)==0){break}else{nb=nb+16|0;ob=ob+18|0;pb=pb+16|0;qb=qb+16|0;rb=rb+16|0}}hb=hb+ -4|0;if(!(hb>>>0>3)){break}else{gb=gb+(eb+bb<<2)|0;ib=ib+(fb+k)|0;jb=jb+(eb+bb<<2)|0;kb=kb+(eb+bb<<2)|0;lb=lb+(eb+bb<<2)|0}}i=f;return}if((h|0)==0){i=f;return}eb=(g|0)==0;lb=a+68|0;a=h;h=b;b=l;l=ab;ab=cb;cb=db;while(1){a:do{if(eb){ub=h;vb=b;wb=l;xb=ab;yb=cb}else{db=g;kb=h;jb=b;fb=l;ib=ab;gb=cb;while(1){hb=d[jb+16|0]|0;ea=d[jb+17|0]|0;if((db|0)==2){zb=22}else if((db|0)==3){zb=17}else if((db|0)!=1){if((a|0)==2){zb=15}else if((a|0)==3){zb=14}else if((a|0)!=1){Ge(c[lb>>2]|0,d[jb+15|0]|0,hb,ea,fa,ga,ha);c[gb+12>>2]=c[fa>>2]|c[ga>>2]<<8|c[ha>>2]<<16|-16777216;zb=14}if((zb|0)==14){zb=0;Ge(c[lb>>2]|0,d[jb+11|0]|0,hb,ea,ia,ja,ka);c[ib+12>>2]=c[ia>>2]|c[ja>>2]<<8|c[ka>>2]<<16|-16777216;zb=15}if((zb|0)==15){zb=0;Ge(c[lb>>2]|0,d[jb+7|0]|0,hb,ea,la,ma,na);c[fb+12>>2]=c[la>>2]|c[ma>>2]<<8|c[na>>2]<<16|-16777216}Ge(c[lb>>2]|0,d[jb+3|0]|0,hb,ea,oa,pa,qa);c[kb+12>>2]=c[oa>>2]|c[pa>>2]<<8|c[qa>>2]<<16|-16777216;zb=17}if((zb|0)==17){zb=0;if((a|0)==2){zb=20}else if((a|0)==3){zb=19}else if((a|0)!=1){Ge(c[lb>>2]|0,d[jb+14|0]|0,hb,ea,ra,sa,ta);c[gb+8>>2]=c[ra>>2]|c[sa>>2]<<8|c[ta>>2]<<16|-16777216;zb=19}if((zb|0)==19){zb=0;Ge(c[lb>>2]|0,d[jb+10|0]|0,hb,ea,ua,va,wa);c[ib+8>>2]=c[ua>>2]|c[va>>2]<<8|c[wa>>2]<<16|-16777216;zb=20}if((zb|0)==20){zb=0;Ge(c[lb>>2]|0,d[jb+6|0]|0,hb,ea,xa,ya,za);c[fb+8>>2]=c[xa>>2]|c[ya>>2]<<8|c[za>>2]<<16|-16777216}Ge(c[lb>>2]|0,d[jb+2|0]|0,hb,ea,Aa,Ba,Ca);c[kb+8>>2]=c[Aa>>2]|c[Ba>>2]<<8|c[Ca>>2]<<16|-16777216;zb=22}if((zb|0)==22){zb=0;if((a|0)==3){zb=24}else if((a|0)==2){zb=25}else if((a|0)!=1){Ge(c[lb>>2]|0,d[jb+13|0]|0,hb,ea,Da,Ea,Fa);c[gb+4>>2]=c[Da>>2]|c[Ea>>2]<<8|c[Fa>>2]<<16|-16777216;zb=24}if((zb|0)==24){zb=0;Ge(c[lb>>2]|0,d[jb+9|0]|0,hb,ea,Ga,Ha,Ia);c[ib+4>>2]=c[Ga>>2]|c[Ha>>2]<<8|c[Ia>>2]<<16|-16777216;zb=25}if((zb|0)==25){zb=0;Ge(c[lb>>2]|0,d[jb+5|0]|0,hb,ea,Ja,Ka,La);c[fb+4>>2]=c[Ja>>2]|c[Ka>>2]<<8|c[La>>2]<<16|-16777216}Ge(c[lb>>2]|0,d[jb+1|0]|0,hb,ea,Ma,Na,Oa);c[kb+4>>2]=c[Ma>>2]|c[Na>>2]<<8|c[Oa>>2]<<16|-16777216}if((a|0)==2){zb=30}else if((a|0)==3){zb=29}else if((a|0)!=1){Ge(c[lb>>2]|0,d[jb+12|0]|0,hb,ea,Pa,Qa,Ra);c[gb>>2]=c[Pa>>2]|c[Qa>>2]<<8|c[Ra>>2]<<16|-16777216;zb=29}if((zb|0)==29){zb=0;Ge(c[lb>>2]|0,d[jb+8|0]|0,hb,ea,Sa,Ta,Ua);c[ib>>2]=c[Sa>>2]|c[Ta>>2]<<8|c[Ua>>2]<<16|-16777216;zb=30}if((zb|0)==30){zb=0;Ge(c[lb>>2]|0,d[jb+4|0]|0,hb,ea,Va,Wa,Xa);c[fb>>2]=c[Va>>2]|c[Wa>>2]<<8|c[Xa>>2]<<16|-16777216}Ge(c[lb>>2]|0,d[jb]|0,hb,ea,Ya,Za,_a);c[kb>>2]=c[Ya>>2]|c[Za>>2]<<8|c[_a>>2]<<16|-16777216;if(db>>>0<4){break}ea=kb+16|0;hb=fb+16|0;da=ib+16|0;ca=gb+16|0;$a=db+ -4|0;ba=jb+18|0;if(($a|0)==0){ub=ea;vb=ba;wb=hb;xb=da;yb=ca;break a}else{db=$a;kb=ea;jb=ba;fb=hb;ib=da;gb=ca}}ub=kb+(db<<2)|0;vb=jb+18|0;wb=fb+(db<<2)|0;xb=ib+(db<<2)|0;yb=gb+(db<<2)|0}}while(0);if(a>>>0<5){zb=36;break}ca=a+ -4|0;if((ca|0)==0){zb=36;break}else{a=ca;h=ub+(bb<<2)|0;b=vb+k|0;l=wb+(bb<<2)|0;ab=xb+(bb<<2)|0;cb=yb+(bb<<2)|0}}if((zb|0)==36){i=f;return}}function ed(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0;f=i;i=i+192|0;e=f+188|0;m=f+184|0;n=f+180|0;o=f+176|0;p=f+172|0;q=f+168|0;r=f+164|0;s=f+160|0;t=f+156|0;u=f+152|0;v=f+148|0;w=f+144|0;x=f+140|0;y=f+136|0;z=f+132|0;A=f+128|0;B=f+124|0;C=f+120|0;D=f+116|0;E=f+112|0;F=f+108|0;G=f+104|0;H=f+100|0;I=f+96|0;J=f+92|0;K=f+88|0;L=f+84|0;M=f+80|0;N=f+76|0;O=f+72|0;P=f+68|0;Q=f+64|0;R=f+60|0;S=f+56|0;T=f+52|0;U=f+48|0;V=f+44|0;W=f+40|0;X=f+36|0;Y=f+32|0;Z=f+28|0;_=f+24|0;$=f+20|0;aa=f+16|0;ba=f+12|0;ca=f+8|0;da=f+4|0;ea=f;fa=b+(k+g<<2)|0;ga=(k<<1)+g|0;k=(j*10|0)/4|0;if((h&3|0)==0?(g&1|0)==0:0){if(!(h>>>0>1)){i=f;return}j=g>>>2;ha=a+68|0;ia=j<<2;ja=j*10|0;ka=b;la=h;ma=l;na=fa;while(1){oa=j;pa=ka;qa=ma;ra=na;while(1){sa=d[qa+8|0]|0;ta=d[qa+9|0]|0;Ge(c[ha>>2]|0,d[qa]|0,sa,ta,e,m,n);c[pa>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+1|0]|0,sa,ta,o,p,q);c[pa+4>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+2|0]|0,sa,ta,r,s,t);c[pa+8>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+3|0]|0,sa,ta,u,v,w);c[pa+12>>2]=c[u>>2]|c[v>>2]<<8|c[w>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+4|0]|0,sa,ta,x,y,z);c[ra>>2]=c[x>>2]|c[y>>2]<<8|c[z>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+5|0]|0,sa,ta,A,B,C);c[ra+4>>2]=c[A>>2]|c[B>>2]<<8|c[C>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+6|0]|0,sa,ta,D,E,F);c[ra+8>>2]=c[D>>2]|c[E>>2]<<8|c[F>>2]<<16|-16777216;Ge(c[ha>>2]|0,d[qa+7|0]|0,sa,ta,G,H,I);c[ra+12>>2]=c[G>>2]|c[H>>2]<<8|c[I>>2]<<16|-16777216;oa=oa+ -1|0;if((oa|0)==0){break}else{pa=pa+16|0;qa=qa+10|0;ra=ra+16|0}}la=la+ -2|0;if(!(la>>>0>1)){break}else{ka=ka+(ia+ga<<2)|0;ma=ma+(ja+k)|0;na=na+(ia+ga<<2)|0}}i=f;return}if((h|0)==0){i=f;return}ia=(g|0)==0;na=a+68|0;a=h;h=l;l=b;b=fa;while(1){a:do{if(ia){ua=l;va=h;wa=b}else{fa=(a|0)==1;ja=g;ma=h;ka=l;la=b;while(1){I=d[ma+8|0]|0;H=d[ma+9|0]|0;if((ja|0)==3){xa=16}else if((ja|0)==2){xa=19}else if((ja|0)!=1){if(!fa){Ge(c[na>>2]|0,d[ma+7|0]|0,I,H,J,K,L);c[la+12>>2]=c[J>>2]|c[K>>2]<<8|c[L>>2]<<16|-16777216}Ge(c[na>>2]|0,d[ma+3|0]|0,I,H,M,N,O);c[ka+12>>2]=c[M>>2]|c[N>>2]<<8|c[O>>2]<<16|-16777216;xa=16}if((xa|0)==16){xa=0;if(!fa){Ge(c[na>>2]|0,d[ma+6|0]|0,I,H,P,Q,R);c[la+8>>2]=c[P>>2]|c[Q>>2]<<8|c[R>>2]<<16|-16777216}Ge(c[na>>2]|0,d[ma+2|0]|0,I,H,S,T,U);c[ka+8>>2]=c[S>>2]|c[T>>2]<<8|c[U>>2]<<16|-16777216;xa=19}if((xa|0)==19){xa=0;if(!fa){Ge(c[na>>2]|0,d[ma+5|0]|0,I,H,V,W,X);c[la+4>>2]=c[V>>2]|c[W>>2]<<8|c[X>>2]<<16|-16777216}Ge(c[na>>2]|0,d[ma+1|0]|0,I,H,Y,Z,_);c[ka+4>>2]=c[Y>>2]|c[Z>>2]<<8|c[_>>2]<<16|-16777216}if(!fa){Ge(c[na>>2]|0,d[ma+4|0]|0,I,H,$,aa,ba);c[la>>2]=c[$>>2]|c[aa>>2]<<8|c[ba>>2]<<16|-16777216}Ge(c[na>>2]|0,d[ma]|0,I,H,ca,da,ea);c[ka>>2]=c[ca>>2]|c[da>>2]<<8|c[ea>>2]<<16|-16777216;if(ja>>>0<4){break}H=ka+16|0;I=la+16|0;G=ja+ -4|0;ha=ma+10|0;if((G|0)==0){ua=H;va=ha;wa=I;break a}else{ja=G;ma=ha;ka=H;la=I}}ua=ka+(ja<<2)|0;va=ma+10|0;wa=la+(ja<<2)|0}}while(0);if(a>>>0<3){xa=29;break}fa=a+ -2|0;if((fa|0)==0){xa=29;break}else{a=fa;h=va+k|0;l=ua+(ga<<2)|0;b=wa+(ga<<2)|0}}if((xa|0)==29){i=f;return}}function fd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;f=i;i=i+96|0;e=f+80|0;m=f+76|0;n=f+72|0;o=f+68|0;p=f+64|0;q=f+60|0;r=f+56|0;s=f+52|0;t=f+48|0;u=f+44|0;v=f+40|0;w=f+36|0;x=f+32|0;y=f+28|0;z=f+24|0;A=f+20|0;B=f+16|0;C=f+12|0;D=f+8|0;E=f+4|0;F=f;G=g>>>2;H=a+68|0;a=g&3;g=(a|0)==0;I=a|4;J=G*6|0;K=G<<2;L=K+ -4|0;M=b;b=h;h=l;while(1){l=h+J|0;N=G;O=M;P=h;while(1){Q=d[P+4|0]|0;R=d[P+5|0]|0;Ge(c[H>>2]|0,d[P]|0,Q,R,e,m,n);c[O>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[H>>2]|0,d[P+1|0]|0,Q,R,o,p,q);c[O+4>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;Ge(c[H>>2]|0,d[P+2|0]|0,Q,R,r,s,t);c[O+8>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;Ge(c[H>>2]|0,d[P+3|0]|0,Q,R,u,v,w);c[O+12>>2]=c[u>>2]|c[v>>2]<<8|c[w>>2]<<16|-16777216;N=N+ -1|0;if((N|0)==0){break}else{O=O+16|0;P=P+6|0}}P=M+(K<<2)|0;if(g){S=P;T=l}else{O=d[h+(J+4)|0]|0;N=d[h+(J+5)|0]|0;if((a|0)==2){U=7}else if((a|0)==1){U=8}else if((a|0)==3){Ge(c[H>>2]|0,d[h+(J+2)|0]|0,O,N,x,y,z);c[M+((K|2)<<2)>>2]=c[x>>2]|c[y>>2]<<8|c[z>>2]<<16|-16777216;U=7}if((U|0)==7){U=0;Ge(c[H>>2]|0,d[h+(J|1)|0]|0,O,N,A,B,C);c[M+((K|1)<<2)>>2]=c[A>>2]|c[B>>2]<<8|c[C>>2]<<16|-16777216;U=8}if((U|0)==8){U=0;Ge(c[H>>2]|0,d[l]|0,O,N,D,E,F);c[P>>2]=c[D>>2]|c[E>>2]<<8|c[F>>2]<<16|-16777216}S=M+(L+I<<2)|0;T=h+(J+6)|0}b=b+ -1|0;if((b|0)==0){break}else{M=S+(k<<2)|0;h=T+j|0}}i=f;return}function gd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0;f=i;i=i+112|0;e=f+104|0;m=f+100|0;n=f+96|0;o=f+92|0;p=f+88|0;q=f+84|0;r=f+80|0;s=f+76|0;t=f+72|0;u=f+68|0;v=f+64|0;w=f+60|0;x=f+56|0;y=f+52|0;z=f+48|0;A=f+44|0;B=f+40|0;C=f+36|0;D=f+32|0;E=f+28|0;F=f+24|0;G=f+20|0;H=f+16|0;I=f+12|0;J=f+8|0;K=f+4|0;L=f;M=(k<<1)+g|0;N=((j|0)/2|0)*6|0;if(h>>>0>1){j=g>>>0>1;O=a+68|0;P=b;Q=h;R=l;S=b+(k+g<<2)|0;while(1){if(j){k=g;T=P;U=R;V=S;while(1){W=d[U+4|0]|0;X=d[U+5|0]|0;Ge(c[O>>2]|0,d[U]|0,W,X,e,m,n);c[T>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[O>>2]|0,d[U+1|0]|0,W,X,o,p,q);c[T+4>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;Ge(c[O>>2]|0,d[U+2|0]|0,W,X,r,s,t);c[V>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;Ge(c[O>>2]|0,d[U+3|0]|0,W,X,u,v,w);c[V+4>>2]=c[u>>2]|c[v>>2]<<8|c[w>>2]<<16|-16777216;X=T+8|0;W=V+8|0;Y=U+6|0;Z=k+ -2|0;if(Z>>>0>1){k=Z;T=X;U=Y;V=W}else{_=Z;$=X;aa=Y;ba=W;break}}}else{_=g;$=P;aa=R;ba=S}if((_|0)==1){V=d[aa+4|0]|0;U=d[aa+5|0]|0;Ge(c[O>>2]|0,d[aa]|0,V,U,x,y,z);c[$>>2]=c[x>>2]|c[y>>2]<<8|c[z>>2]<<16|-16777216;Ge(c[O>>2]|0,d[aa+2|0]|0,V,U,A,B,C);c[ba>>2]=c[A>>2]|c[B>>2]<<8|c[C>>2]<<16|-16777216;ca=$+4|0;da=aa+6|0;ea=ba+4|0}else{ca=$;da=aa;ea=ba}U=ca+(M<<2)|0;V=da+N|0;T=Q+ -2|0;if(T>>>0>1){P=U;Q=T;R=V;S=ea+(M<<2)|0}else{fa=U;ga=T;ha=V;break}}}else{fa=b;ga=h;ha=l}if((ga|0)!=1){i=f;return}if(g>>>0>1){ga=a+68|0;l=g;h=fa;b=ha;while(1){M=d[b+4|0]|0;ea=d[b+5|0]|0;Ge(c[ga>>2]|0,d[b]|0,M,ea,D,E,F);c[h>>2]=c[D>>2]|c[E>>2]<<8|c[F>>2]<<16|-16777216;Ge(c[ga>>2]|0,d[b+1|0]|0,M,ea,G,H,I);c[h+4>>2]=c[G>>2]|c[H>>2]<<8|c[I>>2]<<16|-16777216;ea=h+8|0;M=b+6|0;S=l+ -2|0;if(S>>>0>1){l=S;h=ea;b=M}else{ia=S;ja=ea;ka=M;break}}}else{ia=g;ja=fa;ka=ha}if((ia|0)!=1){i=f;return}Ge(c[a+68>>2]|0,d[ka]|0,d[ka+4|0]|0,d[ka+5|0]|0,J,K,L);c[ja>>2]=c[J>>2]|c[K>>2]<<8|c[L>>2]<<16|-16777216;i=f;return}function hd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;f=i;i=i+48|0;e=f+32|0;m=f+28|0;n=f+24|0;o=f+20|0;p=f+16|0;q=f+12|0;r=f+8|0;s=f+4|0;t=f;u=(j<<2|0)/2|0;j=g>>>1;v=a+68|0;a=(g&1|0)==0;g=j<<2;w=j<<1;x=b;b=h;h=l;while(1){l=h+g|0;y=j;z=x;A=h;while(1){B=d[A+2|0]|0;C=d[A+3|0]|0;Ge(c[v>>2]|0,d[A]|0,B,C,e,m,n);c[z>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[v>>2]|0,d[A+1|0]|0,B,C,o,p,q);c[z+4>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;y=y+ -1|0;if((y|0)==0){break}else{z=z+8|0;A=A+4|0}}A=x+(w<<2)|0;if(a){D=A;E=l}else{Ge(c[v>>2]|0,d[l]|0,d[h+(g|2)|0]|0,d[h+(g|3)|0]|0,r,s,t);c[A>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;D=x+((w|1)<<2)|0;E=h+(g+4)|0}b=b+ -1|0;if((b|0)==0){break}else{x=D+(k<<2)|0;h=E+u|0}}i=f;return}function id(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;f=i;i=i+48|0;e=f+32|0;m=f+28|0;n=f+24|0;o=f+20|0;p=f+16|0;q=f+12|0;r=f+8|0;s=f+4|0;t=f;if(h>>>0>1){u=((j|0)/2|0)<<2;j=a+68|0;v=g+1+(k<<1)|0;w=g+ -1|0;x=g<<2;y=b;z=h;A=l;B=b+(k+g<<2)|0;while(1){k=g;C=y;D=A;E=B;while(1){F=d[D+2|0]|0;G=d[D+3|0]|0;Ge(c[j>>2]|0,d[D]|0,F,G,e,m,n);c[C>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;Ge(c[j>>2]|0,d[D+1|0]|0,F,G,o,p,q);c[E>>2]=c[o>>2]|c[p>>2]<<8|c[q>>2]<<16|-16777216;k=k+ -1|0;if((k|0)==0){break}else{C=C+4|0;D=D+4|0;E=E+4|0}}E=y+(w+v<<2)|0;D=A+(x+u)|0;C=z+ -2|0;if(C>>>0>1){y=E;z=C;A=D;B=B+(w+v<<2)|0}else{H=E;I=C;J=D;break}}}else{H=b;I=h;J=l}if((I|0)!=1){i=f;return}I=a+68|0;a=g;g=H;H=J;while(1){Ge(c[I>>2]|0,d[H]|0,d[H+2|0]|0,d[H+3|0]|0,r,s,t);c[g>>2]=c[r>>2]|c[s>>2]<<8|c[t>>2]<<16|-16777216;a=a+ -1|0;if((a|0)==0){break}else{g=g+4|0;H=H+4|0}}i=f;return}function jd(a,b,e,f,g,h,j,k,l){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f+8|0;m=f+4|0;n=f;o=a+68|0;a=b;b=l;l=h;while(1){h=g;p=a;q=b;while(1){Ge(c[o>>2]|0,d[q]|0,d[q+1|0]|0,d[q+2|0]|0,e,m,n);c[p>>2]=c[e>>2]|c[m>>2]<<8|c[n>>2]<<16|-16777216;h=h+ -1|0;if((h|0)==0){break}else{p=p+4|0;q=q+3|0}}l=l+ -1|0;if((l|0)==0){break}else{a=a+(g+k<<2)|0;b=b+((g+j|0)*3|0)|0}}i=f;return}function kd(b,e,f,h,j,k,l,m,n){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;h=i;i=i+32|0;f=h+20|0;o=h+16|0;p=h+12|0;q=h+8|0;r=h+4|0;s=h;t=l*3|0;if((k|0)==0){i=h;return}l=(j|0)==0;u=b+72|0;b=j*3|0;v=n;n=e;e=k;while(1){e=e+ -1|0;if(l){w=v;x=n}else{k=v+b|0;y=j;z=n;A=v;while(1){y=y+ -1|0;De(c[u>>2]|0,d[A]|0,a[A+1|0]|0,a[A+2|0]|0,f,o,p);Ee(c[u>>2]|0,+g[f>>2],+g[o>>2],+g[p>>2],q,r,s);c[z>>2]=c[q>>2]|c[r>>2]<<8|c[s>>2]<<16|-16777216;if((y|0)==0){break}else{z=z+4|0;A=A+3|0}}w=k;x=n+(j<<2)|0}if((e|0)==0){break}else{v=w+t|0;n=x+(m<<2)|0}}i=h;return}function ld(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;g=a[b]|0;h=g<<24>>24;if((h|0)==114){j=(a[b+1|0]|0)==43?2:0;i=e;return j|0}else if((h|0)==97|(h|0)==119){i=e;return(g<<24>>24==119?578:66)|0}else{c[f>>2]=b;sc(0,d,17224,f);j=-1;i=e;return j|0}return 0}



function $i(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;g=a;h=b;i=h;j=d;k=e;l=k;if((i|0)==0){m=(f|0)!=0;if((l|0)==0){if(m){c[f>>2]=(g>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(g>>>0)/(j>>>0)>>>0;return(F=n,o)|0}else{if(!m){n=0;o=0;return(F=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;o=0;return(F=n,o)|0}}m=(l|0)==0;do{if((j|0)!=0){if(!m){p=(Ti(l|0)|0)-(Ti(i|0)|0)|0;if(p>>>0<=31){q=p+1|0;r=31-p|0;s=p-31>>31;t=q;u=g>>>(q>>>0)&s|i<<r;v=i>>>(q>>>0)&s;w=0;x=g<<r;break}if((f|0)==0){n=0;o=0;return(F=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(F=n,o)|0}r=j-1|0;if((r&j|0)!=0){s=(Ti(j|0)|0)+33-(Ti(i|0)|0)|0;q=64-s|0;p=32-s|0;y=p>>31;z=s-32|0;A=z>>31;t=s;u=p-1>>31&i>>>(z>>>0)|(i<<p|g>>>(s>>>0))&A;v=A&i>>>(s>>>0);w=g<<q&y;x=(i<<q|g>>>(z>>>0))&y|g<<p&s-33>>31;break}if((f|0)!=0){c[f>>2]=r&g;c[f+4>>2]=0}if((j|0)==1){n=h|b&0;o=a|0|0;return(F=n,o)|0}else{r=Ui(j|0)|0;n=i>>>(r>>>0)|0;o=i<<32-r|g>>>(r>>>0)|0;return(F=n,o)|0}}else{if(m){if((f|0)!=0){c[f>>2]=(i>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(i>>>0)/(j>>>0)>>>0;return(F=n,o)|0}if((g|0)==0){if((f|0)!=0){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(l>>>0)}n=0;o=(i>>>0)/(l>>>0)>>>0;return(F=n,o)|0}r=l-1|0;if((r&l|0)==0){if((f|0)!=0){c[f>>2]=a|0;c[f+4>>2]=r&i|b&0}n=0;o=i>>>((Ui(l|0)|0)>>>0);return(F=n,o)|0}r=(Ti(l|0)|0)-(Ti(i|0)|0)|0;if(r>>>0<=30){s=r+1|0;p=31-r|0;t=s;u=i<<p|g>>>(s>>>0);v=i>>>(s>>>0);w=0;x=g<<p;break}if((f|0)==0){n=0;o=0;return(F=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(F=n,o)|0}}while(0);if((t|0)==0){B=x;C=w;D=v;E=u;G=0;H=0}else{b=d|0|0;d=k|e&0;e=Oi(b,d,-1,-1)|0;k=F;h=x;x=w;w=v;v=u;u=t;t=0;while(1){I=x>>>31|h<<1;J=t|x<<1;a=v<<1|h>>>31|0;g=v>>>31|w<<1|0;Ii(e,k,a,g)|0;i=F;l=i>>31|((i|0)<0?-1:0)<<1;K=l&1;L=Ii(a,g,l&b,(((i|0)<0?-1:0)>>31|((i|0)<0?-1:0)<<1)&d)|0;M=F;i=u-1|0;if((i|0)==0){break}else{h=I;x=J;w=M;v=L;u=i;t=K}}B=I;C=J;D=M;E=L;G=0;H=K}K=C;C=0;if((f|0)!=0){c[f>>2]=E;c[f+4>>2]=D}n=(K|0)>>>31|(B|C)<<1|(C<<1|K>>>31)&0|G;o=(K<<1|0>>>31)&-2|H;return(F=n,o)|0}function aj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return fb[a&31](b|0,c|0,d|0)|0}function bj(a,b){a=a|0;b=b|0;gb[a&15](b|0)}function cj(a,b,c){a=a|0;b=b|0;c=c|0;hb[a&1](b|0,c|0)}function dj(a,b,c,d,e,f,g,h,i,j,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;ib[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0,l|0,m|0)}function ej(a,b){a=a|0;b=b|0;return jb[a&31](b|0)|0}function fj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;kb[a&63](b|0,c|0,d|0)}function gj(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;lb[a&31](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function hj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return mb[a&63](b|0,c|0,d|0,e|0)|0}function ij(a,b,c){a=a|0;b=b|0;c=c|0;return nb[a&31](b|0,c|0)|0}function jj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ob[a&3](b|0,c|0,d|0,e|0)}function kj(a,b,c){a=a|0;b=b|0;c=c|0;ca(0);return 0}function lj(a){a=a|0;ca(1)}function mj(a,b){a=a|0;b=b|0;ca(2)}function nj(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;ca(3)}function oj(a){a=a|0;ca(4);return 0}function pj(a,b,c){a=a|0;b=b|0;c=c|0;ca(5)}function qj(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;ca(6)}function rj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(7);return 0}function sj(a,b){a=a|0;b=b|0;ca(8);return 0}function tj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(9)}




// EMSCRIPTEN_END_FUNCS
var fb=[kj,Pb,Qb,nd,ee,fe,je,zf,Af,dg,eg,ch,dh,fh,gh,Eh,Fh,ri,kj,kj,kj,kj,kj,kj,kj,kj,kj,kj,kj,kj,kj,kj];var gb=[lj,Te,Jf,Kf,bg,cg,Jg,ah,bh,Oh,lj,lj,lj,lj,lj,lj];var hb=[mj,si];var ib=[nj,Bc,Cc,Dc,Ec,Fc,Gc,Hc,Jc,nj,nj,nj,nj,nj,nj,nj];var jb=[oj,he,ie,Le,Se,df,ff,Cf,Df,Hf,qf,Wf,Xf,_f,Bg,Cg,Fg,Hg,Qg,Ug,Vg,Yg,_g,ih,jh,Bh,Gh,Hh,Kh,Mh,oj,oj];var kb=[pj,se,te,Ad,Bd,Cd,Dd,Ed,de,Bf,Vf,qg,rg,sg,ug,vg,wg,yg,zg,hg,ig,kg,lg,og,hh,sh,th,uh,xh,yh,zh,mh,nh,oh,rh,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj,pj];var lb=[qj,Mc,Nc,Oc,Pc,Qc,Rc,Tc,Uc,Vc,Wc,Xc,Yc,Zc,_c,$c,ad,bd,cd,dd,ed,fd,gd,hd,id,jd,kd,qj,qj,qj,qj,qj];var mb=[rj,Kc,Lc,zc,Ac,ge,Me,Ne,Oe,Ie,Je,Ke,gf,hf,Ff,If,of,pf,sf,Mf,Yf,Zf,$f,ag,pg,tg,xg,gg,jg,ng,Eg,Ig,Kg,Mg,Og,Rg,Sg,Xg,$g,vh,wh,ph,qh,Ch,Jh,Nh,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj,rj];var nb=[sj,ef,Ag,Ng,Ah,Lg,cf,rf,tf,lf,nf,Dh,Tg,Uf,Xh,Yh,Zh,Xb,Qe,Pe,Ld,jf,Ef,Gf,Dg,Gg,Pg,Wg,Zg,Ih,Lh,sj];var ob=[tj,od,ke,kf];return{_GetField:Fb,_strlen:Ni,_TIFFClose:Hb,_TIFFReadDirectory:ac,_TIFFGetField:Kb,_bitshift64Lshr:Pi,_bitshift64Shl:Mi,_TIFFReadRGBAImageOriented:xc,_TIFFCurrentDirectory:rd,_TIFFSetDirectory:Sb,_realloc:Bi,_memset:Li,_memcpy:Qi,_i64Subtract:Ii,_rand_r:Ji,_TIFFOpen:le,_i64Add:Oi,_TIFFReadRGBAImage:yc,__TIFFmalloc:me,_rand:Ki,_free:Ai,_malloc:zi,__TIFFfree:ne,_strcpy:Ri,runPostSets:Hi,stackAlloc:pb,stackSave:qb,stackRestore:rb,setThrew:sb,setTempRet0:vb,setTempRet1:wb,setTempRet2:xb,setTempRet3:yb,setTempRet4:zb,setTempRet5:Ab,setTempRet6:Bb,setTempRet7:Cb,setTempRet8:Db,setTempRet9:Eb,dynCall_iiii:aj,dynCall_vi:bj,dynCall_vii:cj,dynCall_viiiiiiiiiiii:dj,dynCall_ii:ej,dynCall_viii:fj,dynCall_viiiiiiiii:gj,dynCall_iiiii:hj,dynCall_iii:ij,dynCall_viiii:jj}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiiiiii": invoke_viiiiiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fstat": _fstat, "_lseek": _lseek, "___setErrNo": ___setErrNo, "_vfprintf": _vfprintf, "___assert_fail": ___assert_fail, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "_snprintf": _snprintf, "_llvm_bswap_i32": _llvm_bswap_i32, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_close": _close, "__formatString": __formatString, "_atan2": _atan2, "_recv": _recv, "_pread": _pread, "_mkport": _mkport, "_sprintf": _sprintf, "__reallyNegative": __reallyNegative, "_write": _write, "___errno_location": ___errno_location, "_stat": _stat, "_log": _log, "_read": _read, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_munmap": _munmap, "_mmap": _mmap, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
var _GetField = Module["_GetField"] = asm["_GetField"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _TIFFClose = Module["_TIFFClose"] = asm["_TIFFClose"];
var _TIFFReadDirectory = Module["_TIFFReadDirectory"] = asm["_TIFFReadDirectory"];
var _TIFFGetField = Module["_TIFFGetField"] = asm["_TIFFGetField"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _TIFFReadRGBAImageOriented = Module["_TIFFReadRGBAImageOriented"] = asm["_TIFFReadRGBAImageOriented"];
var _TIFFCurrentDirectory = Module["_TIFFCurrentDirectory"] = asm["_TIFFCurrentDirectory"];
var _TIFFSetDirectory = Module["_TIFFSetDirectory"] = asm["_TIFFSetDirectory"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _TIFFOpen = Module["_TIFFOpen"] = asm["_TIFFOpen"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _TIFFReadRGBAImage = Module["_TIFFReadRGBAImage"] = asm["_TIFFReadRGBAImage"];
var __TIFFmalloc = Module["__TIFFmalloc"] = asm["__TIFFmalloc"];
var _rand = Module["_rand"] = asm["_rand"];
var _free = Module["_free"] = asm["_free"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __TIFFfree = Module["__TIFFfree"] = asm["__TIFFfree"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiiiiii = Module["dynCall_viiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}





  return Module;
};



var TiffTag = {
    SUBFILETYPE: 254,
    OSUBFILETYPE: 255,
    IMAGEWIDTH: 256,
    IMAGELENGTH: 257,
    BITSPERSAMPLE: 258,
    COMPRESSION: 259,
    PHOTOMETRIC: 262,
    THRESHHOLDING: 263,
    CELLWIDTH: 264,
    CELLLENGTH: 265,
    FILLORDER: 266,
    DOCUMENTNAME: 269,
    IMAGEDESCRIPTION: 270,
    MAKE: 271,
    MODEL: 272,
    STRIPOFFSETS: 273,
    ORIENTATION: 274,
    SAMPLESPERPIXEL: 277,
    ROWSPERSTRIP: 278,
    STRIPBYTECOUNTS: 279,
    MINSAMPLEVALUE: 280,
    MAXSAMPLEVALUE: 281,
    XRESOLUTION: 282,
    YRESOLUTION: 283,
    PLANARCONFIG: 284,
    PAGENAME: 285,
    XPOSITION: 286,
    YPOSITION: 287,
    FREEOFFSETS: 288,
    FREEBYTECOUNTS: 289,
    GRAYRESPONSEUNIT: 290,
    GRAYRESPONSECURVE: 291,
    RESOLUTIONUNIT: 296,
    PAGENUMBER: 297,
    COLORRESPONSEUNIT: 300,
    TRANSFERFUNCTION: 301,
    SOFTWARE: 305,
    DATETIME: 306,
    ARTIST: 315,
    HOSTCOMPUTER: 316,
    PREDICTOR: 317,
    WHITEPOINT: 318,
    PRIMARYCHROMATICITIES: 319,
    COLORMAP: 320,
    HALFTONEHINTS: 321,
    TILEWIDTH: 322,
    TILELENGTH: 323,
    TILEOFFSETS: 324,
    TILEBYTECOUNTS: 325,
    BADFAXLINES: 326,
    CLEANFAXDATA: 327,
    CONSECUTIVEBADFAXLINES: 328,
    SUBIFD: 330,
    INKSET: 332,
    INKNAMES: 333,
    NUMBEROFINKS: 334,
    DOTRANGE: 336,
    TARGETPRINTER: 337,
    EXTRASAMPLES: 338,
    SAMPLEFORMAT: 339,
    SMINSAMPLEVALUE: 340,
    SMAXSAMPLEVALUE: 341,
    CLIPPATH: 343,
    XCLIPPATHUNITS: 344,
    YCLIPPATHUNITS: 345,
    INDEXED: 346,
    JPEGTABLES: 347,
    OPIPROXY: 351,
    GLOBALPARAMETERSIFD: 400,
    PROFILETYPE: 401,
    FAXPROFILE: 402,
    CODINGMETHODS: 403,
    VERSIONYEAR: 404,
    MODENUMBER: 405,
    DECODE: 433,
    IMAGEBASECOLOR: 434,
    JPEGPROC: 512,
    JPEGIFOFFSET: 513,
    JPEGIFBYTECOUNT: 514,
    JPEGRESTARTINTERVAL: 515,
    JPEGLOSSLESSPREDICTORS: 517,
    JPEGPOINTTRANSFORM: 518,
    JPEGQTABLES: 519,
    JPEGDCTABLES: 520,
    JPEGACTABLES: 521,
    YCBCRCOEFFICIENTS: 529,
    YCBCRSUBSAMPLING: 530,
    YCBCRPOSITIONING: 531,
    REFERENCEBLACKWHITE: 532,
    STRIPROWCOUNTS: 559,
    XMLPACKET: 700,
    OPIIMAGEID: 32781,
    REFPTS: 32953,
    REGIONTACKPOINT: 32954,
    REGIONWARPCORNERS: 32955,
    REGIONAFFINE: 32956,
    MATTEING: 32995,
    DATATYPE: 32996,
    IMAGEDEPTH: 32997,
    TILEDEPTH: 32998,
    PIXAR_IMAGEFULLWIDTH: 33300,
    PIXAR_IMAGEFULLLENGTH: 33301,
    PIXAR_TEXTUREFORMAT: 33302,
    PIXAR_WRAPMODES: 33303,
    PIXAR_FOVCOT: 33304,
    PIXAR_MATRIX_WORLDTOSCREEN: 33305,
    PIXAR_MATRIX_WORLDTOCAMERA: 33306,
    WRITERSERIALNUMBER: 33405,
    COPYRIGHT: 33432,
    RICHTIFFIPTC: 33723,
    FRAMECOUNT: 34232,
    PHOTOSHOP: 34377,
    EXIFIFD: 34665,
    ICCPROFILE: 34675,
    IMAGELAYER: 34732,
    JBIGOPTIONS: 34750,
    GPSIFD: 34853,
    FAXRECVPARAMS: 34908,
    FAXSUBADDRESS: 34909,
    FAXRECVTIME: 34910,
    FAXDCS: 34911,
    STONITS: 37439,
    FEDEX_EDR: 34929,
    INTEROPERABILITYIFD: 40965,
    DNGVERSION: 50706,
    DNGBACKWARDVERSION: 50707,
    UNIQUECAMERAMODEL: 50708,
    LOCALIZEDCAMERAMODEL: 50709,
    CFAPLANECOLOR: 50710,
    CFALAYOUT: 50711,
    LINEARIZATIONTABLE: 50712,
    BLACKLEVELREPEATDIM: 50713,
    BLACKLEVEL: 50714,
    BLACKLEVELDELTAH: 50715,
    BLACKLEVELDELTAV: 50716,
    WHITELEVEL: 50717,
    DEFAULTSCALE: 50718,
    DEFAULTCROPORIGIN: 50719,
    DEFAULTCROPSIZE: 50720,
    ANALOGBALANCE: 50727,
    ASSHOTNEUTRAL: 50728,
    ASSHOTWHITEXY: 50729,
    BASELINEEXPOSURE: 50730,
    BASELINENOISE: 50731,
    BASELINESHARPNESS: 50732,
    BAYERGREENSPLIT: 50733,
    LINEARRESPONSELIMIT: 50734,
    CAMERASERIALNUMBER: 50735,
    LENSINFO: 50736,
    CHROMABLURRADIUS: 50737,
    ANTIALIASSTRENGTH: 50738,
    SHADOWSCALE: 50739,
    DNGPRIVATEDATA: 50740,
    MAKERNOTESAFETY: 50741,
    BESTQUALITYSCALE: 50780,
    RAWDATAUNIQUEID: 50781,
    ORIGINALRAWFILENAME: 50827,
    ORIGINALRAWFILEDATA: 50828,
    ACTIVEAREA: 50829,
    MASKEDAREAS: 50830,
    ASSHOTICCPROFILE: 50831,
    ASSHOTPREPROFILEMATRIX: 50832,
    CURRENTICCPROFILE: 50833,
    CURRENTPREPROFILEMATRIX: 50834,
    DCSHUESHIFTVALUES: 65535,
    FAXMODE: 65536,
    JPEGQUALITY: 65537,
    JPEGCOLORMODE: 65538,
    JPEGTABLESMODE: 65539,
    FAXFILLFUNC: 65540,
    PIXARLOGDATAFMT: 65549,
    DCSIMAGERTYPE: 65550,
    DCSINTERPMODE: 65551,
    DCSBALANCEARRAY: 65552,
    DCSCORRECTMATRIX: 65553,
    DCSGAMMA: 65554,
    DCSTOESHOULDERPTS: 65555,
    DCSCALIBRATIONFD: 65556,
    ZIPQUALITY: 65557,
    PIXARLOGQUALITY: 65558,
    DCSCLIPRECTANGLE: 65559,
    SGILOGDATAFMT: 65560,
    SGILOGENCODE: 65561,
    LZMAPRESET: 65562,
    PERSAMPLE: 65563
};
var Tiff = (function () {
    function Tiff(params) {
        if (Tiff.Module === null) {
            Tiff.initialize({});
        }
        this._filename = Tiff.createFileSystemObjectFromBuffer(params.buffer);
        this._tiffPtr = Tiff.Module.ccall('TIFFOpen', 'number', ['string', 'string'], [this._filename, 'r']);
        if (this._tiffPtr === 0) {
            throw new Tiff.Exception('The function TIFFOpen returns NULL');
        }
    }
    Tiff.initialize = function (options) {
        if (Tiff.Module !== null) {
            return;
        }
        Tiff.Module = loadModule(options);
    };

    Tiff.prototype.width = function () {
        return this.getField(Tiff.Tag.IMAGEWIDTH);
    };

    Tiff.prototype.height = function () {
        return this.getField(Tiff.Tag.IMAGELENGTH);
    };

    Tiff.prototype.currentDirectory = function () {
        return Tiff.Module.ccall('TIFFCurrentDirectory', 'number', ['number'], [this._tiffPtr]);
    };

    Tiff.prototype.countDirectory = function () {
        var count = 0;
        var current = this.currentDirectory();
        while (true) {
            count += 1;
            var status = Tiff.Module.ccall('TIFFReadDirectory', 'number', ['number'], [this._tiffPtr]);
            if (status === 0) {
                break;
            }
        }
        this.setDirectory(current);
        return count;
    };

    Tiff.prototype.setDirectory = function (index) {
        return Tiff.Module.ccall('TIFFSetDirectory', 'number', ['number', 'number'], [this._tiffPtr, index]);
    };

    Tiff.prototype.getField = function (tag) {
        var value = Tiff.Module.ccall('GetField', 'number', ['number', 'number'], [this._tiffPtr, tag]);
        return value;
    };

    Tiff.prototype.readRGBAImage = function () {
        var width = this.width();
        var height = this.height();
        var raster = Tiff.Module.ccall('_TIFFmalloc', 'number', ['number'], [width * height * 4]);
        var result = Tiff.Module.ccall('TIFFReadRGBAImageOriented', 'number', ['number', 'number', 'number', 'number', 'number', 'number'], [
            this._tiffPtr, width, height, raster, 1, 0
        ]);

        if (result === 0) {
            throw new Tiff.Exception('The function TIFFReadRGBAImageOriented returns NULL');
        }

        // copy the subarray, not create new sub-view
        var data = Tiff.Module.HEAPU8.buffer.slice(raster, raster + width * height * 4);
        Tiff.Module.ccall('free', 'number', ['number'], [raster]);
        return data;
    };

    Tiff.prototype.toCanvas = function () {
        var width = this.width();
        var height = this.height();
        var raster = Tiff.Module.ccall('_TIFFmalloc', 'number', ['number'], [width * height * 4]);
        var result = Tiff.Module.ccall('TIFFReadRGBAImageOriented', 'number', ['number', 'number', 'number', 'number', 'number', 'number'], [
            this._tiffPtr, width, height, raster, 1, 0
        ]);

        if (result === 0) {
            throw new Tiff.Exception('The function TIFFReadRGBAImageOriented returns NULL');
        }
        var image = Tiff.Module.HEAPU8.subarray(raster, raster + width * height * 4);

        var canvas = document.createElement('canvas');
        var context = canvas.getContext('2d');
        canvas.width = width;
        canvas.height = height;
        var imageData = context.createImageData(width, height);
        imageData.data.set(image);
        context.putImageData(imageData, 0, 0);
        Tiff.Module.ccall('free', 'number', ['number'], [raster]);
        return canvas;
    };

    Tiff.prototype.toDataURL = function () {
        return this.toCanvas().toDataURL();
    };

    Tiff.prototype.close = function () {
        Tiff.Module.ccall('TIFFClose', 'number', ['number'], [this._tiffPtr]);
    };

    Tiff.createUniqueFileName = function () {
        Tiff.uniqueIdForFileName += 1;
        return String(Tiff.uniqueIdForFileName) + '.tiff';
    };

    Tiff.createFileSystemObjectFromBuffer = function (buffer) {
        var filename = Tiff.createUniqueFileName();
        Tiff.Module.FS.createDataFile('/', filename, new Uint8Array(buffer), true, false);
        return filename;
    };
    Tiff.uniqueIdForFileName = 0;
    Tiff.Module = null;
    return Tiff;
})();

var Tiff;
(function (Tiff) {
    var Exception = (function () {
        function Exception(message) {
            this.message = message;
            this.name = 'Tiff.Exception';
        }
        return Exception;
    })();
    Tiff.Exception = Exception;

    Tiff.Tag = TiffTag;
})(Tiff || (Tiff = {}));

// for closure compiler
Tiff.prototype['width'] = Tiff.prototype.width;
Tiff.prototype['height'] = Tiff.prototype.height;
Tiff.prototype['currentDirectory'] = Tiff.prototype.currentDirectory;
Tiff.prototype['countDirectory'] = Tiff.prototype.countDirectory;
Tiff.prototype['setDirectory'] = Tiff.prototype.setDirectory;
Tiff.prototype['getField'] = Tiff.prototype.getField;
Tiff.prototype['readRGBAImage'] = Tiff.prototype.readRGBAImage;
Tiff.prototype['close'] = Tiff.prototype.close;
Tiff['Exception'] = Tiff.Exception;
Tiff['initialize'] = Tiff.initialize;


if (typeof process === 'object' && typeof require === 'function') {
    module['exports'] = Tiff;
} else if (typeof define === "function" && define.amd) {
    define('tiff', [], function () {
        return Tiff;
    });
} else if (typeof window === 'object') {
    window['Tiff'] = Tiff;
} else if (typeof importScripts === 'function') {
    self['Tiff'] = Tiff;
}
